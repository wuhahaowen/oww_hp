server {
    listen 5123;
    server_name localhost;
    
    # 规范化 URL 中的重复斜杠
    if ($request_uri ~ "^//+(.*)") {
        return 301 /$1;
    }
    
    root /app;
    index index.html;

    # 设置 base path 为环境变量，支持 ingress 模式
    set $base_path "";
    if ($http_x_ingress_path) {
        set $base_path $http_x_ingress_path;
    }

    # 启用gzip压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml;
    gzip_disable "MSIE [1-6]\.";

    location / {
        try_files $uri $uri/ $base_path/index.html;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        
        # 重写 base path
        sub_filter '<head>' '<head><base href="$base_path/">';
        sub_filter_once on;
    }

 


    # 上传文件
    location /config/hass-panel/upload {
        alias /config/hass-panel/upload;
    }

    # 更新API端点
    location /api {
        proxy_pass http://127.0.0.1:5124;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Ingress-Path $base_path;

        # 允许跨域请求
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,X-Api-Key' always;

        # 设置post body
        client_max_body_size 1024M;
        # 处理 OPTIONS 请求
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,X-Api-Key';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }

    # go2rtc反向代理
    location /go2rtc {
        proxy_pass http://127.0.0.1:5125/go2rtc;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Ingress-Path $base_path;
        
        # WebSocket支持
        proxy_read_timeout 86400;
        proxy_send_timeout 86400;
        
        # 允许跨域
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization' always;
    }

    # 健康检查端点
    location /health {
        access_log off;
        return 200 'healthy\n';
    }
} 