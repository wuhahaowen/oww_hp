{"version":3,"file":"aether3d-engine.es.js","sources":["../../Engine/core/ScriptBase.ts","../../Engine/core/PostProcessingEffectComposer.ts","../../Engine/events/EventEmitter.ts","../../Engine/core/PerformanceUtils.ts","../../Engine/controllers/PerformanceAnalyzerScript.ts","../../Engine/controllers/FPSDiagnosticTool.ts","../../Engine/core/OSUtils.ts","../../Engine/controllers/MouseInteractionScript.ts","../../Engine/core/Aether3d.ts","../../Engine/core/SceneManager.ts","../../Engine/core/RendererSystem.ts","../../Engine/core/EngineScripts.ts","../../Engine/controllers/MirrorReflectionScript.ts","../../Engine/controllers/OrbitControlsScript.ts","../../Engine/controllers/SceneLightingScript.ts","../../Engine/controllers/BloomEffectScript.ts","../../Engine/controllers/RectAreaLightScript.ts","../../node_modules/three/examples/jsm/utils/BufferGeometryUtils.js","../../node_modules/three/examples/jsm/loaders/GLTFLoader.js","../../node_modules/three/examples/jsm/loaders/DRACOLoader.js","../../Engine/controllers/GLBLoaderScript.ts","../../Engine/controllers/UVAnimationScript.ts","../../Engine/materials/AnimationMaterial.ts","../../Engine/materials/ShaderGlowMaterial.ts","../../Engine/materials/WindMaterial.ts","../../Engine/materials/RibbonMaterial.ts","../../Engine/math/Math.ts","../../Engine/controllers/Edit/DirectionalLightScript.ts","../../Engine/controllers/Edit/PointLightScript.ts"],"sourcesContent":["import { THREE } from \"./global\";\r\nimport type { IScript } from \"../interface\";\r\nimport type { Aether3d } from \"./Aether3d\";\r\nimport type { PostProcessingEffectComposer } from \"./PostProcessingEffectComposer\";\r\n\r\n/**\r\n * ScriptBase 类为所有脚本提供基础实现\r\n * 使脚本能够方便地访问渲染器中的基础数据\r\n */\r\nexport class ScriptBase implements IScript {\r\n    /**\r\n     * 脚本名称\r\n     */\r\n    public name?: string;\r\n\r\n    /**\r\n     * 脚本的唯一标识符\r\n     */\r\n    public uuid?: string;\r\n\r\n    /**\r\n     * 脚本附加到的宿主对象\r\n     */\r\n    public host: THREE.Scene | THREE.Object3D | THREE.WebGLRenderer | THREE.Camera = null!;\r\n\r\n    /**\r\n     * 渲染器实例的引用\r\n     * 通过这个引用，脚本可以访问场景、相机、渲染器等核心对象\r\n     */\r\n    protected renderer: Aether3d | null = null;\r\n\r\n    /**\r\n     * 场景对象的便捷访问\r\n     */\r\n    protected get scene(): THREE.Scene {\r\n        if (this.renderer) {\r\n            return this.renderer.scene;\r\n        }\r\n        throw new Error('Renderer not available');\r\n    }\r\n\r\n    /**\r\n     * 相机对象的便捷访问\r\n     */\r\n    protected get camera(): THREE.PerspectiveCamera {\r\n        if (this.renderer) {\r\n            return this.renderer.camera;\r\n        }\r\n        throw new Error('Renderer not available');\r\n    }\r\n\r\n    /**\r\n     * 渲染器对象的便捷访问\r\n     */\r\n    protected get webGLRenderer(): THREE.WebGLRenderer {\r\n        if (this.renderer) {\r\n            return this.renderer.renderer;\r\n        }\r\n        throw new Error('Renderer not available');\r\n    }\r\n\r\n    /**\r\n     * 后处理Composer的便捷访问\r\n     */\r\n    protected get postProcessingComposer(): PostProcessingEffectComposer | null {\r\n        if (this.renderer) {\r\n            return this.renderer.getPostProcessingComposer();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 检查对象是否可选择\r\n     * @param object 要检查的对象\r\n     * @returns 对象是否可选择\r\n     */\r\n    protected isObjectSelectable(object: THREE.Object3D): boolean {\r\n        // 默认情况下，所有对象都是可选择的\r\n        // 子类可以重写此方法以实现更复杂的选择逻辑\r\n        console.log(object.name)\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 设置渲染器引用\r\n     * @param renderer 渲染器实例\r\n     */\r\n    public setRenderer(renderer: Aether3d): void {\r\n        this.renderer = renderer;\r\n    }\r\n\r\n    /**\r\n     * 获取渲染器引用\r\n     * @returns 渲染器实例\r\n     */\r\n    public engine(): Aether3d | null {\r\n        return this.renderer;\r\n    }\r\n\r\n    /**\r\n     * 添加脚本\r\n     * @param script\r\n     */\r\n    public addScript(script: IScript): void{\r\n        if (this.renderer) {\r\n            this.renderer.addScript(script);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 移除脚本\r\n     * @param script\r\n     */\r\n    public removeScript(script: IScript): void {\r\n        if (this.renderer) {\r\n            this.renderer.removeScript(script);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 当脚本实例被加载时调用\r\n     * 在 initialize 之前调用。用于初始化脚本自身，不依赖于其他对象\r\n     * 对应 Unity 的 Awake\r\n     */\r\n    public awake?(): void;\r\n\r\n    /**\r\n     * 当脚本变为启用和激活状态时调用\r\n     * 在 awake 之后，initialize 之前调用（如果脚本是启用的）\r\n     * 对应 Unity 的 OnEnable\r\n     */\r\n    public onEnable?(): void;\r\n\r\n    /**\r\n     * 脚本初始化时调用（在第一帧更新之前）\r\n     * 通常用于获取引用、设置初始状态等\r\n     * 对应 Unity 的 Start\r\n     */\r\n    public start?(): Promise<void> | void;\r\n\r\n    /**\r\n     * 每一帧更新时调用（在所有 start 调用之后）\r\n     * 用于实现脚本的主要逻辑，如动画、AI、输入响应等\r\n     * @param deltaTime 自上一帧以来经过的时间（秒）\r\n     */\r\n    public update?(deltaTime: number): void;\r\n\r\n    /**\r\n     * 每一帧在 update 调用之后调用\r\n     * 通常用于跟随逻辑（如相机跟随），确保在所有 update 逻辑执行完毕后进行\r\n     * @param deltaTime 自上一帧以来经过的时间（秒）\r\n     */\r\n    public lateUpdate?(deltaTime: number): void;\r\n\r\n    /**\r\n     * 固定时间步长更新\r\n     * 用于物理计算等需要固定时间步长的逻辑\r\n     * @param fixedTimeStep 固定时间步长\r\n     */\r\n    public fixedUpdate?(fixedTimeStep: number): void;\r\n\r\n    /**\r\n     * 在每一帧渲染前调用\r\n     */\r\n    public onPreRender?(): void;\r\n\r\n    /**\r\n     * 在每一帧渲染后调用\r\n     */\r\n    public onPostRender?(): void;\r\n\r\n    /**\r\n     * 重置窗口时调用\r\n     */\r\n    public onResize(): void {\r\n        // 默认实现为空\r\n    }\r\n\r\n    /**\r\n     * 当脚本变为禁用或非激活状态时调用\r\n     * 对应 Unity 的 OnDisable\r\n     */\r\n    public onDisable?(): void;\r\n\r\n    /**\r\n     * 脚本销毁时调用\r\n     * 用于清理资源、移除事件监听器等\r\n     * 对应 Unity 的 OnDestroy\r\n     */\r\n    public destroy?(): void;\r\n\r\n    /**\r\n     * 向场景中添加对象\r\n     * @param object 要添加的对象\r\n     */\r\n    protected addObject(object: THREE.Object3D): void {\r\n        this.scene.add(object);\r\n    }\r\n\r\n    /**\r\n     * 从场景中移除对象\r\n     * @param object 要移除的对象\r\n     */\r\n    protected removeObject(object: THREE.Object3D): void {\r\n        this.scene.remove(object);\r\n    }\r\n\r\n    /**\r\n     * 获取场景中的所有对象\r\n     * @returns 场景中的对象数组\r\n     */\r\n    protected getSceneObjects(): THREE.Object3D[] {\r\n        return this.scene.children;\r\n    }\r\n\r\n    /**\r\n     * 查找场景中的对象\r\n     * @param name 对象名称\r\n     * @returns 找到的对象或undefined\r\n     */\r\n    protected findObjectByName(name: string): THREE.Object3D | undefined {\r\n        return this.scene.getObjectByName(name);\r\n    }\r\n\r\n    /**\r\n     * 设置相机位置\r\n     * @param x X坐标\r\n     * @param y Y坐标\r\n     * @param z Z坐标\r\n     */\r\n    protected setCameraPosition(x: number, y: number, z: number): void {\r\n        this.camera.position.set(x, y, z);\r\n    }\r\n\r\n    /**\r\n     * 设置相机看向目标\r\n     * @param x X坐标\r\n     * @param y Y坐标\r\n     * @param z Z坐标\r\n     */\r\n    protected lookAt(x: number, y: number, z: number): void {\r\n        this.camera.lookAt(x, y, z);\r\n    }\r\n\r\n    /**\r\n     * 添加后处理通道\r\n     * @param pass 要添加的后处理通道\r\n     * @param beforeOutput 是否在输出通道之前插入\r\n     */\r\n    protected addPostProcessingPass(pass: any, beforeOutput: boolean = true): void {\r\n        if (this.renderer) {\r\n            this.renderer.addPostProcessingPass(pass, beforeOutput);\r\n        } else {\r\n            console.warn('[ScriptBase] Renderer not available for adding post-processing pass');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 移除后处理通道\r\n     * @param pass 要移除的后处理通道\r\n     */\r\n    protected removePostProcessingPass(pass: any): void {\r\n        if (this.renderer) {\r\n            this.renderer.removePostProcessingPass(pass);\r\n        } else {\r\n            console.warn('[ScriptBase] Renderer not available for removing post-processing pass');\r\n        }\r\n    }\r\n}\r\n","import { EffectComposer, RenderPass, OutputPass } from './global';\r\nimport type { Aether3d } from './Aether3d';\r\n\r\n/**\r\n * 统一的后处理渲染EffectComposer类\r\n * 提供了完整的后处理效果支持框架\r\n */\r\nexport class PostProcessingEffectComposer {\r\n    private composer: EffectComposer | null = null;\r\n    private renderPass: RenderPass | null = null;\r\n    private outputPass: OutputPass | null = null;\r\n\r\n    private renderer: Aether3d;\r\n    private isEnabled: boolean = false;\r\n\r\n    // 性能优化：添加设备性能检测缓存\r\n    private isHighPerformanceDeviceCached: boolean | null = null;\r\n\r\n    // 性能优化：缓存尺寸\r\n    private lastWidth: number = 0;\r\n    private lastHeight: number = 0;\r\n\r\n    constructor(renderer: Aether3d) {\r\n        this.renderer = renderer;\r\n        // 立即初始化Composer\r\n        this.init();\r\n    }\r\n\r\n    /**\r\n     * 检测是否为高性能设备\r\n     */\r\n    private isHighPerformanceDevice(): boolean {\r\n        if (this.isHighPerformanceDeviceCached !== null) {\r\n            return this.isHighPerformanceDeviceCached;\r\n        }\r\n        return false;\r\n        // // 检测设备性能\r\n        // const isHighPerformance = (\r\n        //     window.devicePixelRatio <= 2 &&\r\n        //     navigator.hardwareConcurrency >= 4 &&\r\n        //     !(navigator as any).connection?.saveData // 不在省电模式下\r\n        // );\r\n        //\r\n        // this.isHighPerformanceDeviceCached = isHighPerformance;\r\n        // return isHighPerformance;\r\n    }\r\n\r\n    /**\r\n     * 初始化EffectComposer\r\n     */\r\n    private init(): void {\r\n        try {\r\n            // 创建EffectComposer实例，根据设备性能调整采样率\r\n            this.composer = new EffectComposer(this.renderer.renderer);\r\n\r\n            // 根据设备性能调整采样率\r\n            const samples = this.isHighPerformanceDevice() ? 18 : 8;\r\n            this.composer.renderTarget1.samples = samples;\r\n            this.composer.renderTarget2.samples = samples;\r\n\r\n            // 创建基础渲染通道\r\n            this.renderPass = new RenderPass(this.renderer.scene, this.renderer.camera);\r\n            this.composer.addPass(this.renderPass);\r\n\r\n            // 创建输出通道\r\n            this.outputPass = new OutputPass();\r\n            this.composer.addPass(this.outputPass);\r\n\r\n            console.log('[PostProcessingEffectComposer] EffectComposer initialized successfully');\r\n        } catch (error) {\r\n            console.error('[PostProcessingEffectComposer] Failed to initialize EffectComposer:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 启用后处理效果\r\n     */\r\n    public enable(): void {\r\n        this.isEnabled = true;\r\n        console.log('[PostProcessingEffectComposer] Post-processing enabled');\r\n    }\r\n\r\n    /**\r\n     * 禁用后处理效果\r\n     */\r\n    public disable(): void {\r\n        this.isEnabled = false;\r\n        console.log('[PostProcessingEffectComposer] Post-processing disabled');\r\n    }\r\n\r\n    /**\r\n     * 检查后处理是否启用\r\n     */\r\n    public isEnabledPostProcessing(): boolean {\r\n        return this.isEnabled && this.composer !== null;\r\n    }\r\n\r\n    /**\r\n     * 获取EffectComposer实例\r\n     */\r\n    public getComposer(): EffectComposer | null {\r\n        return this.composer;\r\n    }\r\n\r\n    public setPixelRatio(devicePixelRatio:number): void {\r\n        this.composer?.setPixelRatio(devicePixelRatio);\r\n    }\r\n\r\n    /**\r\n     * 添加通道到EffectComposer\r\n     * @param pass 要添加的通道\r\n     * @param beforeOutput 是否在输出通道之前插入（默认为true）\r\n     */\r\n    public addPass(pass: any, beforeOutput: boolean = true): void {\r\n        if (!this.composer) {\r\n            console.warn('[PostProcessingEffectComposer] Composer not initialized');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            if (beforeOutput && this.outputPass) {\r\n                // 在输出通道之前插入\r\n                const passes = this.composer.passes;\r\n                const outputPassIndex = passes.indexOf(this.outputPass);\r\n\r\n                if (outputPassIndex > 0) {\r\n                    passes.splice(outputPassIndex, 0, pass);\r\n                } else {\r\n                    this.composer.addPass(pass);\r\n                }\r\n            } else {\r\n                // 直接添加到末尾\r\n                this.composer.addPass(pass);\r\n            }\r\n\r\n            // 如果是后处理通道，设置抗锯齿\r\n            if (pass && typeof pass.setSize === 'function') {\r\n                pass.setSize(window.innerWidth, window.innerHeight);\r\n            }\r\n\r\n            console.log('[PostProcessingEffectComposer] Pass added successfully');\r\n        } catch (error) {\r\n            console.error('[PostProcessingEffectComposer] Failed to add pass:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 移除指定通道\r\n     * @param pass 要移除的通道\r\n     */\r\n    public removePass(pass: any): void {\r\n        if (!this.composer) return;\r\n\r\n        const index = this.composer.passes.indexOf(pass);\r\n        if (index !== -1) {\r\n            this.composer.passes.splice(index, 1);\r\n            console.log('[PostProcessingEffectComposer] Pass removed successfully');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取所有通道\r\n     */\r\n    public getPasses(): any[] {\r\n        if (!this.composer) return [];\r\n        return this.composer.passes;\r\n    }\r\n\r\n    /**\r\n     * 渲染场景（使用后处理效果）\r\n     */\r\n    public render(): void {\r\n        if (this.composer) {\r\n            this.composer.render();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新渲染器大小\r\n     */\r\n    public setSize(width: number, height: number): void {\r\n        // 添加尺寸变化检测，避免不必要的更新\r\n        if (this.lastWidth === width && this.lastHeight === height) {\r\n            return;\r\n        }\r\n\r\n        this.lastWidth = width;\r\n        this.lastHeight = height;\r\n\r\n        if (this.composer) {\r\n            this.composer.setSize(width, height);\r\n            // 更新所有通道的大小\r\n            for (const pass of this.composer.passes) {\r\n                if (pass && typeof pass.setSize === 'function') {\r\n                    pass.setSize(width, height);\r\n                }\r\n            }\r\n        }\r\n\r\n        console.log(`[PostProcessingEffectComposer] Size updated to ${width}x${height}`);\r\n    }\r\n\r\n    /**\r\n     * 销毁EffectComposer及相关资源\r\n     */\r\n    public dispose(): void {\r\n        if (this.composer) {\r\n            this.composer.passes.forEach(pass => {\r\n                if (pass && typeof pass.dispose === 'function') {\r\n                    pass.dispose();\r\n                }\r\n            });\r\n\r\n            this.composer = null;\r\n            this.renderPass = null;\r\n            this.outputPass = null;\r\n\r\n            this.isEnabled = false;\r\n\r\n            console.log('[PostProcessingEffectComposer] Disposed successfully');\r\n        }\r\n    }\r\n}\r\n","/**\r\n * 泛型事件发射器，支持类型安全的事件处理\r\n *\r\n * EventEmitter 是一个通用的事件系统实现，具有以下特点：\r\n * 1. 类型安全：通过泛型 EventMap 确保事件名称和数据类型的匹配\r\n * 2. 高性能：使用 Map 存储事件监听器，避免数组复制\r\n * 3. 灵活性：支持一次性监听器、移除监听器等常见功能\r\n * 4. 错误处理：事件处理函数中的异常不会影响其他监听器的执行\r\n *\r\n * 使用示例：\r\n * ```typescript\r\n * // 定义事件映射类型\r\n * interface MyEvents {\r\n *   'user-login': { userId: string; timestamp: number };\r\n *   'user-logout': { userId: string };\r\n * }\r\n *\r\n * // 创建事件发射器实例\r\n * const emitter = new EventEmitter<MyEvents>();\r\n *\r\n * // 注册事件监听器\r\n * emitter.on('user-login', (data) => {\r\n *   console.log(`User ${data.userId} logged in at ${data.timestamp}`);\r\n * });\r\n *\r\n * // 触发事件\r\n * emitter.emit('user-login', { userId: '123', timestamp: Date.now() });\r\n * ```\r\n */\r\nexport type EventCallback = (data?: unknown) => void;\r\n\r\nexport class EventEmitter<EventMap = Record<string, any>> {\r\n\r\n    /**\r\n     * 事件监听器列表\r\n     * @private\r\n     */\r\n    private events: Map<string, EventCallback[]> = new Map();\r\n\r\n    /**\r\n     * 注册事件监听器\r\n     *\r\n     * 添加一个回调函数到指定事件的监听器列表中，当事件被触发时会调用该回调函数\r\n     *\r\n     * @template K 事件名称类型，必须是字符串、数字或符号类型\r\n     * @param event 事件名称，用于标识要监听的事件类型\r\n     * @param callback 回调函数，当事件被触发时会被调用\r\n     *                 如果 EventMap 中定义了该事件，则回调函数参数类型会被自动推断\r\n     *                 否则使用通用的 EventCallback 类型\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * // 类型安全的事件监听\r\n     * emitter.on('user-login', (data) => {\r\n     *   // data 类型被自动推断为 { userId: string; timestamp: number }\r\n     *   console.log(`User ${data.userId} logged in`);\r\n     * });\r\n     *\r\n     * // 通用事件监听（未在 EventMap 中定义的事件）\r\n     * emitter.on('custom-event', (data) => {\r\n     *   // data 类型为 unknown，需要手动处理类型\r\n     *   console.log('Custom event triggered with data:', data);\r\n     * });\r\n     * ```\r\n     */\r\n    on<K extends string | number | symbol>(\r\n        event: K,\r\n        callback: K extends keyof EventMap ? (data: EventMap[K]) => void : EventCallback\r\n    ): void {\r\n        const eventKey = String(event);\r\n        if (!this.events.has(eventKey)) {\r\n            this.events.set(eventKey, []);\r\n        }\r\n        this.events.get(eventKey)!.push(callback as EventCallback);\r\n    }\r\n\r\n    /**\r\n     * 取消事件监听器\r\n     *\r\n     * 从指定事件的监听器列表中移除指定的回调函数\r\n     *\r\n     * @template K 事件名称类型，必须是字符串、数字或符号类型\r\n     * @param event 事件名称，用于标识要取消监听的事件类型\r\n     * @param callback 要移除的回调函数引用，必须与注册时的引用相同\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * const handler = (data) => console.log(data);\r\n     * emitter.on('example-event', handler);\r\n     * // ... later\r\n     * emitter.off('example-event', handler);\r\n     * ```\r\n     */\r\n    off<K extends string | number | symbol>(\r\n        event: K,\r\n        callback: K extends keyof EventMap ? (data: EventMap[K]) => void : EventCallback\r\n    ): void {\r\n        const eventKey = String(event);\r\n        const callbacks = this.events.get(eventKey);\r\n        if (!callbacks) return;\r\n\r\n        const index = callbacks.indexOf(callback as EventCallback);\r\n        if (index !== -1) {\r\n            callbacks.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 触发事件\r\n     *\r\n     * 调用指定事件的所有监听器回调函数，并传递数据参数\r\n     *\r\n     * @template K 事件名称类型，必须是字符串、数字或符号类型\r\n     * @param event 事件名称，用于标识要触发的事件类型\r\n     * @param data 可选的数据参数，会传递给所有监听器回调函数\r\n     *             如果 EventMap 中定义了该事件，则数据类型会被自动验证\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * // 触发带数据的事件\r\n     * emitter.emit('user-login', { userId: '123', timestamp: Date.now() });\r\n     *\r\n     * // 触发不带数据的事件\r\n     * emitter.emit('simple-event');\r\n     * ```\r\n     */\r\n    emit<K extends string | number | symbol>(\r\n        event: K,\r\n        data?: K extends keyof EventMap ? EventMap[K] : any\r\n    ): void {\r\n        const eventKey = String(event);\r\n        const callbacks = this.events.get(eventKey);\r\n        if (!callbacks) return;\r\n\r\n        // 使用迭代器避免数组复制，提升性能\r\n        // 逐个调用回调函数，避免因某个回调函数异常影响其他回调函数执行\r\n        for (const callback of callbacks) {\r\n            try {\r\n                callback(data);\r\n            } catch (error) {\r\n                // 捕获并记录回调函数中的异常，防止影响其他监听器\r\n                console.error(`Error in event handler for ${eventKey}:`, error);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 一次性事件监听器\r\n     *\r\n     * 添加一个只会被调用一次的事件监听器，触发后会自动移除\r\n     *\r\n     * @template K 事件名称类型，必须是字符串、数字或符号类型\r\n     * @param event 事件名称，用于标识要监听的事件类型\r\n     * @param callback 回调函数，当事件被触发时会被调用一次，然后自动移除\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * emitter.once('app-started', () => {\r\n     *   console.log('Application started for the first time');\r\n     * });\r\n     * ```\r\n     */\r\n    once<K extends string | number | symbol>(\r\n        event: K,\r\n        callback: K extends keyof EventMap ? (data: EventMap[K]) => void : EventCallback\r\n    ): void {\r\n        // 创建一个包装函数，用于在调用后自动移除监听器\r\n        const onceCallback: EventCallback = (data) => {\r\n            // 移除监听器自身\r\n            this.off(event, onceCallback as any);\r\n            // 调用原始回调函数\r\n            callback(data as any);\r\n        };\r\n        // 注册包装后的监听器\r\n        this.on(event, onceCallback as any);\r\n    }\r\n\r\n    /**\r\n     * 清除所有事件监听器\r\n     *\r\n     * 移除所有事件的所有监听器，释放内存\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * emitter.clear(); // 移除所有事件监听器\r\n     * ```\r\n     */\r\n    clear(): void {\r\n        this.events.clear();\r\n    }\r\n}\r\n","import {THREE} from \"../core/global.ts\";\r\n\r\n/**\r\n * 对象池管理\r\n * 减少GC压力，提高性能\r\n */\r\nexport class ObjectPool<T> {\r\n    private pool: T[] = [];\r\n    private factory: () => T;\r\n    private reset: (obj: T) => void;\r\n    private maxSize: number;\r\n\r\n    constructor(factory: () => T, reset: (obj: T) => void, maxSize: number = 100) {\r\n        this.factory = factory;\r\n        this.reset = reset;\r\n        this.maxSize = maxSize;\r\n    }\r\n\r\n    /**\r\n     * 获取对象\r\n     */\r\n    acquire(): T {\r\n        return this.pool.pop() || this.factory();\r\n    }\r\n\r\n    /**\r\n     * 释放对象\r\n     */\r\n    release(obj: T): void {\r\n        if (this.pool.length < this.maxSize) {\r\n            this.reset(obj);\r\n            this.pool.push(obj);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 清空对象池\r\n     */\r\n    clear(): void {\r\n        this.pool.length = 0;\r\n    }\r\n\r\n    /**\r\n     * 获取池大小\r\n     */\r\n    get size(): number {\r\n        return this.pool.length;\r\n    }\r\n}\r\n\r\n/**\r\n * 节流函数\r\n * 限制函数执行频率\r\n */\r\nexport function throttle<T extends (...args: any[]) => any>(\r\n    func: T,\r\n    delay: number\r\n): (...args: any[]) => void {\r\n    let lastCall = 0;\r\n    return (...args: any[]) => {\r\n        const now = Date.now();\r\n        if (now - lastCall >= delay) {\r\n            lastCall = now;\r\n            func(...args);\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * 防抖函数\r\n * 延迟执行，避免频繁调用\r\n */\r\nexport function debounce<T extends (...args: any[]) => any>(\r\n    func: T,\r\n    delay: number\r\n): (...args: any[]) => void {\r\n    let timeoutId: number | null = null;\r\n    return (...args: any[]) => {\r\n        if (timeoutId) {\r\n            clearTimeout(timeoutId);\r\n        }\r\n        timeoutId = window.setTimeout(() => {\r\n            func(...args);\r\n        }, delay);\r\n    };\r\n}\r\n\r\n/**\r\n * 帧率限制器\r\n * 限制函数在指定帧率下执行\r\n */\r\nexport class FrameRateLimiter {\r\n    private lastCall = 0;\r\n    private frameInterval: number;\r\n\r\n    constructor(fps: number) {\r\n        this.frameInterval = 1000 / fps;\r\n    }\r\n\r\n    /**\r\n     * 检查是否可以执行\r\n     */\r\n    canExecute(): boolean {\r\n        const now = performance.now();\r\n        if (now - this.lastCall >= this.frameInterval) {\r\n            this.lastCall = now;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 执行函数（如果允许）\r\n     */\r\n    execute<T extends (...args: any[]) => any>(\r\n        func: T,\r\n        ...args: any[]\r\n    ): ReturnType<T> | null {\r\n        if (this.canExecute()) {\r\n            return func(...args);\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * 内存使用监控\r\n */\r\nexport class MemoryMonitor {\r\n    private memoryHistory: number[] = [];\r\n    private maxHistoryLength = 100;\r\n\r\n    /**\r\n     * 获取当前内存使用情况\r\n     */\r\n    getMemoryUsage(): number {\r\n        if ('memory' in performance) {\r\n            return (performance as any).memory.usedJSHeapSize / 1024 / 1024; // MB\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * 记录内存使用\r\n     */\r\n    recordMemoryUsage(): void {\r\n        const usage = this.getMemoryUsage();\r\n        this.memoryHistory.push(usage);\r\n\r\n        if (this.memoryHistory.length > this.maxHistoryLength) {\r\n            this.memoryHistory.shift();\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 获取内存使用趋势\r\n     */\r\n    getMemoryTrend(): 'increasing' | 'decreasing' | 'stable' {\r\n        if (this.memoryHistory.length < 10) return 'stable';\r\n\r\n        const recent = this.memoryHistory.slice(-10);\r\n        const firstHalf = recent.slice(0, 5);\r\n        const secondHalf = recent.slice(5);\r\n\r\n        const firstAvg = firstHalf.reduce((a, b) => a + b, 0) / firstHalf.length;\r\n        const secondAvg = secondHalf.reduce((a, b) => a + b, 0) / secondHalf.length;\r\n\r\n        const diff = secondAvg - firstAvg;\r\n\r\n        if (diff > 1) return 'increasing';\r\n        if (diff < -1) return 'decreasing';\r\n        return 'stable';\r\n    }\r\n\r\n    /**\r\n     * 检测内存泄漏\r\n     */\r\n    detectMemoryLeak(): boolean {\r\n        const trend = this.getMemoryTrend();\r\n        const currentUsage = this.getMemoryUsage();\r\n\r\n        // 如果内存持续增长且超过100MB，可能存在泄漏\r\n        return trend === 'increasing' && currentUsage > 100;\r\n    }\r\n}\r\n\r\n/**\r\n * 性能分析器\r\n */\r\nexport class PerformanceProfiler {\r\n    private measurements: Map<string, number[]> = new Map();\r\n    private startTimes: Map<string, number> = new Map();\r\n\r\n    /**\r\n     * 开始测量\r\n     */\r\n    start(label: string): void {\r\n        this.startTimes.set(label, performance.now());\r\n    }\r\n\r\n    /**\r\n     * 结束测量\r\n     */\r\n    end(label: string): number {\r\n        const startTime = this.startTimes.get(label);\r\n        if (!startTime) {\r\n            console.warn(`[PerformanceProfiler] No start time found for label: ${label}`);\r\n            return 0;\r\n        }\r\n\r\n        const duration = performance.now() - startTime;\r\n        this.startTimes.delete(label);\r\n\r\n        if (!this.measurements.has(label)) {\r\n            this.measurements.set(label, []);\r\n        }\r\n        this.measurements.get(label)!.push(duration);\r\n\r\n        return duration;\r\n    }\r\n\r\n    /**\r\n     * 获取测量结果\r\n     */\r\n    getResults(label: string): {\r\n        count: number;\r\n        average: number;\r\n        min: number;\r\n        max: number;\r\n        total: number;\r\n    } | null {\r\n        const measurements = this.measurements.get(label);\r\n        if (!measurements || measurements.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        const count = measurements.length;\r\n        const total = measurements.reduce((a, b) => a + b, 0);\r\n        const average = total / count;\r\n        const min = Math.min(...measurements);\r\n        const max = Math.max(...measurements);\r\n\r\n        return { count, average, min, max, total };\r\n    }\r\n\r\n    /**\r\n     * 清除测量数据\r\n     */\r\n    clear(label?: string): void {\r\n        if (label) {\r\n            this.measurements.delete(label);\r\n            this.startTimes.delete(label);\r\n        } else {\r\n            this.measurements.clear();\r\n            this.startTimes.clear();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取所有测量结果\r\n     */\r\n    getAllResults(): Record<string, {\r\n        count: number;\r\n        average: number;\r\n        min: number;\r\n        max: number;\r\n        total: number;\r\n    }> {\r\n        const results: Record<string, any> = {};\r\n\r\n        for (const [label] of this.measurements) {\r\n            const result = this.getResults(label);\r\n            if (result) {\r\n                results[label] = result;\r\n            }\r\n        }\r\n\r\n        return results;\r\n    }\r\n}\r\n\r\n/**\r\n * 批量DOM更新器\r\n * 减少DOM操作次数\r\n */\r\nexport class BatchDOMUpdater {\r\n    private pendingUpdates = new Map<string, () => void>();\r\n    private updateScheduled = false;\r\n\r\n    /**\r\n     * 添加更新任务\r\n     */\r\n    scheduleUpdate(id: string, updateFn: () => void): void {\r\n        this.pendingUpdates.set(id, updateFn);\r\n\r\n        if (!this.updateScheduled) {\r\n            this.updateScheduled = true;\r\n            requestAnimationFrame(() => {\r\n                this.executeUpdates();\r\n                this.updateScheduled = false;\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 执行所有待更新的任务\r\n     */\r\n    private executeUpdates(): void {\r\n        this.pendingUpdates.forEach(updateFn => {\r\n            try {\r\n                updateFn();\r\n            } catch (error) {\r\n                console.error('[BatchDOMUpdater] Update failed:', error);\r\n            }\r\n        });\r\n        this.pendingUpdates.clear();\r\n    }\r\n\r\n    /**\r\n     * 取消更新任务\r\n     */\r\n    cancelUpdate(id: string): void {\r\n        this.pendingUpdates.delete(id);\r\n    }\r\n\r\n    /**\r\n     * 清空所有更新任务\r\n     */\r\n    clear(): void {\r\n        this.pendingUpdates.clear();\r\n        this.updateScheduled = false;\r\n    }\r\n}\r\n\r\n/**\r\n * 缓存管理器\r\n * 提供简单的缓存功能\r\n */\r\nexport class CacheManager<K, V> {\r\n    private cache = new Map<K, { value: V; timestamp: number; ttl: number }>();\r\n    private maxSize: number;\r\n    private cleanupInterval: number | null = null;\r\n\r\n    constructor(maxSize: number = 100, cleanupIntervalMs: number = 60000) {\r\n        this.maxSize = maxSize;\r\n\r\n        // 定期清理过期缓存\r\n        this.cleanupInterval = window.setInterval(() => {\r\n            this.cleanup();\r\n        }, cleanupIntervalMs);\r\n    }\r\n\r\n    /**\r\n     * 设置缓存\r\n     */\r\n    set(key: K, value: V, ttl: number = 300000): void { // 默认5分钟\r\n        // 如果缓存已满，移除最旧的条目\r\n        if (this.cache.size >= this.maxSize) {\r\n            const oldestKey = this.cache.keys().next().value;\r\n            if (oldestKey !== undefined) {\r\n                this.cache.delete(oldestKey);\r\n            }\r\n        }\r\n\r\n        this.cache.set(key, {\r\n            value,\r\n            timestamp: Date.now(),\r\n            ttl\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 获取缓存\r\n     */\r\n    get(key: K): V | undefined {\r\n        const item = this.cache.get(key);\r\n        if (!item) return undefined;\r\n\r\n        // 检查是否过期\r\n        if (Date.now() - item.timestamp > item.ttl) {\r\n            this.cache.delete(key);\r\n            return undefined;\r\n        }\r\n\r\n        return item.value;\r\n    }\r\n\r\n    /**\r\n     * 删除缓存\r\n     */\r\n    delete(key: K): boolean {\r\n        return this.cache.delete(key);\r\n    }\r\n\r\n    /**\r\n     * 清空缓存\r\n     */\r\n    clear(): void {\r\n        this.cache.clear();\r\n    }\r\n\r\n    /**\r\n     * 清理过期缓存\r\n     */\r\n    private cleanup(): void {\r\n        const now = Date.now();\r\n        for (const [key, item] of this.cache) {\r\n            if (now - item.timestamp > item.ttl) {\r\n                this.cache.delete(key);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 销毁缓存管理器\r\n     */\r\n    destroy(): void {\r\n        if (this.cleanupInterval) {\r\n            clearInterval(this.cleanupInterval);\r\n            this.cleanupInterval = null;\r\n        }\r\n        this.clear();\r\n    }\r\n\r\n    /**\r\n     * 获取缓存统计\r\n     */\r\n    getStats(): {\r\n        size: number;\r\n        maxSize: number;\r\n        hitRate: number;\r\n    } {\r\n        return {\r\n            size: this.cache.size,\r\n            maxSize: this.maxSize,\r\n            hitRate: 0 // 可以扩展实现命中率统计\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * 设备性能检测器\r\n * 检测设备性能并提供优化建议\r\n */\r\nexport class DevicePerformanceDetector {\r\n    /**\r\n     * 检测是否为高性能设备\r\n     */\r\n    static isHighPerformanceDevice(): boolean {\r\n        // 检测设备性能\r\n        return (\r\n            window.devicePixelRatio <= 2 && \r\n            navigator.hardwareConcurrency >= 4 &&\r\n            !(navigator as any).connection?.saveData // 不在省电模式下\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * 获取设备性能等级\r\n     */\r\n    static getPerformanceLevel(): 'low' | 'medium' | 'high' {\r\n        if (this.isHighPerformanceDevice()) {\r\n            return 'high';\r\n        }\r\n        \r\n        if (window.devicePixelRatio <= 2 && navigator.hardwareConcurrency >= 2) {\r\n            return 'medium';\r\n        }\r\n        \r\n        return 'low';\r\n    }\r\n    \r\n    /**\r\n     * 根据设备性能获取优化建议\r\n     */\r\n    static getOptimizationRecommendations(): string[] {\r\n        const recommendations: string[] = [];\r\n        const level = this.getPerformanceLevel();\r\n        \r\n        switch (level) {\r\n            case 'low':\r\n                recommendations.push('降低纹理质量');\r\n                recommendations.push('减少后处理效果');\r\n                recommendations.push('降低渲染分辨率');\r\n                recommendations.push('禁用阴影');\r\n                break;\r\n            case 'medium':\r\n                recommendations.push('适度降低纹理质量');\r\n                recommendations.push('选择性启用后处理效果');\r\n                recommendations.push('适度降低渲染分辨率');\r\n                break;\r\n            case 'high':\r\n                recommendations.push('可启用高质量效果');\r\n                recommendations.push('可使用高分辨率纹理');\r\n                recommendations.push('可启用复杂后处理效果');\r\n                break;\r\n        }\r\n        \r\n        return recommendations;\r\n    }\r\n}\r\n\r\n/**\r\n * 渲染性能优化器\r\n * 提供渲染性能优化功能\r\n */\r\nexport class RenderPerformanceOptimizer {\r\n    private static instance: RenderPerformanceOptimizer | null = null;\r\n    private frameRateLimiter: FrameRateLimiter;\r\n    private isOptimizationEnabled: boolean = false;\r\n    \r\n    private constructor() {\r\n        this.frameRateLimiter = new FrameRateLimiter(60); // 限制为60FPS\r\n    }\r\n    \r\n    /**\r\n     * 获取单例实例\r\n     */\r\n    static getInstance(): RenderPerformanceOptimizer {\r\n        if (!this.instance) {\r\n            this.instance = new RenderPerformanceOptimizer();\r\n        }\r\n        return this.instance;\r\n    }\r\n    \r\n    /**\r\n     * 启用性能优化\r\n     */\r\n    enableOptimization(): void {\r\n        this.isOptimizationEnabled = true;\r\n    }\r\n    \r\n    /**\r\n     * 禁用性能优化\r\n     */\r\n    disableOptimization(): void {\r\n        this.isOptimizationEnabled = false;\r\n    }\r\n    \r\n    /**\r\n     * 优化渲染函数执行\r\n     */\r\n    optimizeRenderFunction<T extends (...args: any[]) => any>(\r\n        func: T,\r\n        ...args: any[]\r\n    ): ReturnType<T> | null {\r\n        if (!this.isOptimizationEnabled) {\r\n            return func(...args);\r\n        }\r\n        \r\n        return this.frameRateLimiter.execute(func, ...args);\r\n    }\r\n}\r\n\r\n/**\r\n * 帧率监控器\r\n * 实时监控和分析帧率性能\r\n */\r\nexport class FrameRateMonitor {\r\n    private frameCount: number = 0;\r\n    private lastTime: number = 0;\r\n    private currentFps: number = 0;\r\n    private fpsHistory: number[] = [];\r\n    private readonly historySize: number = 60;\r\n    private onFpsUpdate: ((fps: number) => void) | null = null;\r\n    private monitoring: boolean = false;\r\n    private frameId: number = 0;\r\n\r\n    constructor(onFpsUpdate?: (fps: number) => void) {\r\n        if (onFpsUpdate) {\r\n            this.onFpsUpdate = onFpsUpdate;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 开始监控\r\n     */\r\n    start(): void {\r\n        if (this.monitoring) return;\r\n        this.monitoring = true;\r\n        this.lastTime = performance.now();\r\n        this.frameId = requestAnimationFrame(this.update.bind(this));\r\n    }\r\n\r\n    /**\r\n     * 停止监控\r\n     */\r\n    stop(): void {\r\n        this.monitoring = false;\r\n        if (this.frameId) {\r\n            cancelAnimationFrame(this.frameId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新帧率\r\n     */\r\n    private update(timestamp: number): void {\r\n        if (!this.monitoring) return;\r\n\r\n        this.frameCount++;\r\n        const elapsed = timestamp - this.lastTime;\r\n\r\n        // 每秒更新一次FPS\r\n        if (elapsed >= 1000) {\r\n            this.currentFps = Math.round((this.frameCount * 1000) / elapsed);\r\n            \r\n            // 添加到历史记录\r\n            this.fpsHistory.push(this.currentFps);\r\n            if (this.fpsHistory.length > this.historySize) {\r\n                this.fpsHistory.shift();\r\n            }\r\n            \r\n            // 触发更新回调\r\n            if (this.onFpsUpdate) {\r\n                this.onFpsUpdate(this.currentFps);\r\n            }\r\n            \r\n            // 重置计数器\r\n            this.frameCount = 0;\r\n            this.lastTime = timestamp;\r\n        }\r\n\r\n        this.frameId = requestAnimationFrame(this.update.bind(this));\r\n    }\r\n\r\n    /**\r\n     * 获取当前FPS\r\n     */\r\n    getCurrentFps(): number {\r\n        return this.currentFps;\r\n    }\r\n\r\n    /**\r\n     * 获取平均FPS\r\n     */\r\n    getAverageFps(): number {\r\n        if (this.fpsHistory.length === 0) return 0;\r\n        const sum = this.fpsHistory.reduce((a, b) => a + b, 0);\r\n        return Math.round(sum / this.fpsHistory.length);\r\n    }\r\n\r\n    /**\r\n     * 获取FPS历史记录\r\n     */\r\n    getFpsHistory(): number[] {\r\n        return [...this.fpsHistory];\r\n    }\r\n\r\n    /**\r\n     * 获取FPS统计信息\r\n     */\r\n    getFpsStats(): { current: number; average: number; min: number; max: number } {\r\n        if (this.fpsHistory.length === 0) {\r\n            return { current: this.currentFps, average: 0, min: 0, max: 0 };\r\n        }\r\n        \r\n        const min = Math.min(...this.fpsHistory);\r\n        const max = Math.max(...this.fpsHistory);\r\n        const average = this.getAverageFps();\r\n        \r\n        return {\r\n            current: this.currentFps,\r\n            average,\r\n            min,\r\n            max\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * 性能分析器扩展\r\n * 添加更详细的性能分析功能\r\n */\r\nexport class DetailedPerformanceProfiler extends PerformanceProfiler {\r\n    private activeProfiles: Set<string> = new Set();\r\n    \r\n    /**\r\n     * 开始测量并标记为活跃\r\n     */\r\n    start(label: string): void {\r\n        super.start(label);\r\n        this.activeProfiles.add(label);\r\n    }\r\n    \r\n    /**\r\n     * 结束测量并移除活跃标记\r\n     */\r\n    end(label: string): number {\r\n        this.activeProfiles.delete(label);\r\n        return super.end(label);\r\n    }\r\n    \r\n    /**\r\n     * 获取活跃的性能分析标签\r\n     */\r\n    getActiveProfiles(): string[] {\r\n        return Array.from(this.activeProfiles);\r\n    }\r\n    \r\n    /**\r\n     * 重置所有测量数据\r\n     */\r\n    reset(): void {\r\n        this.activeProfiles.clear();\r\n        this.clear();\r\n    }\r\n}\r\n\r\n/**\r\n * 几何体优化器\r\n * 提供几何体优化功能\r\n */\r\nexport class GeometryOptimizer {\r\n    /**\r\n     * 合并几何体\r\n     */\r\n    static mergeGeometries(geometries: THREE.BufferGeometry[]): THREE.BufferGeometry | null {\r\n        if (!geometries || geometries.length === 0) {\r\n            console.warn('[GeometryOptimizer] 没有提供几何体进行合并');\r\n            return null;\r\n        }\r\n        \r\n        try {\r\n            // 这里需要导入BufferGeometryUtils，但在当前环境中可能不可用\r\n            // 暂时返回null，实际使用时需要正确导入\r\n            console.warn('[GeometryOptimizer] BufferGeometryUtils未导入，无法合并几何体');\r\n            return null;\r\n        } catch (error) {\r\n            console.error('[GeometryOptimizer] 合并几何体失败:', error);\r\n            return null;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 优化几何体属性\r\n     */\r\n    static optimizeGeometryAttributes(geometry: THREE.BufferGeometry): void {\r\n        // 确保几何体有必要的属性\r\n        if (!geometry.attributes.position) {\r\n            console.warn('[GeometryOptimizer] 几何体缺少位置属性');\r\n            return;\r\n        }\r\n        \r\n        // 计算边界框和包围球（如果不存在）\r\n        if (!geometry.boundingBox) {\r\n            geometry.computeBoundingBox();\r\n        }\r\n        if (!geometry.boundingSphere) {\r\n            geometry.computeBoundingSphere();\r\n        }\r\n        \r\n        // 优化索引\r\n        if (geometry.index && geometry.index.count > 0) {\r\n            // 可以在这里实现索引优化逻辑\r\n            console.log('[GeometryOptimizer] 几何体索引已存在，可考虑优化');\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 简化几何体\r\n     */\r\n    static simplifyGeometry(geometry: THREE.BufferGeometry, ratio: number = 0.5): THREE.BufferGeometry {\r\n        // 这是一个简化的实现，实际使用时可能需要更复杂的算法\r\n        console.log(`[GeometryOptimizer] 简化几何体，目标比率: ${ratio}`);\r\n        return geometry;\r\n    }\r\n}\r\n\r\n/**\r\n * 纹理优化器\r\n * 提供纹理优化功能\r\n */\r\nexport class TextureOptimizer {\r\n    private static textureCache: Map<string, THREE.Texture> = new Map();\r\n    \r\n    /**\r\n     * 压缩纹理\r\n     */\r\n    static compressTexture(texture: THREE.Texture, maxSize: number = 1024): THREE.Texture {\r\n        if (!texture.image) {\r\n            console.warn('[TextureOptimizer] 纹理没有图像数据');\r\n            return texture;\r\n        }\r\n        \r\n        // 检查纹理尺寸\r\n        const width = texture.image.width;\r\n        const height = texture.image.height;\r\n        \r\n        if (width <= maxSize && height <= maxSize) {\r\n            // 纹理尺寸已经在限制范围内\r\n            return texture;\r\n        }\r\n        \r\n        // 计算新的尺寸\r\n        const ratio = Math.min(maxSize / width, maxSize / height);\r\n        const newWidth = Math.floor(width * ratio);\r\n        const newHeight = Math.floor(height * ratio);\r\n        \r\n        console.log(`[TextureOptimizer] 压缩纹理从 ${width}x${height} 到 ${newWidth}x${newHeight}`);\r\n        \r\n        // 这里应该实现实际的纹理压缩逻辑\r\n        // 暂时只记录日志并返回原纹理\r\n        return texture;\r\n    }\r\n    \r\n    /**\r\n     * 缓存纹理\r\n     */\r\n    static cacheTexture(key: string, texture: THREE.Texture): void {\r\n        this.textureCache.set(key, texture);\r\n        console.log(`[TextureOptimizer] 纹理已缓存: ${key}`);\r\n    }\r\n    \r\n    /**\r\n     * 获取缓存的纹理\r\n     */\r\n    static getCachedTexture(key: string): THREE.Texture | undefined {\r\n        return this.textureCache.get(key);\r\n    }\r\n    \r\n    /**\r\n     * 清除纹理缓存\r\n     */\r\n    static clearCache(): void {\r\n        this.textureCache.clear();\r\n        console.log('[TextureOptimizer] 纹理缓存已清除');\r\n    }\r\n}\r\n\r\n/**\r\n * 渲染批处理器\r\n * 提供渲染批处理功能\r\n */\r\nexport class RenderBatcher {\r\n    private batches: Map<string, THREE.Object3D[]> = new Map();\r\n    private batchSize: number = 100;\r\n    \r\n    constructor(batchSize: number = 100) {\r\n        this.batchSize = batchSize;\r\n    }\r\n    \r\n    /**\r\n     * 添加对象到批处理\r\n     */\r\n    addObject(key: string, object: THREE.Object3D): void {\r\n        if (!this.batches.has(key)) {\r\n            this.batches.set(key, []);\r\n        }\r\n        \r\n        const batch = this.batches.get(key)!;\r\n        batch.push(object);\r\n        \r\n        // 如果批次已满，处理批次\r\n        if (batch.length >= this.batchSize) {\r\n            this.processBatch(key, batch);\r\n            batch.length = 0; // 清空批次\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 处理批次\r\n     */\r\n    private processBatch(key: string, objects: THREE.Object3D[]): void {\r\n        console.log(`[RenderBatcher] 处理批次 ${key}，包含 ${objects.length} 个对象`);\r\n        // 这里可以实现实际的批处理逻辑\r\n    }\r\n    \r\n    /**\r\n     * 刷新所有批次\r\n     */\r\n    flush(): void {\r\n        for (const [key, batch] of this.batches) {\r\n            if (batch.length > 0) {\r\n                this.processBatch(key, batch);\r\n                batch.length = 0;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { ScriptBase } from \"../core/ScriptBase\";\r\nimport { THREE } from \"../core/global.ts\";\r\n\r\n/**\r\n * 性能分析脚本\r\n * 用于详细分析和诊断渲染性能问题\r\n */\r\nexport class PerformanceAnalyzerScript extends ScriptBase {\r\n    name = 'PerformanceAnalyzerScript';\r\n\r\n    // 性能数据收集\r\n    private frameCount: number = 0;\r\n    private lastAnalysisTime: number = 0;\r\n    private analysisInterval: number = 1000; // 每秒分析一次\r\n\r\n    // 对象统计\r\n    private objectCounts: Map<string, number> = new Map();\r\n\r\n    // 内存监控\r\n    private memoryUsage: number = 0;\r\n    private lastMemoryCheck: number = 0;\r\n    private memoryCheckInterval: number = 5000; // 每5秒检查一次内存\r\n\r\n    // 渲染统计\r\n    private drawCalls: number = 0;\r\n    private triangles: number = 0;\r\n    private points: number = 0;\r\n    private lines: number = 0;\r\n\r\n    // 脚本执行时间统计\r\n    private scriptExecutionTimes: Map<string, { total: number; count: number; }> = new Map();\r\n\r\n    // 是否启用详细分析\r\n    private detailedAnalysis: boolean = false;\r\n\r\n    constructor(options?: { detailedAnalysis?: boolean; analysisInterval?: number }) {\r\n        super();\r\n\r\n        if (options) {\r\n            this.detailedAnalysis = options.detailedAnalysis ?? false;\r\n            this.analysisInterval = options.analysisInterval ?? 1000;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 当脚本被添加到渲染器时调用\r\n     */\r\n    public override awake(): void {\r\n        super.awake?.();\r\n    }\r\n\r\n    /**\r\n     * 当脚本变为启用和激活状态时调用\r\n     */\r\n    public override onEnable(): void {\r\n        super.onEnable?.();\r\n    }\r\n\r\n    /**\r\n     * 脚本初始化\r\n     */\r\n    public override async start(): Promise<void> {\r\n        super.start?.();\r\n        this.lastAnalysisTime = performance.now();\r\n    }\r\n\r\n    /**\r\n     * 每帧更新时调用\r\n     */\r\n    public override update(deltaTime: number): void {\r\n        super.update?.(deltaTime);\r\n\r\n        this.frameCount++;\r\n        const currentTime = performance.now();\r\n\r\n        // 定期分析性能\r\n        if (currentTime - this.lastAnalysisTime >= this.analysisInterval) {\r\n            this.lastAnalysisTime = currentTime;\r\n        }\r\n\r\n        // 定期内存检查\r\n        if (currentTime - this.lastMemoryCheck >= this.memoryCheckInterval) {\r\n            this.checkMemoryUsage();\r\n            this.lastMemoryCheck = currentTime;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 统计场景中的对象\r\n     */\r\n    private countObjects(): void {\r\n        this.objectCounts.clear();\r\n\r\n        if (!this.scene) return;\r\n\r\n        const countObject = (object: THREE.Object3D) => {\r\n            const type = object.type;\r\n            this.objectCounts.set(type, (this.objectCounts.get(type) || 0) + 1);\r\n\r\n            // 递归统计子对象\r\n            object.children.forEach(child => countObject(child));\r\n        };\r\n\r\n        this.scene.children.forEach(child => countObject(child));\r\n    }\r\n\r\n    /**\r\n     * 检查内存使用\r\n     */\r\n    private checkMemoryUsage(): void {\r\n        if ('memory' in performance) {\r\n            this.memoryUsage = (performance as any).memory.usedJSHeapSize / 1024 / 1024;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 记录脚本执行时间\r\n     */\r\n    public recordScriptExecution(scriptName: string, executionTime: number): void {\r\n        if (!this.scriptExecutionTimes.has(scriptName)) {\r\n            this.scriptExecutionTimes.set(scriptName, { total: 0, count: 0 });\r\n        }\r\n\r\n        const stats = this.scriptExecutionTimes.get(scriptName)!;\r\n        stats.total += executionTime;\r\n        stats.count++;\r\n    }\r\n\r\n    /**\r\n     * 重置统计数据\r\n     */\r\n    public resetStats(): void {\r\n        this.frameCount = 0;\r\n        this.objectCounts.clear();\r\n        this.scriptExecutionTimes.clear();\r\n    }\r\n\r\n    /**\r\n     * 获取详细的性能报告\r\n     */\r\n    public getDetailedReport(): any {\r\n        const report: any = {\r\n            timestamp: new Date().toISOString(),\r\n            objectCounts: Object.fromEntries(this.objectCounts),\r\n            memoryUsage: this.memoryUsage,\r\n            scriptExecutionTimes: {}\r\n        };\r\n\r\n        for (const [scriptName, stats] of this.scriptExecutionTimes) {\r\n            report.scriptExecutionTimes[scriptName] = {\r\n                averageTime: stats.total / stats.count,\r\n                totalTime: stats.total,\r\n                callCount: stats.count\r\n            };\r\n        }\r\n\r\n        if (this.renderer) {\r\n            const info = this.webGLRenderer.info;\r\n            report.renderStats = {\r\n                drawCalls: info.render.calls,\r\n                triangles: info.render.triangles,\r\n                points: info.render.points,\r\n                lines: info.render.lines,\r\n                programs: info.programs ? info.programs.length : 0\r\n            };\r\n        }\r\n\r\n        return report;\r\n    }\r\n\r\n    /**\r\n     * 脚本销毁时调用\r\n     */\r\n    public override destroy(): void {\r\n        super.destroy?.();\r\n    }\r\n}\r\n","/**\r\n * FPS诊断工具\r\n * 用于详细分析和诊断FPS低的问题\r\n */\r\nexport class FPSDiagnosticTool {\r\n    private renderer: any;\r\n    private diagnostics: Map<string, any> = new Map();\r\n    private isRunning: boolean = false;\r\n    private diagnosticInterval: number = 1000; // 每秒诊断一次\r\n    private intervalId: number | null = null;\r\n\r\n    constructor(renderer: any) {\r\n        this.renderer = renderer;\r\n    }\r\n\r\n    /**\r\n     * 开始诊断\r\n     */\r\n    public start(): void {\r\n        if (this.isRunning) return;\r\n\r\n        this.isRunning = true;\r\n        this.intervalId = window.setInterval(() => {\r\n        }, this.diagnosticInterval);\r\n    }\r\n\r\n    /**\r\n     * 停止诊断\r\n     */\r\n    public stop(): void {\r\n        if (!this.isRunning) return;\r\n\r\n        this.isRunning = false;\r\n        if (this.intervalId) {\r\n            clearInterval(this.intervalId);\r\n            this.intervalId = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取诊断报告\r\n     */\r\n    public getReport(): any {\r\n        const report: any = {\r\n            timestamp: new Date().toISOString(),\r\n            basicPerformance: {},\r\n            renderer: {},\r\n            scene: {},\r\n            scripts: {},\r\n            memory: {},\r\n            postProcessing: {}\r\n        };\r\n\r\n        // 收集基本性能数据\r\n        if (this.renderer && this.renderer.getPerformanceData) {\r\n            const perfData = this.renderer.getPerformanceData();\r\n            if (perfData) {\r\n                report.basicPerformance = perfData.fpsStats;\r\n            }\r\n        }\r\n\r\n        // 收集渲染器信息\r\n        if (this.renderer && this.renderer.renderer) {\r\n            const glInfo = this.renderer.renderer.info;\r\n            report.renderer = {\r\n                drawCalls: glInfo.render.calls,\r\n                triangles: glInfo.render.triangles,\r\n                points: glInfo.render.points,\r\n                lines: glInfo.render.lines,\r\n                textures: glInfo.textures,\r\n                geometries: glInfo.geometries,\r\n                programs: glInfo.programs?.length || 0\r\n            };\r\n        }\r\n\r\n        // 收集场景信息\r\n        if (this.renderer && this.renderer.scene) {\r\n            const scene = this.renderer.scene;\r\n            let totalObjects = 0;\r\n            let meshCount = 0;\r\n            let lightCount = 0;\r\n            let cameraCount = 0;\r\n\r\n            const countObjects = (object: any) => {\r\n                totalObjects++;\r\n                if (object.isMesh) meshCount++;\r\n                if (object.isLight) lightCount++;\r\n                if (object.isCamera) cameraCount++;\r\n                object.children.forEach((child: any) => countObjects(child));\r\n            };\r\n\r\n            scene.children.forEach((child: any) => countObjects(child));\r\n\r\n            report.scene = {\r\n                totalObjects,\r\n                meshes: meshCount,\r\n                lights: lightCount,\r\n                cameras: cameraCount\r\n            };\r\n        }\r\n\r\n        // 收集脚本信息\r\n        if (this.renderer && this.renderer.scripts) {\r\n            report.scripts = {\r\n                count: this.renderer.scripts.length,\r\n                types: this.renderer.scripts.map((s: any) => s.constructor.name)\r\n            };\r\n        }\r\n\r\n        // 收集内存信息\r\n        if ('memory' in performance) {\r\n            const memory = (performance as any).memory;\r\n            report.memory = {\r\n                used: memory.usedJSHeapSize,\r\n                total: memory.totalJSHeapSize,\r\n                limit: memory.jsHeapSizeLimit\r\n            };\r\n        }\r\n\r\n        return report;\r\n    }\r\n\r\n    /**\r\n     * 生成优化建议\r\n     */\r\n    public generateOptimizationSuggestions(): string[] {\r\n        const suggestions: string[] = [];\r\n\r\n        if (this.renderer) {\r\n            const perfData = this.renderer.getPerformanceData();\r\n            if (perfData && perfData.fpsStats.current < 30) {\r\n                suggestions.push('⚠️ FPS过低，建议进行性能优化');\r\n            }\r\n\r\n            // 检查绘制调用\r\n            if (this.renderer.renderer) {\r\n                const calls = this.renderer.renderer.info.render.calls;\r\n                if (calls > 1000) {\r\n                    suggestions.push('⚠️ 绘制调用过多，建议合并几何体或使用实例化渲染');\r\n                }\r\n            }\r\n\r\n            // 检查对象数量\r\n            if (this.renderer.scene) {\r\n                let totalObjects = 0;\r\n                const countObjects = (object: any) => {\r\n                    totalObjects++;\r\n                    object.children.forEach((child: any) => countObjects(child));\r\n                };\r\n                this.renderer.scene.children.forEach((child: any) => countObjects(child));\r\n\r\n                if (totalObjects > 1000) {\r\n                    suggestions.push('⚠️ 场景对象过多，建议使用对象池或按需加载');\r\n                }\r\n            }\r\n        }\r\n\r\n        if (suggestions.length === 0) {\r\n            suggestions.push('✅ 当前性能状况良好');\r\n        }\r\n\r\n        return suggestions;\r\n    }\r\n}\r\n","/**\r\n * 操作系统和浏览器检测工具\r\n * 提供各种平台和浏览器的检测功能\r\n */\r\n\r\nconst os = {\r\n    /**\r\n     * 检测是否为iPhone上的Safari浏览器\r\n     * @returns {boolean} 如果是iPhone上的Safari浏览器则返回true，否则返回false\r\n     */\r\n    isIphoneSafari(): boolean {\r\n        // 检查是否在浏览器环境中运行\r\n        if (typeof window === 'undefined' || !window.navigator) {\r\n            return false;\r\n        }\r\n\r\n        const userAgent = window.navigator.userAgent;\r\n        const isIphone = /iPhone/i.test(userAgent);\r\n        const isSafari = /Safari/i.test(userAgent) && !/Chrome/i.test(userAgent);\r\n\r\n        return isIphone && isSafari;\r\n    },\r\n\r\n    /**\r\n     * 检测是否为Android设备\r\n     * @returns {boolean} 如果是Android设备则返回true，否则返回false\r\n     */\r\n    isAndroid(): boolean {\r\n        if (typeof window === 'undefined' || !window.navigator) {\r\n            return false;\r\n        }\r\n\r\n        return /Android/i.test(window.navigator.userAgent);\r\n    },\r\n\r\n    /**\r\n     * 检测是否为iOS设备\r\n     * @returns {boolean} 如果是iOS设备则返回true，否则返回false\r\n     */\r\n    isIOS(): boolean {\r\n        if (typeof window === 'undefined' || !window.navigator) {\r\n            return false;\r\n        }\r\n\r\n        return /iPad|iPhone|iPod/.test(window.navigator.userAgent);\r\n    },\r\n\r\n    /**\r\n     * 检测是否为移动设备\r\n     * @returns {boolean} 如果是移动设备则返回true，否则返回false\r\n     */\r\n    isMobile(): boolean {\r\n        if (typeof window === 'undefined' || !window.navigator) {\r\n            return false;\r\n        }\r\n\r\n        return this.isIOS() || this.isAndroid();\r\n    },\r\n\r\n    /**\r\n     * 检测是否为桌面设备\r\n     * @returns {boolean} 如果是桌面设备则返回true，否则返回false\r\n     */\r\n    isDesktop(): boolean {\r\n        return !this.isMobile();\r\n    },\r\n\r\n    /**\r\n     * 获取操作系统名称\r\n     * @returns {string} 操作系统名称\r\n     */\r\n    getOSName(): string {\r\n        if (typeof window === 'undefined' || !window.navigator) {\r\n            return 'unknown';\r\n        }\r\n\r\n        const userAgent = window.navigator.userAgent;\r\n\r\n        if (this.isIOS()) {\r\n            return 'iOS';\r\n        } else if (this.isAndroid()) {\r\n            return 'Android';\r\n        } else if (/Windows/i.test(userAgent)) {\r\n            return 'Windows';\r\n        } else if (/Mac/i.test(userAgent)) {\r\n            return 'MacOS';\r\n        } else if (/Linux/i.test(userAgent)) {\r\n            return 'Linux';\r\n        }\r\n\r\n        return 'unknown';\r\n    },\r\n\r\n    /**\r\n     * 检测是否为Safari浏览器\r\n     * @returns {boolean} 如果是Safari浏览器则返回true，否则返回false\r\n     */\r\n    isSafari(): boolean {\r\n        if (typeof window === 'undefined' || !window.navigator) {\r\n            return false;\r\n        }\r\n\r\n        const userAgent = window.navigator.userAgent;\r\n        return /Safari/i.test(userAgent) && !/Chrome/i.test(userAgent);\r\n    },\r\n\r\n    /**\r\n     * 检测是否为Chrome浏览器\r\n     * @returns {boolean} 如果是Chrome浏览器则返回true，否则返回false\r\n     */\r\n    isChrome(): boolean {\r\n        if (typeof window === 'undefined' || !window.navigator) {\r\n            return false;\r\n        }\r\n\r\n        return /Chrome/i.test(window.navigator.userAgent);\r\n    },\r\n\r\n    /**\r\n     * 检测是否为Firefox浏览器\r\n     * @returns {boolean} 如果是Firefox浏览器则返回true，否则返回false\r\n     */\r\n    isFirefox(): boolean {\r\n        if (typeof window === 'undefined' || !window.navigator) {\r\n            return false;\r\n        }\r\n\r\n        return /Firefox/i.test(window.navigator.userAgent);\r\n    }\r\n};\r\n\r\nexport { os };\r\n","import { THREE } from \"../core/global.ts\";\r\nimport { ScriptBase } from \"../core/ScriptBase\";\r\nimport { ObjectPool } from \"../core\";\r\n\r\n/**\r\n * 鼠标交互配置接口\r\n * 定义鼠标交互的所有可配置参数，支持多种交互模式\r\n */\r\nexport interface MouseInteractionConfig {\r\n    /** 交互模式：'hover'(悬停) | 'click'(点击) | 'both'(两者皆支持) */\r\n    interactionMode?: 'hover' | 'click' | 'both';\r\n    /** 是否启用鼠标交互功能 */\r\n    enabled?: boolean;\r\n    /** 鼠标悬停延迟（毫秒），用于避免频繁触发悬停事件 */\r\n    hoverDelay?: number;\r\n    /** 是否显示鼠标悬停提示（预留功能） */\r\n    showTooltip?: boolean;\r\n    /** 可交互的对象层级掩码 */\r\n    layerMask?: number;\r\n    /** 要排除的对象名称数组 */\r\n    excludeObjects?: string[];\r\n    /** 要排除的对象类型数组 */\r\n    excludeTypes?: string[];\r\n    /** 性能优化：射线检测频率（毫秒），默认为16ms（约60FPS） */\r\n    raycastInterval?: number;\r\n}\r\n\r\nexport class MouseInteractionScript extends ScriptBase {\r\n    name = 'MouseInteractionScript';\r\n\r\n    /** 鼠标交互的配置参数 */\r\n    private config: Required<MouseInteractionConfig>;\r\n\r\n    /** 射线投射器，用于检测鼠标与3D对象的交叉 */\r\n    private raycaster: THREE.Raycaster;\r\n\r\n    /** 鼠标在屏幕上的标准化坐标（-1到1范围） */\r\n    private mouse: THREE.Vector2;\r\n\r\n    /** 当前鼠标悬停的对象，只能有一个 */\r\n    private hoveredObject: THREE.Object3D | null = null;\r\n\r\n    /** 当前被选中的对象数组，支持多选 */\r\n    private selectedObjects: THREE.Object3D[] = [];\r\n\r\n    /** 悬停延迟的定时器ID，用于实现悬停延迟 */\r\n    private hoverTimeout: number = 0;\r\n\r\n    // 事件回调函数数组，支持多个回调\r\n    private onObjectSelectedCallbacks: Array<(object: THREE.Object3D | null) => void> = [];\r\n    private onObjectHoveredCallbacks: Array<(object: THREE.Object3D | null) => void> = [];\r\n    private onObjectDeselectedCallbacks: Array<(object: THREE.Object3D | null) => void> = [];\r\n\r\n    // 性能优化：添加时间戳用于节流\r\n    private lastHoverCheck: number = 0;\r\n    private lastClickCheck: number = 0;\r\n\r\n    // 性能优化：添加对象池\r\n    private vector2Pool: ObjectPool<THREE.Vector2>;\r\n    private intersectionPool: ObjectPool<THREE.Intersection[]>;\r\n\r\n    // 性能优化：射线检测控制\r\n    private raycastTimer: number = 0;\r\n\r\n    constructor(options?: MouseInteractionConfig) {\r\n        super();\r\n\r\n        // 合并默认配置和用户配置\r\n        this.config = {\r\n            interactionMode: 'hover',     // 默认使用悬停模式，提供最直观的交互体验\r\n            enabled: true,                // 默认启用交互功能\r\n            hoverDelay: 0,                // 默认无延迟，立即响应\r\n            showTooltip: false,           // 默认不显示提示（预留功能）\r\n            layerMask: 0xFFFFFFFF,        // 默认所有层级都可以交互\r\n            excludeObjects: [],           // 默认不排除任何对象\r\n            excludeTypes: [],             // 默认不排除任何对象类型\r\n            raycastInterval: 16,          // 默认射线检测间隔16ms（约60FPS）\r\n            ...options                    // 覆盖用户指定的配置\r\n        };\r\n\r\n        // 初始化射线投射器和鼠标坐标\r\n        this.raycaster = new THREE.Raycaster();\r\n        this.mouse = new THREE.Vector2();\r\n\r\n        // 设置射线投射器的精度参数，提高检测准确性\r\n        this.raycaster.params.Line = { threshold: 0.01 };      // 线条检测阈值\r\n        this.raycaster.params.Points = { threshold: 0.01 };    // 点检测阈值\r\n\r\n        // 初始化对象池\r\n        this.vector2Pool = new ObjectPool<THREE.Vector2>(\r\n            () => new THREE.Vector2(),\r\n            (vec) => vec.set(0, 0)\r\n        );\r\n\r\n        this.intersectionPool = new ObjectPool<THREE.Intersection[]>(\r\n            () => [],\r\n            (arr) => arr.length = 0\r\n        );\r\n\r\n        // 初始化节流的鼠标移动处理函数\r\n        this.throttledOnMouseMove = this.throttle(this.onMouseMove.bind(this), this.config.raycastInterval);\r\n    }\r\n\r\n    /**\r\n     * 节流函数\r\n     */\r\n    private throttle<T extends (...args: any[]) => any>(\r\n        func: T,\r\n        delay: number\r\n    ): (...args: any[]) => void {\r\n        let lastCall = 0;\r\n        return (...args: any[]) => {\r\n            const now = Date.now();\r\n            if (now - lastCall >= delay) {\r\n                lastCall = now;\r\n                func(...args);\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 节流的鼠标移动处理函数\r\n     */\r\n    private throttledOnMouseMove: ((event: MouseEvent) => void) | null = null;\r\n\r\n    public override async start(): Promise<void> {\r\n        super.start?.();\r\n        this.setupEventListeners();\r\n    }\r\n\r\n    /**\r\n     * 每帧更新 - 处理持续性的交互检测\r\n     *\r\n     * 主要负责在悬停模式下处理鼠标悬停检测，\r\n     * 点击模式下由事件监听器直接处理\r\n     *\r\n     * @param deltaTime - 上一帧到当前帧的时间间隔（秒）\r\n     */\r\n    public override update(deltaTime: number): void {\r\n        const startTime = performance.now();\r\n        super.update?.(deltaTime);\r\n\r\n        if (!this.config.enabled) return;\r\n\r\n        // 在悬停模式下处理鼠标悬停逻辑\r\n        if (this.config.interactionMode === 'hover' || this.config.interactionMode === 'both') {\r\n            this.handleMouseHover();\r\n        }\r\n\r\n        // 性能分析：记录脚本执行时间\r\n        const executionTime = performance.now() - startTime;\r\n        if (this.renderer && (this.renderer as any).performanceAnalyzer) {\r\n            (this.renderer as any).performanceAnalyzer.recordScriptExecution('MouseInteractionScript', executionTime);\r\n        }\r\n    }\r\n\r\n    public override onResize(): void {\r\n        super.onResize();\r\n    }\r\n\r\n    /**\r\n     * 脚本禁用\r\n     */\r\n    public override onDisable(): void {\r\n        super.onDisable?.();\r\n        this.clearAllInteractions();\r\n        this.removeEventListeners();\r\n    }\r\n\r\n    /**\r\n     * 脚本销毁\r\n     */\r\n    public override destroy(): void {\r\n        super.destroy?.();\r\n        this.removeEventListeners();\r\n        this.clearAllInteractions();\r\n        // 清理悬停延迟定时器\r\n        if (this.hoverTimeout) {\r\n            clearTimeout(this.hoverTimeout);\r\n            this.hoverTimeout = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置对象选择事件回调\r\n     * @param callback 回调函数\r\n     */\r\n    public setOnObjectSelectedCallback(callback: (object: THREE.Object3D | null) => void): void {\r\n        this.onObjectSelectedCallbacks = [callback];\r\n    }\r\n\r\n    /**\r\n     * 添加对象选择事件回调\r\n     * @param callback 回调函数\r\n     */\r\n    public addOnObjectSelectedCallback(callback: (object: THREE.Object3D | null) => void): void {\r\n        this.onObjectSelectedCallbacks.push(callback);\r\n    }\r\n\r\n    /**\r\n     * 移除对象选择事件回调\r\n     * @param callback 回调函数\r\n     */\r\n    public removeOnObjectSelectedCallback(callback: (object: THREE.Object3D | null) => void): void {\r\n        const index = this.onObjectSelectedCallbacks.indexOf(callback);\r\n        if (index > -1) {\r\n            this.onObjectSelectedCallbacks.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置对象取消选择事件回调\r\n     * @param callback 回调函数\r\n     */\r\n    public setOnObjectDeselectedCallback(callback: (object: THREE.Object3D | null) => void): void {\r\n        this.onObjectDeselectedCallbacks = [callback];\r\n    }\r\n\r\n    /**\r\n     * 添加对象取消选择事件回调\r\n     * @param callback 回调函数\r\n     */\r\n    public addOnObjectDeselectedCallback(callback: (object: THREE.Object3D | null) => void): void {\r\n        this.onObjectDeselectedCallbacks.push(callback);\r\n    }\r\n\r\n    /**\r\n     * 移除对象取消选择事件回调\r\n     * @param callback 回调函数\r\n     */\r\n    public removeOnObjectDeselectedCallback(callback: (object: THREE.Object3D | null) => void): void {\r\n        const index = this.onObjectDeselectedCallbacks.indexOf(callback);\r\n        if (index > -1) {\r\n            this.onObjectDeselectedCallbacks.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置对象悬停事件回调\r\n     * @param callback 回调函数\r\n     */\r\n    public setOnObjectHoveredCallback(callback: (object: THREE.Object3D | null) => void): void {\r\n        this.onObjectHoveredCallbacks = [callback];\r\n    }\r\n\r\n    /**\r\n     * 添加对象悬停事件回调\r\n     * @param callback 回调函数\r\n     */\r\n    public addOnObjectHoveredCallback(callback: (object: THREE.Object3D | null) => void): void {\r\n        this.onObjectHoveredCallbacks.push(callback);\r\n    }\r\n\r\n    /**\r\n     * 移除对象悬停事件回调\r\n     * @param callback 回调函数\r\n     */\r\n    public removeOnObjectHoveredCallback(callback: (object: THREE.Object3D | null) => void): void {\r\n        const index = this.onObjectHoveredCallbacks.indexOf(callback);\r\n        if (index > -1) {\r\n            this.onObjectHoveredCallbacks.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置可交互的层级掩码\r\n     * @param mask 层级掩码\r\n     */\r\n    public setLayerMask(mask: number): void {\r\n        this.config.layerMask = mask;\r\n    }\r\n\r\n    /**\r\n     * 添加要排除的对象名称\r\n     * @param objectName 对象名称\r\n     */\r\n    public addExcludedObject(objectName: string): void {\r\n        if (!this.config.excludeObjects.includes(objectName)) {\r\n            this.config.excludeObjects.push(objectName);\r\n        }\r\n    }\r\n\r\n    public addExcludedObjects(objectName: string[]): void {\r\n        for (const name of objectName) {\r\n            this.addExcludedObject(name);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 移除排除的对象名称\r\n     * @param objectName 对象名称\r\n     */\r\n    public removeExcludedObject(objectName: string): void {\r\n        const index = this.config.excludeObjects.indexOf(objectName);\r\n        if (index > -1) {\r\n            this.config.excludeObjects.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置要排除的对象类型\r\n     * @param types 对象类型数组\r\n     */\r\n    public setExcludedTypes(types: string[]): void {\r\n        this.config.excludeTypes = [...types];\r\n    }\r\n\r\n    /**\r\n     * 检查对象是否可以交互\r\n     * @param object 要检查的对象\r\n     * @returns 是否可以交互\r\n     */\r\n    private isObjectInteractable(object: THREE.Object3D): boolean {\r\n        // 检查对象是否存在\r\n        if (!object) {\r\n            return false;\r\n        }\r\n\r\n        // 检查对象是否可见\r\n        if (!object.visible) {\r\n            return false;\r\n        }\r\n\r\n        // 检查层级掩码\r\n        if (object.layers && (object.layers.mask & this.config.layerMask) === 0) {\r\n            return false;\r\n        }\r\n\r\n        // 检查对象名称排除列表\r\n        if (this.config.excludeObjects.includes(object.name)) {\r\n            return false;\r\n        }\r\n\r\n        // 检查对象类型排除列表\r\n        const objectType = object.type;\r\n        if (this.config.excludeTypes.includes(objectType)) {\r\n            return false;\r\n        }\r\n\r\n        // 检查对象是否为Mesh且具有材质\r\n        if (object instanceof THREE.Mesh) {\r\n            // 检查材质是否存在\r\n            if (!object.material) {\r\n                return false;\r\n            }\r\n\r\n            // 如果材质是数组，检查每个材质\r\n            if (Array.isArray(object.material)) {\r\n                for (const mat of object.material) {\r\n                    if (!mat) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 过滤可交互的对象\r\n     * @param intersects 射线检测结果\r\n     * @returns 过滤后的对象数组\r\n     */\r\n    private filterInteractableObjects(intersects: THREE.Intersection[]): THREE.Intersection[] {\r\n        return intersects.filter(intersect => {\r\n            // 检查交集对象是否存在\r\n            if (!intersect.object) {\r\n                return false;\r\n            }\r\n\r\n            // 检查对象是否可以交互\r\n            return this.isObjectInteractable(intersect.object);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 设置事件监听器\r\n     */\r\n    private setupEventListeners(): void {\r\n        try {\r\n            const canvas = this.webGLRenderer.domElement;\r\n\r\n            if (this.config.interactionMode === 'hover' || this.config.interactionMode === 'both') {\r\n                if (this.throttledOnMouseMove) {\r\n                    canvas.addEventListener('mousemove', this.throttledOnMouseMove);\r\n                }\r\n            }\r\n\r\n            if (this.config.interactionMode === 'click' || this.config.interactionMode === 'both') {\r\n                canvas.addEventListener('click', this.onClickHandler);\r\n                // 添加触摸事件支持\r\n                canvas.addEventListener('touchstart', this.onTouchStartHandler);\r\n            }\r\n\r\n            // 添加触摸移动和结束事件监听器，用于更好的触摸体验\r\n            canvas.addEventListener('touchmove', this.onTouchMoveHandler);\r\n            canvas.addEventListener('touchend', this.onTouchEndHandler);\r\n        } catch (error) {\r\n            console.error('[MouseInteractionScript] 设置事件监听器时出错:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 移除事件监听器\r\n     */\r\n    private removeEventListeners(): void {\r\n        try {\r\n            const canvas = this.webGLRenderer.domElement;\r\n\r\n            if (this.throttledOnMouseMove) {\r\n                canvas.removeEventListener('mousemove', this.throttledOnMouseMove);\r\n            }\r\n            canvas.removeEventListener('click', this.onClickHandler);\r\n            // 移除触摸事件监听器\r\n            canvas.removeEventListener('touchstart', this.onTouchStartHandler);\r\n            canvas.removeEventListener('touchmove', this.onTouchMoveHandler);\r\n            canvas.removeEventListener('touchend', this.onTouchEndHandler);\r\n        } catch (error) {\r\n            console.error('[MouseInteractionScript] 移除事件监听器时出错:', error);\r\n        }\r\n    }\r\n\r\n    // 事件处理函数的包装器，用于确保正确的this绑定\r\n    private onMouseMoveHandler = (event: MouseEvent) => {\r\n        this.onMouseMove(event);\r\n    };\r\n\r\n    private onClickHandler = (event: MouseEvent) => {\r\n        this.onClick(event);\r\n    };\r\n\r\n    private onTouchStartHandler = (event: TouchEvent) => {\r\n        this.onTouchStart(event);\r\n    };\r\n\r\n    private onTouchMoveHandler = (event: TouchEvent) => {\r\n        // 触摸移动事件处理，可以用于拖拽等操作\r\n        event.preventDefault(); // 阻止默认行为\r\n    };\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private onTouchEndHandler = (event: TouchEvent) => {\r\n        // 触摸结束事件处理\r\n    };\r\n\r\n    // ===========================================\r\n    // 鼠标事件处理方法\r\n    // ===========================================\r\n    private onMouseMove(event: MouseEvent): void {\r\n        try {\r\n            const rect = this.webGLRenderer.domElement.getBoundingClientRect();\r\n\r\n            // 从对象池获取Vector2对象\r\n            const mouse = this.vector2Pool.acquire();\r\n            mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;\r\n            mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\r\n\r\n            this.mouse.copy(mouse);\r\n\r\n            // 释放对象回对象池\r\n            this.vector2Pool.release(mouse);\r\n        } catch (error) {\r\n            console.error('[MouseInteractionScript] 处理鼠标移动事件时出错:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 触摸开始事件处理器\r\n     *\r\n     * 处理触摸事件，实现与鼠标点击相同的功能\r\n     *\r\n     * @param event - 触摸事件对象\r\n     */\r\n    private onTouchStart(event: TouchEvent): void {\r\n        try {\r\n            // 只有当event具有preventDefault方法时才调用\r\n            if (event && typeof event.preventDefault === 'function') {\r\n                event.preventDefault();\r\n            }\r\n\r\n            // 使用第一个触摸点\r\n            if (event.touches.length > 0) {\r\n                const touch = event.touches[0];\r\n                const mouseEvent = {\r\n                    clientX: touch.clientX,\r\n                    clientY: touch.clientY\r\n                } as MouseEvent;\r\n\r\n                // 复用点击处理逻辑\r\n                this.onClick(mouseEvent);\r\n            }\r\n        } catch (error) {\r\n            console.error('[MouseInteractionScript] 处理触摸事件时出错:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 点击事件处理器\r\n     *\r\n     * 处理鼠标点击事件，实现对象的选择和取消选择。\r\n     * 支持多选模式：再次点击已选中的对象可以取消选择。\r\n     * 点击空白区域将清除所有选择。\r\n     *\r\n     * @param event - 鼠标点击事件对象\r\n     */\r\n    private onClick(event: MouseEvent): void {\r\n        try {\r\n            // 性能优化：节流点击事件\r\n            const now = performance.now();\r\n            if (now - this.lastClickCheck < this.config.raycastInterval) {\r\n                return;\r\n            }\r\n            this.lastClickCheck = now;\r\n\r\n            // 只有当event具有preventDefault方法时才调用\r\n            if (event && typeof event.preventDefault === 'function') {\r\n                event.preventDefault();\r\n            }\r\n\r\n            // 计算鼠标位置\r\n            const canvas = this.webGLRenderer.domElement;\r\n            const rect = canvas.getBoundingClientRect();\r\n\r\n            // 从对象池获取Vector2对象\r\n            const mouse = this.vector2Pool.acquire();\r\n            mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;\r\n            mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\r\n\r\n            this.raycaster.setFromCamera(mouse, this.camera);\r\n\r\n            // 从对象池获取交集数组\r\n            const intersects = this.intersectionPool.acquire();\r\n            this.raycaster.intersectObjects(this.scene.children, true, intersects);\r\n\r\n            // 过滤可交互的对象\r\n            const interactableIntersects = this.filterInteractableObjects(intersects);\r\n\r\n            if (interactableIntersects.length > 0) {\r\n                const selectedObject = interactableIntersects[0].object;\r\n\r\n                // 检查是否是Mesh对象\r\n                if (selectedObject && (selectedObject as any).isMesh) {\r\n                    this.selectObject(selectedObject);\r\n                }\r\n            } else {\r\n                // 点击空白处，清除选择\r\n                this.clearSelection();\r\n            }\r\n\r\n            // 释放对象回对象池\r\n            this.vector2Pool.release(mouse);\r\n            this.intersectionPool.release(intersects);\r\n        } catch (error) {\r\n            console.error('[MouseInteractionScript] 处理点击事件时出错:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 处理鼠标悬停检测\r\n     *\r\n     * 在每帧更新中调用，使用射线投射检测鼠标下方的对象。\r\n     * 如果检测到新对象，将触发悬停效果；\r\n     * 如果鼠标移出所有对象，将清除悬停效果。\r\n     *\r\n     * 注意：该方法仅在 hover 或 both 模式下在 update() 中被调用\r\n     */\r\n    private handleMouseHover(): void {\r\n        try {\r\n            // 性能优化：添加节流机制\r\n            const now = performance.now();\r\n            if (now - this.lastHoverCheck < this.config.raycastInterval) {\r\n                return;\r\n            }\r\n            this.lastHoverCheck = now;\r\n\r\n            // 从对象池获取交集数组\r\n            const intersects = this.intersectionPool.acquire();\r\n            this.raycaster.setFromCamera(this.mouse, this.camera);\r\n            this.raycaster.intersectObjects(this.scene.children, true, intersects);\r\n\r\n            // 过滤可交互的对象\r\n            const interactableIntersects = this.filterInteractableObjects(intersects);\r\n\r\n            if (interactableIntersects.length > 0 && (interactableIntersects[0].object as any).isMesh) {\r\n                const hoveredObject = interactableIntersects[0].object;\r\n\r\n                // 如果悬停到新对象\r\n                if (this.hoveredObject !== hoveredObject) {\r\n                    this.hoverObject(hoveredObject);\r\n                }\r\n            } else {\r\n                // 鼠标移出所有对象\r\n                if (this.hoveredObject) {\r\n                    this.clearHover();\r\n                }\r\n            }\r\n\r\n            // 释放对象回对象池\r\n            this.intersectionPool.release(intersects);\r\n        } catch (error) {\r\n            console.error('[MouseInteractionScript] 处理鼠标悬停检测时出错:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 悬停对象\r\n     */\r\n    private hoverObject(object: THREE.Object3D): void {\r\n        try {\r\n            // 清除之前的悬停\r\n            this.clearHover();\r\n\r\n            this.hoveredObject = object;\r\n\r\n            // 触发所有对象悬停事件\r\n            for (const callback of this.onObjectHoveredCallbacks) {\r\n                callback(object);\r\n            }\r\n\r\n            // 应用悬停延迟\r\n            if (this.config.hoverDelay > 0) {\r\n                this.hoverTimeout = window.setTimeout(() => {\r\n                }, this.config.hoverDelay);\r\n            }\r\n        } catch (error) {\r\n            console.error('[MouseInteractionScript] 处理对象悬停时出错:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 清除悬停\r\n     */\r\n    private clearHover(): void {\r\n        try {\r\n            if (this.hoverTimeout) {\r\n                clearTimeout(this.hoverTimeout);\r\n                this.hoverTimeout = 0;\r\n            }\r\n\r\n            this.hoveredObject = null;\r\n\r\n            // 触发所有对象悬停清除事件\r\n            for (const callback of this.onObjectHoveredCallbacks) {\r\n                callback(null);\r\n            }\r\n        } catch (error) {\r\n            console.error('[MouseInteractionScript] 清除悬停效果时出错:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 选择对象\r\n     */\r\n    protected selectObject(object: THREE.Object3D | null): void {\r\n        try {\r\n            // 检查对象是否可以交互\r\n            if (!object || !this.isObjectInteractable(object)) {\r\n                return;\r\n            }\r\n\r\n            let deselectedObject: THREE.Object3D | null = null;\r\n\r\n            // 如果对象已被选中，则取消选择\r\n            const index = this.selectedObjects.indexOf(object);\r\n            if (index > -1) {\r\n                this.selectedObjects.splice(index, 1);\r\n                deselectedObject = object;\r\n            } else {\r\n                // 添加到选中列表\r\n                this.selectedObjects.push(object);\r\n            }\r\n\r\n            // 触发对象选择事件（选择或取消选择）\r\n            for (const callback of this.onObjectSelectedCallbacks) {\r\n                callback(deselectedObject ? null : object);\r\n            }\r\n\r\n            // 如果是取消选择，触发取消选择事件\r\n            if (deselectedObject) {\r\n                for (const callback of this.onObjectDeselectedCallbacks) {\r\n                    callback(deselectedObject);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('[MouseInteractionScript] 处理对象选择时出错:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 清除选择\r\n     */\r\n    private clearSelection(): void {\r\n        try {\r\n            const deselectedObjects = [...this.selectedObjects];\r\n            this.selectedObjects = [];\r\n            \r\n            // 触发所有对象的取消选择事件\r\n            for (const deselectedObject of deselectedObjects) {\r\n                for (const callback of this.onObjectDeselectedCallbacks) {\r\n                    callback(deselectedObject);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('[MouseInteractionScript] 清除选择时出错:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 清除所有交互\r\n     */\r\n    private clearAllInteractions(): void {\r\n        try {\r\n            this.clearHover();\r\n            this.clearSelection();\r\n        } catch (error) {\r\n            console.error('[MouseInteractionScript] 清除所有交互时出错:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取当前悬停的对象\r\n     */\r\n    public getHoveredObject(): THREE.Object3D | null {\r\n        return this.hoveredObject;\r\n    }\r\n\r\n    /**\r\n     * 获取当前选中的对象列表\r\n     */\r\n    public getSelectedObjects(): THREE.Object3D[] {\r\n        return [...this.selectedObjects];\r\n    }\r\n\r\n    /**\r\n     * 设置交互模式\r\n     */\r\n    public setInteractionMode(mode: 'hover' | 'click' | 'both'): void {\r\n        try {\r\n            this.config.interactionMode = mode;\r\n\r\n            // 重新初始化节流函数\r\n            this.throttledOnMouseMove = this.throttle(this.onMouseMove.bind(this), this.config.raycastInterval);\r\n\r\n            // 重新设置事件监听器\r\n            this.removeEventListeners();\r\n            this.setupEventListeners();\r\n        } catch (error) {\r\n            console.error('[MouseInteractionScript] 设置交互模式时出错:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 启用/禁用交互\r\n     */\r\n    public setEnabled(enabled: boolean): void {\r\n        try {\r\n            this.config.enabled = enabled;\r\n\r\n            if (!enabled) {\r\n                this.clearAllInteractions();\r\n            }\r\n        } catch (error) {\r\n            console.error('[MouseInteractionScript] 启用/禁用交互时出错:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取当前配置\r\n     */\r\n    public getConfig(): MouseInteractionConfig {\r\n        return { ...this.config };\r\n    }\r\n\r\n    /**\r\n     * 更新配置\r\n     */\r\n    public updateConfig(newConfig: Partial<MouseInteractionConfig>): void {\r\n        try {\r\n            const oldRaycastInterval = this.config.raycastInterval;\r\n            this.config = { ...this.config, ...newConfig };\r\n\r\n            // 如果射线检测间隔改变，更新节流函数\r\n            if (newConfig.raycastInterval !== undefined && newConfig.raycastInterval !== oldRaycastInterval) {\r\n                this.throttledOnMouseMove = this.throttle(this.onMouseMove.bind(this), this.config.raycastInterval);\r\n            }\r\n        } catch (error) {\r\n            console.error('[MouseInteractionScript] 更新配置时出错:', error);\r\n        }\r\n    }\r\n}","import type { IScript } from \"../interface\";\r\nimport type { Viewport } from \"../interface/Viewport\";\r\nimport { ScriptBase } from \"./ScriptBase\";\r\nimport { PostProcessingEffectComposer } from \"./PostProcessingEffectComposer\";\r\nimport { EventEmitter } from \"../events\";\r\nimport {THREE} from \"../core/global.ts\";\r\nimport { FrameRateMonitor, DetailedPerformanceProfiler, ObjectPool, BatchDOMUpdater } from \"./PerformanceUtils\";\r\nimport { PerformanceAnalyzerScript } from \"../controllers/PerformanceAnalyzerScript\";\r\nimport { FPSDiagnosticTool } from \"../controllers/FPSDiagnosticTool\";\r\nimport { MouseInteractionScript } from \"../controllers/MouseInteractionScript\";\r\n\r\n// 定义 Aether3D 引擎事件映射\r\nexport interface Aether3dEvents {\r\n    // 渲染事件\r\n    'render:start': { timestamp: number };\r\n    'render:stop': { timestamp: number };\r\n    'render:frame': { deltaTime: number; timestamp: number };\r\n\r\n    // 脚本事件\r\n    'script:added': { script: IScript };\r\n    'script:removed': { script: IScript };\r\n\r\n    // 场景事件\r\n    'scene:resize': { width: number; height: number };\r\n\r\n    // 后处理事件\r\n    'postprocessing:enabled': Record<string, never>; // 空对象的正确类型\r\n    'postprocessing:disabled': Record<string, never>; // 空对象的正确类型\r\n\r\n    // 性能事件\r\n    'performance:fps': { fps: number };\r\n    'performance:drop': { currentFps: number; previousFps: number };\r\n\r\n    // 鼠标交互事件\r\n    'mouse:objectSelected': { object: THREE.Object3D | null };\r\n    'mouse:objectHovered': { object: THREE.Object3D | null };\r\n    'mouse:objectDeselected': { object: THREE.Object3D | null };\r\n}\r\n\r\nexport class Aether3d extends EventEmitter<Aether3dEvents> {\r\n    private canvas: HTMLCanvasElement;\r\n    private config: Viewport;\r\n\r\n    public renderer: THREE.WebGLRenderer;\r\n    public scene: THREE.Scene;\r\n    public camera: THREE.PerspectiveCamera;\r\n\r\n    /**\r\n     * 鼠标交互脚本实例\r\n     */\r\n    private mouseInteractionScript: MouseInteractionScript | null = null;\r\n\r\n    /**\r\n     * 鼠标交互回调函数\r\n     */\r\n    private onObjectSelectedCallback: ((object: THREE.Object3D | null) => void) | null = null;\r\n    private onObjectHoveredCallback: ((object: THREE.Object3D | null) => void) | null = null;\r\n    private onObjectDeselectedCallback: ((object: THREE.Object3D | null) => void) | null = null;\r\n\r\n    /**\r\n     * 后处理效果Composer\r\n     * @private\r\n     */\r\n    private postProcessingComposer: PostProcessingEffectComposer | null = null;\r\n    private usePostProcessing: boolean = false;\r\n\r\n    /**\r\n     * 脚本管理\r\n     * @private\r\n     */\r\n    private scripts: IScript[] = [];\r\n    private startedScripts: Set<IScript> = new Set();\r\n\r\n    /**\r\n     * 渲染循环\r\n     * @private\r\n     */\r\n    private isRendering: boolean = false;\r\n    private lastTime: number = 0;\r\n    private frameId: number = 0;\r\n\r\n    /**\r\n     * 性能监控\r\n     * @private\r\n     */\r\n    private frameCount: number = 0;\r\n    private lastFpsUpdate: number = 0;\r\n\r\n    // 性能优化：添加设备性能检测缓存\r\n    private isHighPerformanceDeviceCached: boolean | null = null;\r\n\r\n    // 性能优化：缓存上次尺寸\r\n    private lastWidth: number = 0;\r\n    private lastHeight: number = 0;\r\n\r\n    // 帧率监控和性能分析\r\n    private frameRateMonitor: FrameRateMonitor;\r\n    private performanceProfiler: DetailedPerformanceProfiler;\r\n    private lastFps: number = 60;\r\n\r\n    // 性能优化：帧率限制\r\n    private targetFps: number = 60;\r\n    private frameInterval: number = 1000 / 60;\r\n    private lastFrameTime: number = 0;\r\n\r\n    // 性能优化：渲染跳过机制\r\n    private skipRenderCount: number = 0;\r\n    private maxSkipFrames: number = 2; // 最多跳过2帧\r\n\r\n    // 性能分析器\r\n    public performanceAnalyzer: PerformanceAnalyzerScript | null = null;\r\n\r\n    // FPS诊断工具\r\n    private fpsDiagnosticTool: FPSDiagnosticTool | null = null;\r\n\r\n    // 对象池优化：用于事件对象复用\r\n    private eventObjectPool: ObjectPool<{ deltaTime: number; timestamp: number }>;\r\n    private fpsEventObjectPool: ObjectPool<{ fps: number }>;\r\n    private performanceDropObjectPool: ObjectPool<{ currentFps: number; previousFps: number }>;\r\n\r\n    // 批量DOM更新器\r\n    private batchDOMUpdater: BatchDOMUpdater;\r\n\r\n    // 批处理优化：脚本方法调用批处理\r\n    private scriptMethodBatch: Array<{ script: IScript; method: keyof IScript; arg?: any }> = [];\r\n\r\n    // 渲染批处理优化\r\n    private renderBatchSize: number = 100;\r\n    private objectUpdateQueue: THREE.Object3D[] = [];\r\n\r\n    /**\r\n     * 事件处理\r\n     * @private\r\n     */\r\n    private onWindowResize: () => void;\r\n\r\n    constructor(config: Viewport) {\r\n        // 必须首先调用 super()\r\n        super();\r\n\r\n        this.config = config;\r\n        this.canvas = config.element;\r\n        this.usePostProcessing = config.enablePostProcessing;\r\n        this.renderer = new THREE.WebGLRenderer({\r\n            canvas: this.canvas,\r\n            antialias: this.config.antialias,       //抗锯齿\r\n            alpha: this.config.alpha,               //透明通道\r\n            powerPreference:\"low-power\",\r\n            stencil: true,                          //模板缓冲区\r\n            depth: true,\r\n            logarithmicDepthBuffer: this.config.enableLogarithmicDepthBuffer ?? true\r\n        });\r\n        this.renderer.shadowMap.enabled = true;\r\n        this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n        this.renderer.toneMapping = THREE.ACESFilmicToneMapping;\r\n        this.renderer.toneMappingExposure = 1.0;\r\n        this.scene = new THREE.Scene();\r\n        this.scene.background = config.backgroundColor ? new THREE.Color(config.backgroundColor) : null;\r\n        this.camera = new THREE.PerspectiveCamera(\r\n            75,\r\n            this.config.aspect,\r\n            0.1,\r\n            1000\r\n        );\r\n\r\n        // 初始化鼠标交互脚本（如果配置了）\r\n        if (config.mouseInteraction) {\r\n            this.mouseInteractionScript = new MouseInteractionScript(config.mouseInteraction);\r\n            // 设置鼠标交互回调函数\r\n            this.setupMouseInteractionCallbacks();\r\n            this.addScript(this.mouseInteractionScript);\r\n        }\r\n\r\n        //初始化后处理效果Composer（如果启用）\r\n        if (this.usePostProcessing) {\r\n            this.postProcessingComposer = new PostProcessingEffectComposer(this);\r\n        }\r\n\r\n        // 设置初始大小\r\n        this.updateRendererSize();\r\n\r\n        // 设置事件处理\r\n        this.onWindowResize = this.handleWindowResize.bind(this);\r\n        window.addEventListener('resize', this.onWindowResize);\r\n\r\n        // 初始化性能监控\r\n        this.frameRateMonitor = new FrameRateMonitor((fps) => {\r\n            // 使用对象池获取事件对象\r\n            const fpsEvent = this.fpsEventObjectPool.acquire();\r\n            fpsEvent.fps = fps;\r\n            this.emit('performance:fps', fpsEvent);\r\n            // 释放事件对象回对象池\r\n            this.fpsEventObjectPool.release(fpsEvent);\r\n\r\n            // 检测性能下降\r\n            if (this.lastFps > 30 && fps < 20) {\r\n                // 使用对象池获取性能下降事件对象\r\n                const dropEvent = this.performanceDropObjectPool.acquire();\r\n                dropEvent.currentFps = fps;\r\n                dropEvent.previousFps = this.lastFps;\r\n                this.emit('performance:drop', dropEvent);\r\n                // 释放事件对象回对象池\r\n                this.performanceDropObjectPool.release(dropEvent);\r\n            }\r\n            this.lastFps = fps;\r\n        });\r\n\r\n        this.performanceProfiler = new DetailedPerformanceProfiler();\r\n\r\n        // 创建性能分析器（如果启用性能监控）\r\n        if (config.enablePerformanceMonitoring) {\r\n            this.performanceAnalyzer = new PerformanceAnalyzerScript({\r\n                detailedAnalysis: true,\r\n                analysisInterval: 1000\r\n            });\r\n            this.addScript(this.performanceAnalyzer);\r\n        }\r\n\r\n        // 创建FPS诊断工具（如果启用性能监控）\r\n        if (config.enablePerformanceMonitoring) {\r\n            this.fpsDiagnosticTool = new FPSDiagnosticTool(this);\r\n            this.fpsDiagnosticTool.start();\r\n        }\r\n\r\n        // 初始化对象池\r\n        this.eventObjectPool = new ObjectPool(\r\n            () => ({ deltaTime: 0, timestamp: 0 }),\r\n            (obj) => { obj.deltaTime = 0; obj.timestamp = 0; },\r\n            50\r\n        );\r\n\r\n        this.fpsEventObjectPool = new ObjectPool(\r\n            () => ({ fps: 0 }),\r\n            (obj) => { obj.fps = 0; },\r\n            50\r\n        );\r\n\r\n        this.performanceDropObjectPool = new ObjectPool(\r\n            () => ({ currentFps: 0, previousFps: 0 }),\r\n            (obj) => { obj.currentFps = 0; obj.previousFps = 0; },\r\n            20\r\n        );\r\n\r\n        // 初始化批量DOM更新器\r\n        this.batchDOMUpdater = new BatchDOMUpdater();\r\n    }\r\n\r\n    /**\r\n     * 检测是否为高性能设备\r\n     */\r\n    private isHighPerformanceDevice(): boolean {\r\n        if (this.isHighPerformanceDeviceCached !== null) {\r\n            return this.isHighPerformanceDeviceCached;\r\n        }\r\n\r\n        // 检测设备性能\r\n        // const isHighPerformance = (\r\n        //     window.devicePixelRatio <= 2 &&\r\n        //     navigator.hardwareConcurrency >= 4 &&\r\n        //     !(navigator as any).connection?.saveData // 不在省电模式下\r\n        // );\r\n        //\r\n        // this.isHighPerformanceDeviceCached = isHighPerformance;\r\n        // return isHighPerformance;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 更新渲染器大小\r\n     */\r\n    private updateRendererSize(): void {\r\n        const width = window.innerWidth;\r\n        const height = window.innerHeight;\r\n\r\n        // 性能优化：只有在尺寸真正改变时才更新\r\n        if (this.lastWidth === width && this.lastHeight === height) {\r\n            return;\r\n        }\r\n\r\n        this.lastWidth = width;\r\n        this.lastHeight = height;\r\n\r\n        // 更新配置中的大小值\r\n        this.config.dpr.set(width, height);\r\n        this.config.aspect = width / height;\r\n\r\n        this.renderer.setSize(width, height);\r\n\r\n        // 根据设备性能设置像素比率\r\n        let dpr: number;\r\n        if (this.isHighPerformanceDevice()) {\r\n            dpr = Math.min(2, window.devicePixelRatio);\r\n        } else {\r\n            dpr = Math.min(1.5, window.devicePixelRatio);\r\n        }\r\n\r\n        // 只在像素比率真正改变时才更新\r\n        if (this.renderer.getPixelRatio() !== dpr) {\r\n            this.renderer.setPixelRatio(dpr);\r\n        }\r\n\r\n        // 启用各种 WebGL 扩展以提高渲染质量\r\n        this.renderer.shadowMap.enabled = true;\r\n        this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n        this.renderer.toneMapping = THREE.ACESFilmicToneMapping;\r\n        this.renderer.toneMappingExposure = 0.85;\r\n\r\n        // 更新相机宽高比\r\n        this.camera.aspect = this.config.aspect;\r\n        this.camera.updateProjectionMatrix();\r\n    }\r\n\r\n    /**\r\n     * 处理窗口大小调整\r\n     * @private\r\n     */\r\n    private handleWindowResize(): void {\r\n        this.updateRendererSize();\r\n        this.emit('scene:resize', {\r\n            width: window.innerWidth,\r\n            height: window.innerHeight\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 启动渲染循环\r\n     */\r\n    public start(): void {\r\n        if (this.isRendering) return;\r\n\r\n        this.isRendering = true;\r\n        this.lastTime = performance.now();\r\n        this.lastFrameTime = this.lastTime;\r\n        this.frameId = requestAnimationFrame(this.renderLoop.bind(this));\r\n\r\n        // 启动帧率监控\r\n        this.frameRateMonitor.start();\r\n\r\n        // 触发渲染开始事件\r\n        this.emit('render:start', { timestamp: this.lastTime });\r\n    }\r\n\r\n    /**\r\n     * 停止渲染循环\r\n     */\r\n    public stop(): void {\r\n        if (!this.isRendering) return;\r\n\r\n        this.isRendering = false;\r\n        if (this.frameId) {\r\n            cancelAnimationFrame(this.frameId);\r\n            this.frameId = 0;\r\n        }\r\n\r\n        // 停止帧率监控\r\n        this.frameRateMonitor.stop();\r\n\r\n        // 触发渲染停止事件\r\n        this.emit('render:stop', { timestamp: performance.now() });\r\n    }\r\n\r\n    /**\r\n     * 渲染循环\r\n     */\r\n    private renderLoop(time: number): void {\r\n        if (!this.isRendering) return;\r\n\r\n        // 性能优化：帧率限制\r\n        const elapsed = time - this.lastFrameTime;\r\n        if (elapsed < this.frameInterval) {\r\n            // 如果时间不够，跳过这一帧\r\n            this.skipRenderCount++;\r\n            if (this.skipRenderCount <= this.maxSkipFrames) {\r\n                this.frameId = requestAnimationFrame(this.renderLoop.bind(this));\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.skipRenderCount = 0;\r\n        this.lastFrameTime = time;\r\n\r\n        const deltaTime = Math.min((time - this.lastTime) / 1000, 0.016);\r\n        this.lastTime = time;\r\n        this.updateFpsCounter(time);\r\n\r\n        // 使用对象池获取事件对象\r\n        const frameEvent = this.eventObjectPool.acquire();\r\n        frameEvent.deltaTime = deltaTime;\r\n        frameEvent.timestamp = time;\r\n        this.emit('render:frame', frameEvent);\r\n        // 释放事件对象回对象池\r\n        this.eventObjectPool.release(frameEvent);\r\n\r\n        // 性能分析：开始帧渲染分析\r\n        this.performanceProfiler.start('frameRender');\r\n\r\n        this.fixedUpdate(1/60);\r\n\r\n        // 批处理脚本方法调用\r\n        this.callScriptMethodBatched('onPreRender');\r\n        this.updateScripts(deltaTime);\r\n        this.callScriptMethodBatched('lateUpdate', deltaTime);\r\n\r\n        // 批处理渲染调用\r\n        this.batchRender();\r\n\r\n        this.callScriptMethodBatched('onPostRender');\r\n\r\n        // 性能分析：结束帧渲染分析\r\n        this.performanceProfiler.end('frameRender');\r\n\r\n        // 性能优化：使用批量DOM更新器更新Stats\r\n        this.batchDOMUpdater.scheduleUpdate('stats', () => {\r\n        });\r\n        this.frameId = requestAnimationFrame(this.renderLoop.bind(this));\r\n    }\r\n\r\n    /**\r\n     * 更新FPS计数器\r\n     * @param time 当前时间戳\r\n     */\r\n    private updateFpsCounter(time: number): void {\r\n        this.frameCount++;\r\n\r\n        // 每秒更新一次FPS\r\n        if (time - this.lastFpsUpdate >= 1000) {\r\n            const fps = Math.round((this.frameCount * 1000) / (time - this.lastFpsUpdate));\r\n\r\n            // 使用对象池获取事件对象\r\n            const fpsEvent = this.fpsEventObjectPool.acquire();\r\n            fpsEvent.fps = fps;\r\n            this.emit('performance:fps', fpsEvent);\r\n            // 释放事件对象回对象池\r\n            this.fpsEventObjectPool.release(fpsEvent);\r\n\r\n            this.frameCount = 0;\r\n            this.lastFpsUpdate = time;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 固定时间步长更新\r\n     */\r\n    private fixedUpdate(fixedTimeStep: number): void {\r\n        // 使用批处理调用脚本方法\r\n        this.callScriptMethodBatched('fixedUpdate', fixedTimeStep);\r\n    }\r\n\r\n    /**\r\n     * 更新脚本\r\n     */\r\n    private updateScripts(deltaTime: number): void {\r\n        // 性能优化：只更新活跃脚本\r\n        const scriptsToUpdate: IScript[] = [];\r\n\r\n        for (const script of this.scripts) {\r\n            // 缓存方法引用以提高性能\r\n            const startMethod = script.start;\r\n            const updateMethod = script.update;\r\n\r\n            // 检查脚本是否已启动，如果没有则调用start方法\r\n            if (!this.startedScripts.has(script) && startMethod) {\r\n                try {\r\n                    const result = startMethod.call(script);\r\n                    if (result instanceof Promise) {\r\n                        result.then(() => {\r\n                            this.startedScripts.add(script);\r\n                        }).catch(error => {\r\n                            console.error(`Error in script start method:`, error);\r\n                        });\r\n                    } else {\r\n                        this.startedScripts.add(script);\r\n                    }\r\n                } catch (error) {\r\n                    console.error(`Error in script start method:`, error);\r\n                }\r\n            }\r\n\r\n            // 收集需要更新的脚本\r\n            if (updateMethod && this.startedScripts.has(script)) {\r\n                scriptsToUpdate.push(script);\r\n            }\r\n        }\r\n\r\n        // 批处理执行所有脚本更新\r\n        for (const script of scriptsToUpdate) {\r\n            try {\r\n                // 性能分析：开始脚本更新分析\r\n                this.performanceProfiler.start(`script:${script.name || 'unnamed'}`);\r\n                script.update!.call(script, deltaTime);\r\n                // 性能分析：结束脚本更新分析\r\n                this.performanceProfiler.end(`script:${script.name || 'unnamed'}`);\r\n            } catch (error) {\r\n                console.error(`Error in script update method:`, error);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 批处理调用脚本的指定方法\r\n     */\r\n    private callScriptMethodBatched(method: keyof IScript, arg?: any): void {\r\n        // 清空之前的批处理队列\r\n        this.scriptMethodBatch.length = 0;\r\n\r\n        // 将所有脚本方法调用添加到批处理队列\r\n        for (const script of this.scripts) {\r\n            const scriptMethod = script[method];\r\n            if (scriptMethod && typeof scriptMethod === 'function') {\r\n                this.scriptMethodBatch.push({ script, method, arg });\r\n            }\r\n        }\r\n\r\n        // 批处理执行所有方法调用\r\n        for (const item of this.scriptMethodBatch) {\r\n            try {\r\n                // 性能分析：开始方法调用分析\r\n                this.performanceProfiler.start(`script:${item.script.name || 'unnamed'}:${item.method}`);\r\n                if (item.arg !== undefined) {\r\n                    (item.script[item.method] as (...args: any[]) => void).call(item.script, item.arg);\r\n                } else {\r\n                    (item.script[item.method] as () => void).call(item.script);\r\n                }\r\n                // 性能分析：结束方法调用分析\r\n                this.performanceProfiler.end(`script:${item.script.name || 'unnamed'}:${item.method}`);\r\n            } catch (error) {\r\n                console.error(`Error in script ${item.method} method:`, error);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 批处理渲染调用\r\n     */\r\n    private batchRender(): void {\r\n        if (this.usePostProcessing && this.postProcessingComposer) {\r\n            this.postProcessingComposer.render();\r\n        } else {\r\n            this.renderer.render(this.scene, this.camera);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 批处理对象更新\r\n     * @param objects 要更新的对象数组\r\n     * @param updateFn 更新函数\r\n     * @param deltaTime\r\n     */\r\n    public batchUpdateObjects<T extends THREE.Object3D>(\r\n        objects: T[],\r\n        updateFn: (object: T, deltaTime: number) => void,\r\n        deltaTime: number\r\n    ): void {\r\n        // 分批处理对象更新，避免阻塞主线程\r\n        for (let i = 0; i < objects.length; i += this.renderBatchSize) {\r\n            const batch = objects.slice(i, Math.min(i + this.renderBatchSize, objects.length));\r\n\r\n            // 使用requestAnimationFrame确保在下一帧执行\r\n            requestAnimationFrame(() => {\r\n                for (const object of batch) {\r\n                    updateFn(object, deltaTime);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 添加对象到更新队列\r\n     * @param object 要更新的对象\r\n     */\r\n    public queueObjectUpdate(object: THREE.Object3D): void {\r\n        this.objectUpdateQueue.push(object);\r\n    }\r\n\r\n    /**\r\n     * 批处理队列中的对象更新\r\n     * @param updateFn 更新函数\r\n     * @param deltaTime 帧时间\r\n     */\r\n    public processObjectUpdateQueue(\r\n        updateFn: (object: THREE.Object3D, deltaTime: number) => void,\r\n        deltaTime: number\r\n    ): void {\r\n        this.batchUpdateObjects(this.objectUpdateQueue, updateFn, deltaTime);\r\n        // 清空队列\r\n        this.objectUpdateQueue.length = 0;\r\n    }\r\n\r\n    public disableSelection(modelName: string): void {\r\n        this.mouseInteractionScript?.addExcludedObject(modelName);\r\n    }\r\n\r\n    public disableSelections(modelName: string[]): void {\r\n        modelName.forEach(name => {\r\n            this.mouseInteractionScript?.addExcludedObject(name);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 添加脚本\r\n     */\r\n    public addScript(script: IScript): void {\r\n        script.host = this.scene;\r\n        if (script instanceof ScriptBase) {\r\n            script.setRenderer(this);\r\n        }\r\n        if (script.awake) {\r\n            try {\r\n                script.awake.call(script);\r\n            } catch (error) {\r\n                console.error('Error in script awake method:', error);\r\n            }\r\n        }\r\n        if (script.onEnable) {\r\n            try {\r\n                script.onEnable.call(script);\r\n            } catch (error) {\r\n                console.error('Error in script onEnable method:', error);\r\n            }\r\n        }\r\n        this.scripts.push(script);\r\n        this.emit('script:added', { script });\r\n    }\r\n\r\n    /**\r\n     * 移除脚本\r\n     */\r\n    public removeScript(script: IScript): void {\r\n        if (script.onDisable) {\r\n            try {\r\n                script.onDisable.call(script);\r\n            } catch (error) {\r\n                console.error('Error in script onDisable method:', error);\r\n            }\r\n        }\r\n        if (script.destroy) {\r\n            try {\r\n                script.destroy.call(script);\r\n            } catch (error) {\r\n                console.error('Error in script destroy method:', error);\r\n            }\r\n        }\r\n        this.startedScripts.delete(script);\r\n        const index = this.scripts.indexOf(script);\r\n        if (index !== -1) {\r\n            this.scripts.splice(index, 1);\r\n        }\r\n        this.emit('script:removed', { script });\r\n    }\r\n\r\n    /**\r\n     * 获取渲染器大小\r\n     */\r\n    public getSize(): THREE.Vector2 {\r\n        return new THREE.Vector2(\r\n            this.renderer.domElement.width,\r\n            this.renderer.domElement.height\r\n        );\r\n    }\r\n\r\n    /**\r\n     * 设置像素比率\r\n     */\r\n    public setPixelRatio(value: number): void {\r\n        this.renderer.setPixelRatio(value);\r\n    }\r\n\r\n    /**\r\n     * 设置大小\r\n     */\r\n    public setSize(rect: THREE.Vector2): void {\r\n        this.renderer.setSize(rect.x, rect.y);\r\n    }\r\n\r\n    /**\r\n     * 重新调整大小\r\n     */\r\n    public resize(): void {\r\n        this.handleWindowResize();\r\n    }\r\n\r\n    /**\r\n     * 启用后处理效果\r\n     */\r\n    public enablePostProcessing(): void {\r\n        if (!this.postProcessingComposer) {\r\n            this.postProcessingComposer = new PostProcessingEffectComposer(this);\r\n        }\r\n        this.usePostProcessing = true;\r\n        this.postProcessingComposer.enable();\r\n        this.postProcessingComposer.setPixelRatio( window.devicePixelRatio );\r\n        this.emit('postprocessing:enabled', {});\r\n    }\r\n\r\n    /**\r\n     * 禁用后处理效果\r\n     */\r\n    public disablePostProcessing(): void {\r\n        this.usePostProcessing = false;\r\n        if (this.postProcessingComposer) {\r\n            this.postProcessingComposer.disable();\r\n        }\r\n        this.emit('postprocessing:disabled', {});\r\n    }\r\n\r\n    /**\r\n     * 检查是否启用了后处理\r\n     */\r\n    public isPostProcessingEnabled(): boolean {\r\n        return this.usePostProcessing && this.postProcessingComposer !== null;\r\n    }\r\n\r\n    /**\r\n     * 获取后处理效果Composer实例\r\n     */\r\n    public getPostProcessingComposer(): PostProcessingEffectComposer | null {\r\n        return this.postProcessingComposer;\r\n    }\r\n\r\n    /**\r\n     * 直接向后处理Composer添加通道\r\n     * @param pass 要添加的通道\r\n     * @param beforeOutput 是否在输出通道之前插入\r\n     */\r\n    public addPostProcessingPass(pass: any, beforeOutput: boolean = true): void {\r\n        if (this.postProcessingComposer) {\r\n            this.postProcessingComposer.addPass(pass, beforeOutput);\r\n        } else {\r\n            console.warn('[Aether3d] Post-processing composer not available. Enable post-processing first.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 从后处理Composer中移除通道\r\n     * @param pass 要移除的通道\r\n     */\r\n    public removePostProcessingPass(pass: any): void {\r\n        if (this.postProcessingComposer) {\r\n            this.postProcessingComposer.removePass(pass);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 销毁渲染器\r\n     */\r\n    public dispose(): void {\r\n        // 停止渲染循环\r\n        this.stop();\r\n\r\n        // 移除事件监听器\r\n        window.removeEventListener('resize', this.onWindowResize);\r\n\r\n        // 销毁所有脚本\r\n        for (const script of this.scripts) {\r\n            this.removeScript(script);\r\n        }\r\n\r\n        // 清空脚本列表\r\n        this.scripts = [];\r\n        this.startedScripts.clear();\r\n\r\n        // 销毁后处理效果Composer\r\n        if (this.postProcessingComposer) {\r\n            this.postProcessingComposer.dispose();\r\n            this.postProcessingComposer = null;\r\n        }\r\n\r\n        // 销毁渲染器\r\n        this.renderer.dispose();\r\n\r\n        // 清除所有事件监听器\r\n        this.clear();\r\n\r\n        // 重置性能分析器\r\n        this.performanceProfiler.reset();\r\n\r\n        // 清理对象池\r\n        (this.eventObjectPool as any).clear?.();\r\n        (this.fpsEventObjectPool as any).clear?.();\r\n        (this.performanceDropObjectPool as any).clear?.();\r\n\r\n        // 清理批量DOM更新器\r\n        this.batchDOMUpdater.clear();\r\n\r\n        // 清空对象更新队列\r\n        this.objectUpdateQueue.length = 0;\r\n    }\r\n\r\n    /**\r\n     * 获取性能分析数据\r\n     */\r\n    public getPerformanceData() {\r\n        return {\r\n            fpsStats: this.frameRateMonitor.getFpsStats(),\r\n            profileData: this.performanceProfiler.getAllResults()\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 设置目标帧率\r\n     */\r\n    public setTargetFps(fps: number): void {\r\n        this.targetFps = fps;\r\n        this.frameInterval = 1000 / fps;\r\n    }\r\n\r\n    /**\r\n     * 设置对象选择回调函数\r\n     * @param callback 回调函数\r\n     */\r\n    public setOnObjectSelectedCallback(callback: (object: THREE.Object3D | null) => void): void {\r\n        this.onObjectSelectedCallback = callback;\r\n        \r\n        // 如果鼠标交互脚本已经存在，重新设置回调\r\n        if (this.mouseInteractionScript) {\r\n            this.mouseInteractionScript.setOnObjectSelectedCallback(callback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置对象取消选择回调函数\r\n     * @param callback 回调函数\r\n     */\r\n    public setOnObjectDeselectedCallback(callback: (object: THREE.Object3D | null) => void): void {\r\n        this.onObjectDeselectedCallback = callback;\r\n        \r\n        // 如果鼠标交互脚本已经存在，重新设置回调\r\n        if (this.mouseInteractionScript) {\r\n            this.mouseInteractionScript.setOnObjectDeselectedCallback(callback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置对象悬停回调函数\r\n     * @param callback 回调函数\r\n     */\r\n    public setOnObjectHoveredCallback(callback: (object: THREE.Object3D | null) => void): void {\r\n        this.onObjectHoveredCallback = callback;\r\n        \r\n        // 如果鼠标交互脚本已经存在，重新设置回调\r\n        if (this.mouseInteractionScript) {\r\n            this.mouseInteractionScript.setOnObjectHoveredCallback(callback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取鼠标交互脚本实例\r\n     */\r\n    public getMouseInteractionScript(): MouseInteractionScript | null {\r\n        return this.mouseInteractionScript;\r\n    }\r\n\r\n    /**\r\n     * 设置鼠标交互配置\r\n     */\r\n    public setMouseInteractionConfig(config: Partial<import(\"../controllers/MouseInteractionScript\").MouseInteractionConfig>): void {\r\n        if (this.mouseInteractionScript) {\r\n            this.mouseInteractionScript.updateConfig(config);\r\n        } else {\r\n            // 如果还没有鼠标交互脚本，则创建一个\r\n            this.mouseInteractionScript = new MouseInteractionScript(config);\r\n            // 设置鼠标交互回调函数\r\n            this.setupMouseInteractionCallbacks();\r\n            this.addScript(this.mouseInteractionScript);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 运行FPS诊断\r\n     */\r\n    public runFPSDiagnostics(): any {\r\n        if (this.fpsDiagnosticTool) {\r\n            return this.fpsDiagnosticTool.getReport();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 获取优化建议\r\n     */\r\n    public getOptimizationSuggestions(): string[] {\r\n        if (this.fpsDiagnosticTool) {\r\n            return this.fpsDiagnosticTool.generateOptimizationSuggestions();\r\n        }\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * 设置鼠标交互回调函数\r\n     */\r\n    private setupMouseInteractionCallbacks(): void {\r\n        if (this.mouseInteractionScript) {\r\n            // 添加对象选择回调\r\n            this.mouseInteractionScript.addOnObjectSelectedCallback((object: THREE.Object3D | null) => {\r\n                // 触发引擎级别的鼠标选择事件\r\n                this.emit('mouse:objectSelected', { object });\r\n                \r\n                // 调用外部设置的回调函数（如果有的话）\r\n                if (this.onObjectSelectedCallback) {\r\n                    this.onObjectSelectedCallback(object);\r\n                }\r\n            });\r\n\r\n            // 添加对象取消选择回调\r\n            this.mouseInteractionScript.addOnObjectDeselectedCallback((object: THREE.Object3D | null) => {\r\n                // 触发引擎级别的鼠标取消选择事件\r\n                this.emit('mouse:objectDeselected', { object });\r\n                \r\n                // 调用外部设置的回调函数（如果有的话）\r\n                if (this.onObjectDeselectedCallback) {\r\n                    this.onObjectDeselectedCallback(object);\r\n                }\r\n            });\r\n\r\n            // 添加对象悬停回调\r\n            this.mouseInteractionScript.addOnObjectHoveredCallback((object: THREE.Object3D | null) => {\r\n                // 触发引擎级别的鼠标悬停事件\r\n                this.emit('mouse:objectHovered', { object });\r\n                \r\n                // 调用外部设置的回调函数（如果有的话）\r\n                if (this.onObjectHoveredCallback) {\r\n                    this.onObjectHoveredCallback(object);\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n","import { THREE } from './global';\r\nimport {globalRenderer} from \"./RendererSystem.ts\";\r\nimport type {SceneData} from \"../interface/SceneData.ts\";\r\n\r\nfunction createCamera(name: string, aspect: number): THREE.PerspectiveCamera {\r\n    const camera = new THREE.PerspectiveCamera(75, aspect, 0.1, 1000);\r\n    camera.name = name;\r\n    return camera;\r\n}\r\n\r\nexport class SceneManager {\r\n    private static scenes: Map<string, SceneData> = new Map();\r\n    private static activeSceneName: string = '';\r\n\r\n    static addScene(name: string, sceneData:SceneData): void {\r\n        if (this.scenes.has(sceneData.name)) {\r\n            throw new Error(`Scene '${sceneData.name}' already exists`);\r\n        }\r\n        this.scenes.set(sceneData.name, sceneData);\r\n    }\r\n\r\n    static getSceneData(name: string): SceneData {\r\n        if (!this.has(name)) {\r\n            // 如果场景不存在，创建一个新的场景\r\n            const scene = new THREE.Scene();\r\n            scene.name = name;\r\n            const sceneData: SceneData = {\r\n                name: name,\r\n                scene: scene,\r\n                camera: createCamera(name + 'Camera', window.innerWidth / window.innerHeight),\r\n                scripts: [],\r\n                objectScripts: new Map(),\r\n                startedScripts: new Set()\r\n            };\r\n            this.addScene(name, sceneData);\r\n            return sceneData;\r\n        }\r\n        return this.scenes.get(name)!;\r\n    }\r\n\r\n    static getScene(name: string): THREE.Scene {\r\n        if (!this.has(name)) {\r\n            throw new Error(`Scene '${name}' not found`);\r\n        }\r\n        return this.scenes.get(name)!.scene;\r\n    }\r\n\r\n    static has(name: string): boolean {\r\n        return this.scenes.has(name);\r\n    }\r\n\r\n    static setActive(name: string): SceneData {\r\n        if (!this.has(name)) {\r\n            throw new Error(`Scene '${name}' not found`);\r\n        }\r\n        this.activeSceneName = name;\r\n        globalRenderer.sceneData = this.scenes.get(name)!;\r\n        globalRenderer.scene = globalRenderer.sceneData.scene;\r\n        globalRenderer.camera =globalRenderer.sceneData.camera;\r\n        return globalRenderer.sceneData;\r\n    }\r\n\r\n    static setActiveScene(index: number): SceneData {\r\n        if (index < 0 || index >= this.scenes.size) {\r\n            throw new Error(`Invalid scene index: ${index}`);\r\n        }\r\n        this.activeSceneName = Array.from(this.scenes.keys())[index];\r\n        globalRenderer.sceneData = Array.from(this.scenes.values())[index]!;\r\n        globalRenderer.scene = globalRenderer.sceneData.scene;\r\n        globalRenderer.camera =globalRenderer.sceneData.camera;\r\n        return globalRenderer.sceneData;\r\n    }\r\n\r\n    static removeScene(name: string): void {\r\n        if (!this.has(name)) {\r\n            throw new Error(`Scene '${name}' not found`);\r\n        }\r\n        this.scenes.delete(name);\r\n    }\r\n\r\n    static destroy(): void {\r\n        this.scenes.clear();\r\n        this.activeSceneName = '';\r\n    }\r\n}\r\n","import { EffectComposer, RenderPass, OutputPass, THREE } from './global';\r\nimport { SceneManager } from \"./SceneManager\";\r\nimport type {SceneData} from \"../interface/SceneData.ts\";\r\n\r\n/**\r\n * 定义全局渲染变量\r\n */\r\nexport const globalRenderer: {\r\n    renderer: THREE.WebGLRenderer | null,\r\n    scene: THREE.Scene | null,\r\n    sceneData: SceneData | null,\r\n    camera: THREE.PerspectiveCamera | null,\r\n    frame: number,\r\n    frameId: number,\r\n    contextLost: boolean,\r\n    enablePostProcessing: boolean,\r\n    composer: EffectComposer | null,\r\n    renderPass: RenderPass | null,\r\n    outputPass: OutputPass | null,\r\n} = {\r\n    renderer: null,\r\n    scene: null,\r\n    sceneData: null,\r\n    camera: null,\r\n    frame: 0,\r\n    frameId: 0,\r\n    contextLost: false,\r\n    enablePostProcessing: false,\r\n    composer: null,\r\n    renderPass: null,\r\n    outputPass: null\r\n};\r\n\r\n/**\r\n * 检查全局渲染器是否已完全初始化\r\n * @returns 如果所有必需的组件都存在则返回 true，否则返回 false\r\n */\r\nexport function isGlobalRendererReady(): boolean {\r\n    return !!globalRenderer.scene && !!globalRenderer.camera && !!globalRenderer.renderer;\r\n}\r\n/**\r\n * 创建新场景\r\n * @param name 场景名称\r\n * @returns 创建的场景实例\r\n */\r\nexport function createScene(name: string):THREE.Scene {\r\n    if (SceneManager.has(name))\r\n    {\r\n        return SceneManager.getScene(name);\r\n    }\r\n    const scene = new THREE.Scene();\r\n    scene.name = name;\r\n    const sceneData:SceneData = {\r\n        name: name,\r\n        scene: scene,\r\n        camera: createCamera(name + 'Camera', window.innerWidth/window.innerHeight),\r\n        scripts: [],\r\n        objectScripts: new Map(),\r\n        startedScripts: new Set()\r\n    };\r\n    SceneManager.addScene(name,sceneData);\r\n    return scene;\r\n}\r\n\r\n/**\r\n * 渲染场景\r\n */\r\nexport function render(): void {\r\n    if (!globalRenderer.renderer || !globalRenderer.scene || !globalRenderer.camera) return;\r\n    if (globalRenderer.enablePostProcessing && globalRenderer.composer) {\r\n        globalRenderer.composer.render();\r\n    } else {\r\n        globalRenderer.renderer.render(globalRenderer.scene, globalRenderer.camera);\r\n    }\r\n}\r\n\r\n/**\r\n * 创建透视相机\r\n * @param name\r\n * @param aspectRatio\r\n */\r\nexport function createCamera(name: string, aspectRatio: number): THREE.PerspectiveCamera {\r\n    const camera = new THREE.PerspectiveCamera(75, aspectRatio, 0.1, 1000);\r\n    camera.name = name;\r\n    return camera;\r\n}\r\n\r\n/**\r\n * 创建后处理效果\r\n */\r\nexport function createPostprocessing(): void {\r\n    if (!globalRenderer.renderer || !globalRenderer.scene || !globalRenderer.camera) return;\r\n    globalRenderer.composer = new EffectComposer(globalRenderer.renderer);\r\n    globalRenderer.renderPass = new RenderPass(globalRenderer.scene, globalRenderer.camera);\r\n}\r\n\r\n/**\r\n * 设置 WebGL 上下文事件处理程序\r\n */\r\nexport function setupContextEvents(): void {\r\n    if (!globalRenderer.renderer) return;\r\n    const canvas = globalRenderer.renderer.domElement;\r\n    canvas.addEventListener('webglcontextlost', (event: Event) => {\r\n        event.preventDefault();\r\n        globalRenderer.contextLost = true;\r\n        console.warn('[WebGLRendererAdapter] WebGL context lost - 暂停渲染流程');\r\n    }, false);\r\n    canvas.addEventListener('webglcontextrestored', () => {\r\n        globalRenderer.contextLost = false;\r\n        console.info('[WebGLRendererAdapter] WebGL context restored - 重新初始化资源');\r\n    }, false);\r\n}\r\n","import type {IScript} from \"../interface\";\r\nimport {THREE} from \"./global\";\r\nimport {SceneManager} from \"./SceneManager\";\r\n\r\n/**\r\n * 为场景或场景中的对象添加脚本\r\n * @param sceneName 场景名称\r\n * @param script 当scriptOrObject是对象时，这是要添加的脚本\r\n */\r\nexport function addScript(sceneName: string, script: IScript): void;\r\n\r\n/**\r\n * 为场景或场景中的对象添加脚本\r\n * @param sceneName 场景名称\r\n * @param object 脚本对象\r\n * @param script 脚本\r\n */\r\nexport function addScript(sceneName: string, object: THREE.Object3D, script: IScript): void;\r\nexport function addScript(sceneName: string, scriptOrObject: IScript | THREE.Object3D, script?: IScript): void {\r\n    if (!SceneManager.has(sceneName)) {\r\n        throw new Error(`Scene '${sceneName}' not found`);\r\n    }\r\n\r\n    const sceneData = SceneManager.getSceneData(sceneName);\r\n\r\n    // 如果第二个参数是 THREE.Object3D，则为对象添加脚本\r\n    if (scriptOrObject instanceof THREE.Object3D) {\r\n        if (!script) {\r\n            throw new Error('Script parameter is required when adding script to an object');\r\n        }\r\n\r\n        if (!sceneData.objectScripts.has(scriptOrObject)) {\r\n            sceneData.objectScripts.set(scriptOrObject, []);\r\n        }\r\n        sceneData.objectScripts.get(scriptOrObject)!.push(script);\r\n    }\r\n    // 否则为场景添加脚本\r\n    else {\r\n        sceneData.scripts.push(scriptOrObject as IScript);\r\n    }\r\n}\r\n\r\n/**\r\n * 移除场景或场景中的对象脚本\r\n * @param sceneName 场景名称\r\n * @param script 当scriptOrObject是对象时，这是要移除的脚本\r\n */\r\nexport function removeScript(sceneName: string, script: IScript): void;\r\n\r\n/**\r\n * 移除场景或场景中的对象脚本\r\n * @param sceneName 场景名称\r\n * @param object 脚本对象\r\n * @param script 脚本\r\n */\r\nexport function removeScript(sceneName: string, object: THREE.Object3D, script: IScript): void;\r\nexport function removeScript(sceneName: string, scriptOrObject: IScript | THREE.Object3D, script?: IScript): void {\r\n    if (!SceneManager.has(sceneName)) {\r\n        throw new Error(`Scene '${sceneName}' not found`);\r\n    }\r\n    const sceneData = SceneManager.getSceneData(sceneName);\r\n\r\n    // 如果第二个参数是 THREE.Object3D，则从对象中移除脚本\r\n    if (scriptOrObject instanceof THREE.Object3D) {\r\n        if (!script) {\r\n            throw new Error('Script parameter is required when removing script from an object');\r\n        }\r\n\r\n        // 检查对象是否有脚本\r\n        if (!sceneData.objectScripts.has(scriptOrObject)) {\r\n            throw new Error(`Object does not have any scripts`);\r\n        }\r\n\r\n        const scripts = sceneData.objectScripts.get(scriptOrObject)!;\r\n        const scriptIndex = scripts.indexOf(script);\r\n        \r\n        if (scriptIndex === -1) {\r\n            throw new Error(`Script not found on object`);\r\n        }\r\n\r\n        // 调用脚本的 destroy 方法进行清理\r\n        if (typeof script.destroy === 'function') {\r\n            try {\r\n                script.destroy();\r\n            } catch (error) {\r\n                console.warn('Error during script destroy:', error);\r\n            }\r\n        }\r\n\r\n        // 从数组中移除脚本\r\n        scripts.splice(scriptIndex, 1);\r\n\r\n        // 如果对象没有更多脚本，删除映射\r\n        if (scripts.length === 0) {\r\n            sceneData.objectScripts.delete(scriptOrObject);\r\n        }\r\n    }\r\n    // 否则从场景中移除脚本\r\n    else {\r\n        const scriptIndex = sceneData.scripts.indexOf(scriptOrObject as IScript);\r\n        \r\n        if (scriptIndex === -1) {\r\n            throw new Error(`Script not found in scene`);\r\n        }\r\n\r\n        const script = sceneData.scripts[scriptIndex];\r\n        \r\n        // 调用脚本的 destroy 方法进行清理\r\n        if (typeof script.destroy === 'function') {\r\n            try {\r\n                script.destroy();\r\n            } catch (error) {\r\n                console.warn('Error during script destroy:', error);\r\n            }\r\n        }\r\n\r\n        // 从数组中移除脚本\r\n        sceneData.scripts.splice(scriptIndex, 1);\r\n    }\r\n}\r\n","import { ScriptBase } from \"../core/ScriptBase\";\r\nimport { Reflector, THREE, HorizontalBlurShader, VerticalBlurShader } from '../core/global';\r\n\r\n/**\r\n * 镜面反射效果脚本 - 支持从清晰到模糊的渐变效果\r\n * 实现基于平面反射的镜面效果，支持中心清晰边缘模糊的渐变反射\r\n */\r\nexport class MirrorReflectionScript extends ScriptBase {\r\n    // 镜面反射参数\r\n    private clipBias: number = 0.003;\r\n    private textureWidth: number = 1024; // 提高默认分辨率以获得更好效果\r\n    private textureHeight: number = 1024;\r\n    private color: number = 0x7f7f7f;\r\n    private opacity: number = 1.0;\r\n    private blurStrength: number = 0.0; // 默认不模糊\r\n    private blurRadius: number = 5; // 模糊半径\r\n    private gradientBlur: boolean = false; // 默认不启用渐变模糊\r\n    private blurCenter: THREE.Vector2 = new THREE.Vector2(0.5, 0.5); // 模糊中心点(归一化坐标)\r\n\r\n    // 反射器\r\n    private reflector: Reflector | null = null;\r\n    private geometry: THREE.BufferGeometry | null = null;\r\n    private reflectorObject: Reflector | null = null; // 修复类型为Reflector\r\n\r\n    // 模糊效果相关\r\n    private blurRenderTarget1: THREE.WebGLRenderTarget | null = null;\r\n    private blurRenderTarget2: THREE.WebGLRenderTarget | null = null;\r\n    private blurPlane: THREE.Mesh | null = null;\r\n    private blurMaterial1: THREE.ShaderMaterial | null = null;\r\n    private blurMaterial2: THREE.ShaderMaterial | null = null;\r\n    private needsBlurUpdate: boolean = false;\r\n\r\n    constructor(options?: {\r\n        clipBias?: number;\r\n        textureWidth?: number;\r\n        textureHeight?: number;\r\n        color?: number;\r\n        opacity?: number;\r\n        blurStrength?: number;\r\n        blurRadius?: number;\r\n        gradientBlur?: boolean;\r\n        blurCenter?: THREE.Vector2;\r\n    }) {\r\n        super();\r\n        this.name = \"MirrorReflectionScript\";\r\n\r\n        if (options) {\r\n            // 修复参数赋值\r\n            if (options.clipBias !== undefined) this.clipBias = options.clipBias;\r\n            if (options.textureWidth !== undefined) this.textureWidth = options.textureWidth;\r\n            if (options.textureHeight !== undefined) this.textureHeight = options.textureHeight;\r\n            if (options.color !== undefined) this.color = options.color;\r\n            if (options.opacity !== undefined) this.opacity = options.opacity;\r\n            if (options.blurStrength !== undefined) this.blurStrength = options.blurStrength;\r\n            if (options.blurRadius !== undefined) this.blurRadius = options.blurRadius;\r\n            if (options.gradientBlur !== undefined) this.gradientBlur = options.gradientBlur;\r\n            // 添加对options.blurCenter的null检查\r\n            if (options.blurCenter !== undefined) this.blurCenter.copy(options.blurCenter);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 启动脚本时调用\r\n     */\r\n    public start(): void {\r\n        // this.createReflector();\r\n        // this.createBlurComponents();\r\n    }\r\n\r\n    public meshReflector(geometry:THREE.BufferGeometry): void {\r\n        try {\r\n            // 修复条件检查\r\n            if (this.renderer) {\r\n                this.geometry = geometry;\r\n                // 添加对this.geometry的null检查\r\n                if (this.geometry) {\r\n                    this.reflector = new Reflector(this.geometry, {\r\n                        clipBias: this.clipBias,\r\n                        textureWidth: this.textureWidth,\r\n                        textureHeight: this.textureHeight,\r\n                        color: new THREE.Color(this.color)\r\n                    });\r\n\r\n                    // Reflector本身就是一个Mesh对象\r\n                    this.reflectorObject = this.reflector;\r\n                    this.reflectorObject.position.set(0, 0, 0);\r\n                    // this.reflectorObject.rotation.x = -Math.PI / 2;\r\n                    this.reflectorObject.visible = true;\r\n                    this.reflectorObject.name = 'Reflection';\r\n\r\n                    // 设置材质属性\r\n                    // 添加对this.reflectorObject.material的null检查\r\n                    if (this.reflectorObject && this.reflectorObject.material) {\r\n                        const material = this.reflectorObject.material;\r\n                        if (Array.isArray(material)) {\r\n                            material.forEach(mat => {\r\n                                if (mat instanceof THREE.MeshBasicMaterial || mat instanceof THREE.ShaderMaterial) {\r\n                                    mat.transparent = true;\r\n                                    mat.opacity = this.opacity;\r\n                                }\r\n                            });\r\n                        } else {\r\n                            if (material instanceof THREE.MeshBasicMaterial || material instanceof THREE.ShaderMaterial) {\r\n                                material.transparent = true;\r\n                                material.opacity = this.opacity;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // 添加到场景\r\n                    // 添加对this.scene的null检查\r\n                    if (this.scene) {\r\n                        this.scene.add(this.reflectorObject);\r\n                    }\r\n                    console.log('[MirrorReflectionScript] Gradient blur mirror reflector created successfully');\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('[MirrorReflectionScript] Failed to create mirror reflector:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建镜面反射器 - 修改为支持渐变模糊\r\n     */\r\n    private createReflector(): void {\r\n        try {\r\n            // 修复条件检查\r\n            if (this.renderer) {\r\n                this.geometry = new THREE.PlaneGeometry(1000, 1000);\r\n\r\n                // 添加对this.geometry的null检查\r\n                if (this.geometry) {\r\n                    this.reflector = new Reflector(this.geometry, {\r\n                        clipBias: this.clipBias,\r\n                        textureWidth: this.textureWidth,\r\n                        textureHeight: this.textureHeight,\r\n                        color: new THREE.Color(this.color)\r\n                    });\r\n\r\n                    // Reflector本身就是一个Mesh对象\r\n                    this.reflectorObject = this.reflector;\r\n                    this.reflectorObject.position.set(0, 0, 0);\r\n                    this.reflectorObject.rotation.x = -Math.PI / 2;\r\n                    this.reflectorObject.visible = true;\r\n                    this.reflectorObject.name = 'Reflection';\r\n\r\n                    // 设置材质属性\r\n                    // 添加对this.reflectorObject.material的null检查\r\n                    if (this.reflectorObject && this.reflectorObject.material) {\r\n                        const material = this.reflectorObject.material;\r\n                        if (Array.isArray(material)) {\r\n                            material.forEach(mat => {\r\n                                if (mat instanceof THREE.MeshBasicMaterial || mat instanceof THREE.ShaderMaterial) {\r\n                                    mat.transparent = true;\r\n                                    mat.opacity = this.opacity;\r\n                                }\r\n                            });\r\n                        } else {\r\n                            if (material instanceof THREE.MeshBasicMaterial || material instanceof THREE.ShaderMaterial) {\r\n                                material.transparent = true;\r\n                                material.opacity = this.opacity;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // 添加到场景\r\n                    // 添加对this.scene的null检查\r\n                    if (this.scene) {\r\n                        this.scene.add(this.reflectorObject);\r\n                    }\r\n                    console.log('[MirrorReflectionScript] Gradient blur mirror reflector created successfully');\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('[MirrorReflectionScript] Failed to create mirror reflector:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建模糊效果组件\r\n     */\r\n    public createBlurComponents(): void {\r\n        if (!this.renderer) return;\r\n\r\n        // 创建渲染目标\r\n        this.blurRenderTarget1 = new THREE.WebGLRenderTarget(this.textureWidth, this.textureHeight);\r\n        this.blurRenderTarget2 = new THREE.WebGLRenderTarget(this.textureWidth, this.textureHeight);\r\n\r\n        // 创建模糊着色器材质\r\n        this.blurMaterial1 = new THREE.ShaderMaterial({\r\n            name: 'HorizontalBlurMaterial',\r\n            uniforms: {\r\n                tDiffuse: { value: null },\r\n                h: { value: this.blurRadius / this.textureWidth }\r\n            },\r\n            vertexShader: HorizontalBlurShader.vertexShader,\r\n            fragmentShader: HorizontalBlurShader.fragmentShader\r\n        });\r\n\r\n        this.blurMaterial2 = new THREE.ShaderMaterial({\r\n            name: 'VerticalBlurMaterial',\r\n            uniforms: {\r\n                tDiffuse: { value: null },\r\n                v: { value: this.blurRadius / this.textureHeight }\r\n            },\r\n            vertexShader: VerticalBlurShader.vertexShader,\r\n            fragmentShader: VerticalBlurShader.fragmentShader\r\n        });\r\n\r\n        // 创建用于应用模糊效果的平面\r\n        const blurPlaneGeometry = new THREE.PlaneGeometry(2, 2);\r\n        this.blurPlane = new THREE.Mesh(blurPlaneGeometry, this.blurMaterial1);\r\n        this.blurPlane.visible = false;\r\n    }\r\n\r\n    /**\r\n     * 应用模糊效果\r\n     */\r\n    private applyBlur(renderer: THREE.WebGLRenderer): void {\r\n        if (!this.reflector || !this.blurRenderTarget1 || !this.blurRenderTarget2 ||\r\n            !this.blurMaterial1 || !this.blurMaterial2 || !this.blurPlane) {\r\n            return;\r\n        }\r\n\r\n        // 如果模糊强度为0，直接使用原始反射纹理\r\n        if (this.blurStrength <= 0) {\r\n            // 恢复原始纹理\r\n            if (this.reflector.material) {\r\n                const material = this.reflector.material as THREE.ShaderMaterial;\r\n                if (material.uniforms && material.uniforms.tDiffuse) {\r\n                    material.uniforms.tDiffuse.value = this.reflector.getRenderTarget().texture;\r\n                }\r\n            }\r\n            return;\r\n        }\r\n\r\n        // 获取反射器的渲染目标纹理\r\n        const reflectorTexture = this.reflector.getRenderTarget().texture;\r\n\r\n        // 水平模糊\r\n        this.blurMaterial1.uniforms.tDiffuse.value = reflectorTexture;\r\n        this.blurMaterial1.uniforms.h.value = this.blurRadius / this.textureWidth * this.blurStrength;\r\n\r\n        renderer.setRenderTarget(this.blurRenderTarget1);\r\n        renderer.render(this.blurPlane, this.camera);\r\n\r\n        // 垂直模糊\r\n        this.blurMaterial2.uniforms.tDiffuse.value = this.blurRenderTarget1.texture;\r\n        this.blurMaterial2.uniforms.v.value = this.blurRadius / this.textureHeight * this.blurStrength;\r\n\r\n        renderer.setRenderTarget(this.blurRenderTarget2);\r\n        renderer.render(this.blurPlane, this.camera);\r\n\r\n        // 将模糊后的纹理应用到反射器材质\r\n        if (this.reflector.material) {\r\n            const material = this.reflector.material as THREE.ShaderMaterial;\r\n            if (material.uniforms && material.uniforms.tDiffuse) {\r\n                material.uniforms.tDiffuse.value = this.blurRenderTarget2.texture;\r\n            }\r\n        }\r\n\r\n        this.needsBlurUpdate = false;\r\n    }\r\n\r\n    /**\r\n     * 更新镜面反射参数 - 添加模糊参数支持\r\n     */\r\n    public updateParameters(options: {\r\n        clipBias?: number;\r\n        textureWidth?: number;\r\n        textureHeight?: number;\r\n        color?: number;\r\n        opacity?: number;\r\n        blurStrength?: number;\r\n        blurRadius?: number;\r\n        gradientBlur?: boolean;\r\n        blurCenter?: THREE.Vector2;\r\n    }): void {\r\n        let needsRecreate = false;\r\n\r\n        // 检查是否需要重新创建反射器\r\n        if (options.textureWidth !== undefined && options.textureWidth !== this.textureWidth) {\r\n            this.textureWidth = options.textureWidth;\r\n            needsRecreate = true;\r\n        }\r\n        if (options.textureHeight !== undefined && options.textureHeight !== this.textureHeight) {\r\n            this.textureHeight = options.textureHeight;\r\n            needsRecreate = true;\r\n        }\r\n\r\n        // 更新其他参数\r\n        if (options.clipBias !== undefined) this.clipBias = options.clipBias;\r\n        if (options.color !== undefined) this.color = options.color;\r\n        if (options.opacity !== undefined) this.opacity = options.opacity;\r\n        if (options.blurStrength !== undefined) {\r\n            this.blurStrength = options.blurStrength;\r\n            this.needsBlurUpdate = true;\r\n        }\r\n        if (options.blurRadius !== undefined) {\r\n            this.blurRadius = options.blurRadius;\r\n            this.needsBlurUpdate = true;\r\n        }\r\n        if (options.gradientBlur !== undefined) this.gradientBlur = options.gradientBlur;\r\n        if (options.blurCenter !== undefined) this.blurCenter.copy(options.blurCenter);\r\n\r\n        // 如果需要重新创建反射器\r\n        if (needsRecreate) {\r\n            this.dispose();\r\n            this.createReflector();\r\n            this.createBlurComponents();\r\n        } else {\r\n            // 更新现有反射器的参数\r\n            this.updateReflectorParameters();\r\n            // 更新模糊参数\r\n            this.updateBlurParameters();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新模糊参数\r\n     */\r\n    private updateBlurParameters(): void {\r\n        if (this.blurMaterial1 && this.blurMaterial2) {\r\n            this.blurMaterial1.uniforms.h.value = this.blurRadius / this.textureWidth * this.blurStrength;\r\n            this.blurMaterial2.uniforms.v.value = this.blurRadius / this.textureHeight * this.blurStrength;\r\n            this.needsBlurUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新反射器参数\r\n     */\r\n    private updateReflectorParameters(): void {\r\n        // 添加对this.reflectorObject和this.reflectorObject.material的null检查\r\n        if (!this.reflectorObject || !this.reflectorObject.material) return;\r\n\r\n        const material = this.reflectorObject.material;\r\n        if (Array.isArray(material)) {\r\n            material.forEach(mat => {\r\n                if (mat instanceof THREE.MeshBasicMaterial || mat instanceof THREE.ShaderMaterial) {\r\n                    mat.transparent = true;\r\n                    mat.opacity = this.opacity;\r\n                }\r\n            });\r\n        } else {\r\n            if (material instanceof THREE.MeshBasicMaterial || material instanceof THREE.ShaderMaterial) {\r\n                material.transparent = true;\r\n                material.opacity = this.opacity;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置模糊强度\r\n     */\r\n    public setBlurStrength(strength: number): void {\r\n        this.blurStrength = Math.max(0, Math.min(1, strength)); // 限制在0-1范围内\r\n        this.needsBlurUpdate = true;\r\n        this.updateBlurParameters();\r\n        console.log(`[MirrorReflectionScript] Blur strength set to: ${this.blurStrength}`);\r\n    }\r\n\r\n    /**\r\n     * 设置模糊半径\r\n     */\r\n    public setBlurRadius(radius: number): void {\r\n        this.blurRadius = Math.max(0, radius); // 确保半径不为负数\r\n        this.needsBlurUpdate = true;\r\n        this.updateBlurParameters();\r\n        console.log(`[MirrorReflectionScript] Blur radius set to: ${this.blurRadius}`);\r\n    }\r\n\r\n    /**\r\n     * 设置渐变模糊中心点\r\n     */\r\n    public setBlurCenter(x: number, y: number): void {\r\n        this.blurCenter.set(x, y);\r\n        console.log(`[MirrorReflectionScript] Blur center set to: (${x}, ${y})`);\r\n    }\r\n\r\n    /**\r\n     * 启用或禁用渐变模糊\r\n     */\r\n    public setGradientBlurEnabled(enabled: boolean): void {\r\n        this.gradientBlur = enabled;\r\n        this.needsBlurUpdate = true;\r\n        console.log(`[MirrorReflectionScript] Gradient blur ${enabled ? 'enabled' : 'disabled'}`);\r\n    }\r\n\r\n    /**\r\n     * 设置反射透明度\r\n     */\r\n    public setOpacity(opacity: number): void {\r\n        this.opacity = opacity;\r\n        this.updateReflectorParameters();\r\n    }\r\n\r\n    /**\r\n     * 设置反射颜色\r\n     */\r\n    public setColor(color: number): void {\r\n        this.color = color;\r\n        // 更新反射器的颜色\r\n        if (this.reflector && this.reflector.material) {\r\n            const material = this.reflector.material;\r\n            if (!Array.isArray(material) &&\r\n                (material as any).uniforms &&\r\n                (material as any).uniforms.color) {\r\n                (material as any).uniforms.color.value = new THREE.Color(color);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取反射器对象\r\n     */\r\n    public getReflectorObject(): Reflector | null {\r\n        return this.reflectorObject;\r\n    }\r\n\r\n    /**\r\n     * 更新函数 - 每帧调用\r\n     */\r\n    public update(): void {\r\n        // 可以在这里添加每帧更新的逻辑\r\n    }\r\n\r\n    /**\r\n     * 渲染前调用 - 应用模糊效果\r\n     */\r\n    public onPreRender(): void {\r\n        // 在渲染前应用模糊效果\r\n        if (this.renderer && this.needsBlurUpdate) {\r\n            this.applyBlur(this.renderer.renderer);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 清理资源\r\n     */\r\n    public dispose(): void {\r\n        // 添加对this.reflectorObject和this.scene的null检查\r\n        if (this.reflectorObject && this.scene) {\r\n            this.scene.remove(this.reflectorObject);\r\n        }\r\n\r\n        // 添加对this.geometry的null检查\r\n        if (this.geometry) {\r\n            this.geometry.dispose();\r\n        }\r\n\r\n        // 添加对this.reflector的null检查\r\n        if (this.reflector && typeof this.reflector.dispose === 'function') {\r\n            this.reflector.dispose();\r\n        }\r\n\r\n        // 清理模糊相关资源\r\n        if (this.blurRenderTarget1) {\r\n            this.blurRenderTarget1.dispose();\r\n        }\r\n        if (this.blurRenderTarget2) {\r\n            this.blurRenderTarget2.dispose();\r\n        }\r\n        if (this.blurMaterial1) {\r\n            this.blurMaterial1.dispose();\r\n        }\r\n        if (this.blurMaterial2) {\r\n            this.blurMaterial2.dispose();\r\n        }\r\n        if (this.blurPlane) {\r\n            this.blurPlane.geometry.dispose();\r\n        }\r\n\r\n        this.reflector = null;\r\n        this.reflectorObject = null;\r\n        this.geometry = null;\r\n        this.blurRenderTarget1 = null;\r\n        this.blurRenderTarget2 = null;\r\n        this.blurPlane = null;\r\n        this.blurMaterial1 = null;\r\n        this.blurMaterial2 = null;\r\n    }\r\n}\r\n","import { THREE,TWEEN} from \"../core/global.ts\";\r\nimport { ScriptBase } from \"../core/ScriptBase\";\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\n\r\n/**\r\n * OrbitControls配置接口\r\n * 定义轨道控制器的所有可配置参数\r\n */\r\nexport interface OrbitControlsConfig {\r\n    /** 是否启用阻尼 */\r\n    enableDamping?: boolean;\r\n    /** 阻尼系数 */\r\n    dampingFactor?: number;\r\n    /** 是否启用缩放 */\r\n    enableZoom?: boolean;\r\n    /** 缩放速度 */\r\n    zoomSpeed?: number;\r\n    /** 是否启用平移 */\r\n    enablePan?: boolean;\r\n    /** 平移速度 */\r\n    panSpeed?: number;\r\n    /** 是否启用旋转 */\r\n    enableRotate?: boolean;\r\n    /** 旋转速度 */\r\n    rotateSpeed?: number;\r\n    /** 是否自动旋转 */\r\n    autoRotate?: boolean;\r\n    /** 自动旋转速度 */\r\n    autoRotateSpeed?: number;\r\n    /** 最小距离 */\r\n    minDistance?: number;\r\n    /** 最大距离 */\r\n    maxDistance?: number;\r\n    /** 最小极角 */\r\n    minPolarAngle?: number;\r\n    /** 最大极角 */\r\n    maxPolarAngle?: number;\r\n    /** 最小方位角 */\r\n    minAzimuthAngle?: number;\r\n    /** 最大方位角 */\r\n    maxAzimuthAngle?: number;\r\n    /** 目标位置 */\r\n    target?: THREE.Vector3;\r\n}\r\n\r\n/**\r\n * 聚焦选项扩展接口\r\n */\r\nexport interface FocusOptions {\r\n    /** 聚焦动画持续时间（毫秒） */\r\n    duration?: number;\r\n    /** 相机距离目标的距离 */\r\n    distance?: number;\r\n    /** 相机的方向（相对于目标的偏移） */\r\n    direction?: THREE.Vector3;\r\n    /** 是否使用平滑动画 */\r\n    smooth?: boolean;\r\n    /** 动画缓动函数类型 */\r\n    easing?: 'linear' | 'easeInOut' | 'easeIn' | 'easeOut';\r\n    /** 完成回调 */\r\n    onComplete?: () => void;\r\n    /** 聚焦模式 */\r\n    mode?: 'center' | 'front' | 'back' | 'top' | 'bottom' | 'left' | 'right';\r\n    /** 偏移量 */\r\n    offset?: THREE.Vector3;\r\n}\r\n\r\n/**\r\n * 预设配置类型\r\n */\r\nexport type PresetName = 'smooth' | 'responsive' | 'presentation' | 'cinema' | 'gaming';\r\n\r\n\r\nexport class OrbitControlsScript extends ScriptBase {\r\n    name = 'OrbitControlsScript';\r\n    /** OrbitControls配置参数 */\r\n    private config: Required<OrbitControlsConfig>;\r\n\r\n    /** Three.js OrbitControls实例 */\r\n    private orbitControls: OrbitControls | null = null;\r\n\r\n    /** 相机引用 */\r\n    private cameraRef: THREE.Camera | null = null;\r\n\r\n    /** 渲染器引用 */\r\n    private rendererRef: THREE.WebGLRenderer | null = null;\r\n\r\n    /** 是否启用状态 */\r\n    private _enabled = true;\r\n\r\n    /** 动画相关 */\r\n    private isAnimating = false;\r\n\r\n    private tween:  TWEEN.Tween | null = null;\r\n\r\n    private tweenBack:  TWEEN.Tween | null = null;\r\n\r\n    private lodPosition: THREE.Vector3 | null = null;\r\n\r\n    /** 预设配置 */\r\n    private presets: Record<PresetName, Partial<OrbitControlsConfig>> = {\r\n        smooth: {\r\n            enableDamping: true,\r\n            dampingFactor: 0.12,\r\n            rotateSpeed: 0.3,\r\n            panSpeed: 1.5,\r\n            zoomSpeed: 0.8\r\n        },\r\n        responsive: {\r\n            enableDamping: true,\r\n            dampingFactor: 0.06,\r\n            rotateSpeed: 0.5,\r\n            panSpeed: 2.5,\r\n            zoomSpeed: 1.2\r\n        },\r\n        presentation: {\r\n            autoRotate: true,\r\n            autoRotateSpeed: 1.0,\r\n            enableDamping: true,\r\n            dampingFactor: 0.08,\r\n            rotateSpeed: 0.4,\r\n            panSpeed: 1.8\r\n        },\r\n        cinema: {\r\n            enableDamping: true,\r\n            dampingFactor: 0.15,\r\n            rotateSpeed: 0.2,\r\n            autoRotateSpeed: 0.5,\r\n            minPolarAngle: Math.PI / 6,\r\n            maxPolarAngle: Math.PI * 5 / 6,\r\n            panSpeed: 1.2\r\n        },\r\n        gaming: {\r\n            enableDamping: true,\r\n            dampingFactor: 0.04,\r\n            rotateSpeed: 0.8,\r\n            panSpeed: 3.5,\r\n            zoomSpeed: 1.5,\r\n            autoRotateSpeed: 2.0\r\n        }\r\n    };\r\n\r\n    /**\r\n     * 构造函数 - 初始化OrbitControls脚本\r\n     *\r\n     * @param options - 可选的配置参数\r\n     */\r\n    constructor(options?: OrbitControlsConfig) {\r\n        super();\r\n        // 合并默认配置和用户配置\r\n        this.config = {\r\n            enableDamping: true,\r\n            dampingFactor: 0.08,\r\n            enableZoom: true,\r\n            zoomSpeed: 1.0,\r\n            enablePan: true,\r\n            panSpeed: 2.0,\r\n            enableRotate: true,\r\n            rotateSpeed: 0.5,\r\n            autoRotate: false,\r\n            autoRotateSpeed: 2.0,\r\n            minDistance: 1,\r\n            maxDistance: 100,\r\n            minPolarAngle: 0,\r\n            maxPolarAngle: Math.PI,\r\n            minAzimuthAngle: -Infinity,\r\n            maxAzimuthAngle: Infinity,\r\n            target: new THREE.Vector3(0, 0, 0),\r\n            ...options\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 脚本启用\r\n     */\r\n    public override onEnable(): void {\r\n        super.onEnable?.();\r\n        if (this.orbitControls) {\r\n            this.orbitControls.enabled = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 脚本初始化 - 核心初始化逻辑\r\n     *\r\n     * 主要任务：\r\n     * 1. 获取场景、相机和渲染器的引用\r\n     * 2. 创建和配置OrbitControls\r\n     * 3. 设置事件监听器\r\n     *\r\n     * @returns Promise<void> - 异步初始化完成的Promise\r\n     */\r\n    public override async start(): Promise<void> {\r\n        super.start?.();\r\n        // 获取相机和渲染器\r\n        try {\r\n            this.cameraRef = this.camera;  // 通过getter获取相机\r\n            this.rendererRef = this.webGLRenderer;  // 通过getter获取渲染器\r\n            // 只有当lodPosition还没有被设置时，才将其初始化为相机的当前位置\r\n            if (!this.lodPosition && this.cameraRef) {\r\n                this.lodPosition = this.cameraRef.position.clone();\r\n            }\r\n        } catch (error) {\r\n            console.warn('[OrbitControlsScript] 无法直接获取相机或渲染器:', error);\r\n        }\r\n\r\n        if (!this.cameraRef || !this.rendererRef) {\r\n            console.warn('[OrbitControlsScript] 无法获取相机或渲染器，将在后续自动检测');\r\n        } else {\r\n            // 创建OrbitControls\r\n            this.createOrbitControls();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 每帧更新 - 更新OrbitControls\r\n     *\r\n     * @param deltaTime - 上一帧到当前帧的时间间隔（秒）\r\n     */\r\n    public override update(deltaTime: number): void {\r\n        super.update?.(deltaTime);\r\n        // 如果相机或渲染器还未获取，尝试重新获取\r\n        if (!this.cameraRef || !this.rendererRef) {\r\n            this.tryAutoSetup();\r\n        }\r\n\r\n        // 更新OrbitControls\r\n        if (this.orbitControls && this._enabled) {\r\n            this.orbitControls.update();\r\n        }\r\n\r\n        // 更新TWEEN动画\r\n        this.tween?.update();\r\n        this.tweenBack?.update();\r\n    }\r\n\r\n    public override onResize(): void {\r\n        super.onResize();\r\n    }\r\n\r\n    /**\r\n     * 脚本禁用\r\n     */\r\n    public override onDisable(): void {\r\n        super.onDisable?.();\r\n        if (this.orbitControls) {\r\n            this.orbitControls.enabled = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 脚本销毁 - 清理所有资源\r\n     */\r\n    public override destroy(): void {\r\n        super.destroy?.();\r\n        // 停止所有动画\r\n        this.stopAnimation();\r\n\r\n        // 销毁OrbitControls\r\n        if (this.orbitControls) {\r\n            this.orbitControls.dispose();\r\n            this.orbitControls = null;\r\n        }\r\n    }\r\n\r\n    // ===========================================\r\n    // 私有方法\r\n    // ===========================================\r\n\r\n    /**\r\n     * 尝试自动设置相机和渲染器\r\n     */\r\n    private tryAutoSetup(): void {\r\n        try {\r\n            if (!this.cameraRef) {\r\n                this.cameraRef = this.camera;  // 通过getter获取相机\r\n            }\r\n\r\n            if (!this.rendererRef) {\r\n                this.rendererRef = this.webGLRenderer;  // 通过getter获取渲染器\r\n            }\r\n\r\n            // 如果都获取到了，创建OrbitControls\r\n            if (this.cameraRef && this.rendererRef && !this.orbitControls) {\r\n                this.createOrbitControls();\r\n            }\r\n        } catch (error) {\r\n            // 静默处理，避免在每次更新时都打印错误\r\n            console.warn('[OrbitControlsScript] 自动设置相机和渲染器时出错:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建OrbitControls\r\n     */\r\n    private createOrbitControls(): void {\r\n        if (!this.cameraRef || !this.rendererRef) {\r\n            console.warn('[OrbitControlsScript] 相机或渲染器不可用');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // 销毁旧的控制器\r\n            if (this.orbitControls) {\r\n                this.orbitControls.dispose();\r\n            }\r\n\r\n            // 创建新的OrbitControls\r\n            this.orbitControls = new OrbitControls(this.cameraRef, this.rendererRef.domElement);\r\n\r\n            // 应用配置\r\n            this.applyConfig();\r\n        } catch (error) {\r\n            console.error('[OrbitControlsScript] 创建OrbitControls失败:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 应用配置到OrbitControls\r\n     */\r\n    private applyConfig(): void {\r\n        if (!this.orbitControls) return;\r\n\r\n        const controls = this.orbitControls;\r\n        const config = this.config;\r\n\r\n        // 基本设置\r\n        controls.enableDamping = config.enableDamping;\r\n        controls.dampingFactor = config.dampingFactor;\r\n        controls.enableZoom = config.enableZoom;\r\n        controls.zoomSpeed = config.zoomSpeed;\r\n        controls.enablePan = config.enablePan;\r\n        controls.panSpeed = config.panSpeed;\r\n        controls.enableRotate = config.enableRotate;\r\n        controls.rotateSpeed = config.rotateSpeed;\r\n        controls.autoRotate = config.autoRotate;\r\n        controls.autoRotateSpeed = config.autoRotateSpeed;\r\n\r\n        // 距离限制\r\n        controls.minDistance = config.minDistance;\r\n        controls.maxDistance = config.maxDistance;\r\n\r\n        // 角度限制\r\n        controls.minPolarAngle = config.minPolarAngle;\r\n        controls.maxPolarAngle = config.maxPolarAngle;\r\n        controls.minAzimuthAngle = config.minAzimuthAngle;\r\n        controls.maxAzimuthAngle = config.maxAzimuthAngle;\r\n\r\n        // 目标位置\r\n        controls.target.copy(config.target);\r\n        controls.update();\r\n    }\r\n\r\n    /**\r\n     * 停止当前动画\r\n     */\r\n    stopAnimation(): void {\r\n        if (this.tween) {\r\n            this.tween.stop();\r\n            this.tween = null;\r\n        }\r\n        if (this.tweenBack) {\r\n            this.tweenBack.stop();\r\n            this.tweenBack = null;\r\n        }\r\n        this.isAnimating = false;\r\n    }\r\n\r\n    /**\r\n     * 动画到指定位置和目标\r\n     */\r\n    private animateToPosition(targetPosition: THREE.Vector3,targetCenter: THREE.Vector3,options: Required<FocusOptions>): void {\r\n        if (!this.cameraRef || !this.orbitControls) return;\r\n        this.stopAnimation();\r\n        this.isAnimating = true;\r\n        const startPosition = this.cameraRef.position.clone();\r\n        const startTarget = this.orbitControls.target.clone();\r\n        this.tween = new TWEEN.Tween({\r\n          x: startPosition.x,\r\n          y: startPosition.y,\r\n          z: startPosition.z,\r\n          targetX: startTarget.x,\r\n          targetY: startTarget.y,\r\n          targetZ: startTarget.z\r\n        })\r\n          .to({\r\n            x: targetPosition.x,\r\n            y: targetPosition.y,\r\n            z: targetPosition.z,\r\n            targetX: targetCenter.x,\r\n            targetY: targetCenter.y,\r\n            targetZ: targetCenter.z\r\n          }, options.duration)\r\n          .easing(this.getTweenEasing(options.easing))\r\n          .onUpdate((object) => {\r\n            this.cameraRef!.position.set(object.x, object.y, object.z);\r\n            this.orbitControls!.target.set(object.targetX, object.targetY, object.targetZ);\r\n            this.orbitControls!.update();\r\n          })\r\n          .onComplete(() => {\r\n            this.isAnimating = false;\r\n            this.config.target.copy(targetCenter);\r\n            options.onComplete();\r\n          });\r\n\r\n        this.tween.start();\r\n    }\r\n\r\n    private getTweenEasing(easing: FocusOptions['easing']): (amount: number) => number {\r\n        switch (easing) {\r\n          case 'linear':\r\n            return TWEEN.Easing.Linear.None;\r\n          case 'easeIn':\r\n            return TWEEN.Easing.Quadratic.In;\r\n          case 'easeOut':\r\n            return TWEEN.Easing.Quadratic.Out;\r\n          case 'easeInOut':\r\n            return TWEEN.Easing.Quadratic.InOut;\r\n          default:\r\n            return TWEEN.Easing.Quadratic.InOut;\r\n        }\r\n    }\r\n\r\n    private calculateBoundingBox(object: THREE.Object3D): THREE.Box3 {\r\n        const box = new THREE.Box3();\r\n\r\n        // 遍历所有子对象来计算包围盒\r\n        object.traverse((child) => {\r\n            if ((child as THREE.Mesh).isMesh) {\r\n                const mesh = child as THREE.Mesh;\r\n                if (mesh.geometry) {\r\n                    // 更新矩阵\r\n                    mesh.updateWorldMatrix(true, false);\r\n                    const geometry = mesh.geometry;\r\n                    if (geometry.boundingBox) {\r\n                        box.union(geometry.boundingBox.clone().applyMatrix4(mesh.matrixWorld));\r\n                    } else {\r\n                        const boundingBox = new THREE.Box3().setFromObject(mesh);\r\n                        box.union(boundingBox);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        // 如果没有找到网格对象，回退到原始对象\r\n        if (box.isEmpty()) {\r\n            box.setFromObject(object);\r\n        }\r\n\r\n        return box;\r\n    }\r\n\r\n    enable(): void {\r\n        this._enabled = true;\r\n        if (this.orbitControls) {\r\n            this.orbitControls.enabled = true;\r\n        }\r\n    }\r\n\r\n    disable(): void {\r\n        this._enabled = false;\r\n        if (this.orbitControls) {\r\n            this.orbitControls.enabled = false;\r\n        }\r\n    }\r\n\r\n    reset(): void {\r\n        if (this.orbitControls) {\r\n            this.orbitControls.reset();\r\n        }\r\n    }\r\n\r\n    updateConfig(newConfig: Partial<OrbitControlsConfig>): void {\r\n        Object.assign(this.config, newConfig);\r\n        this.applyConfig();\r\n    }\r\n\r\n    getConfig(): OrbitControlsConfig {\r\n        return { ...this.config };\r\n    }\r\n\r\n    applyPreset(presetName: PresetName): void {\r\n        const preset = this.presets[presetName];\r\n        if (preset) {\r\n            this.updateConfig(preset);\r\n        } else {\r\n            console.warn(`[OrbitControlsScript] 未知的预设: ${presetName}`);\r\n        }\r\n    }\r\n\r\n    getPresets(): PresetName[] {\r\n        return Object.keys(this.presets) as PresetName[];\r\n    }\r\n\r\n    backLodPosition(targetPosition?: THREE.Vector3, options?: FocusOptions): void {\r\n        // 如果没有提供目标位置，则使用存储的lodPosition\r\n        const positionToUse = targetPosition || this.lodPosition;\r\n\r\n        if (positionToUse && this.cameraRef && this.orbitControls) {\r\n            // 合并默认选项和用户提供的选项\r\n            const focusOptions: FocusOptions = {\r\n                duration: 1000,\r\n                distance: 10,\r\n                direction: new THREE.Vector3(1, 1, 1).normalize(),\r\n                smooth: true,\r\n                easing: 'easeInOut',\r\n                onComplete: () => {},\r\n                mode: 'center',\r\n                offset: new THREE.Vector3(0, 0, 0),\r\n                ...options\r\n            };\r\n\r\n            // 停止当前动画\r\n            this.stopAnimation();\r\n            this.isAnimating = true;\r\n\r\n            // 获取当前位置和目标\r\n            const startPosition = this.cameraRef.position.clone();\r\n            const startTarget = this.orbitControls.target.clone();\r\n\r\n            // 计算目标位置和目标点\r\n            const targetPositionVec = positionToUse.clone();\r\n            // 将目标点设置为原点(0, 0, 0)，与Canvas3D.tsx中设置的一致\r\n            const targetCenter = new THREE.Vector3(0, 0, 0);\r\n\r\n            this.tweenBack = new TWEEN.Tween({\r\n              x: startPosition.x,\r\n              y: startPosition.y,\r\n              z: startPosition.z,\r\n              targetX: startTarget.x,\r\n              targetY: startTarget.y,\r\n              targetZ: startTarget.z\r\n            })\r\n              .to({\r\n                x: targetPositionVec.x,\r\n                y: targetPositionVec.y,\r\n                z: targetPositionVec.z,\r\n                targetX: targetCenter.x,\r\n                targetY: targetCenter.y,\r\n                targetZ: targetCenter.z\r\n              }, focusOptions.duration)\r\n              .easing(this.getTweenEasing(focusOptions.easing))\r\n              .onUpdate((object) => {\r\n                this.cameraRef!.position.set(object.x, object.y, object.z);\r\n                this.orbitControls!.target.set(object.targetX, object.targetY, object.targetZ);\r\n                this.orbitControls!.update();\r\n              })\r\n              .onComplete(() => {\r\n                this.isAnimating = false;\r\n                this.config.target.copy(targetCenter);\r\n                focusOptions.onComplete?.();\r\n              });\r\n\r\n            this.tweenBack.start();\r\n        } else {\r\n            console.warn('[OrbitControlsScript] 无法退回指定位置，缺少必要参数');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 聚焦到指定对象\r\n     *\r\n     * @param object - 要聚焦的3D对象\r\n     * @param options - 聚焦选项\r\n     */\r\n    focusOnObject(object: THREE.Object3D, options: FocusOptions = {}): void {\r\n        if (!this.cameraRef || !this.orbitControls) {\r\n            console.warn('[OrbitControlsScript] 相机或控制器不可用');\r\n            return;\r\n        }\r\n        const defaultOptions: Required<FocusOptions> = {\r\n            duration: 1000,\r\n            distance: 10,\r\n            direction: new THREE.Vector3(1, 1, 1).normalize(),\r\n            smooth: true,\r\n            easing: 'easeInOut',\r\n            onComplete: () => {},\r\n            mode: 'center',\r\n            offset: new THREE.Vector3(0, 0, 0)\r\n        };\r\n\r\n        const finalOptions = { ...defaultOptions, ...options };\r\n\r\n        // 计算对象的包围盒和中心点\r\n        const boundingBox = this.calculateBoundingBox(object);\r\n        const center = boundingBox.getCenter(new THREE.Vector3());\r\n        const size = boundingBox.getSize(new THREE.Vector3());\r\n\r\n        // 根据模式计算相机位置\r\n        let targetPosition: THREE.Vector3;\r\n        const cameraOffset = finalOptions.offset || new THREE.Vector3(0, 0, 0);\r\n\r\n        // 计算合适的距离，确保对象完整显示在视图中\r\n        const maxDim = Math.max(size.x, size.y, size.z);\r\n        const fov = (this.cameraRef as THREE.PerspectiveCamera).fov || 50;\r\n        const autoDistance = maxDim / (2 * Math.tan(THREE.MathUtils.degToRad(fov) / 2)) * 1.5;\r\n        const targetDistance = finalOptions.distance === 10 ? autoDistance : finalOptions.distance;\r\n\r\n        switch (finalOptions.mode) {\r\n            case 'front':\r\n                targetPosition = center.clone().add(new THREE.Vector3(0, 0, 1).multiplyScalar(targetDistance)).add(cameraOffset);\r\n                break;\r\n            case 'back':\r\n                targetPosition = center.clone().add(new THREE.Vector3(0, 0, -1).multiplyScalar(targetDistance)).add(cameraOffset);\r\n                break;\r\n            case 'top':\r\n                targetPosition = center.clone().add(new THREE.Vector3(0, 1, 0).multiplyScalar(targetDistance)).add(cameraOffset);\r\n                break;\r\n            case 'bottom':\r\n                targetPosition = center.clone().add(new THREE.Vector3(0, -1, 0).multiplyScalar(targetDistance)).add(cameraOffset);\r\n                break;\r\n            case 'left':\r\n                targetPosition = center.clone().add(new THREE.Vector3(-1, 0, 0).multiplyScalar(targetDistance)).add(cameraOffset);\r\n                break;\r\n            case 'right':\r\n                targetPosition = center.clone().add(new THREE.Vector3(1, 0, 0).multiplyScalar(targetDistance)).add(cameraOffset);\r\n                break;\r\n            case 'center':\r\n            default:\r\n                targetPosition = center.clone().add(\r\n                    finalOptions.direction.clone().multiplyScalar(targetDistance)\r\n                ).add(cameraOffset);\r\n                break;\r\n        }\r\n        if (!finalOptions.smooth) {\r\n            this.cameraRef.position.copy(targetPosition);\r\n            this.orbitControls.target.copy(center);\r\n            this.orbitControls.update();\r\n            finalOptions.onComplete();\r\n            return;\r\n        }\r\n        this.animateToPosition(targetPosition, center, finalOptions);\r\n    }\r\n\r\n    /**\r\n     * 获取当前相机位置\r\n     */\r\n    getCameraPosition(): THREE.Vector3 | null {\r\n        return this.cameraRef ? this.cameraRef.position.clone() : null;\r\n    }\r\n\r\n    /**\r\n     * 获取当前目标位置\r\n     */\r\n    getTargetPosition(): THREE.Vector3 | null {\r\n        return this.orbitControls ? this.orbitControls.target.clone() : null;\r\n    }\r\n\r\n    /**\r\n     * 获取当前是否正在执行动画\r\n     */\r\n    getIsAnimating(): boolean {\r\n        return this.isAnimating;\r\n    }\r\n\r\n    /**\r\n     * 获取控制器是否启用\r\n     */\r\n    getEnabled(): boolean {\r\n        return this._enabled && this.orbitControls !== null;\r\n    }\r\n\r\n    getControls(): OrbitControls | null {\r\n        return this.orbitControls;\r\n    }\r\n\r\n    /**\r\n     * 设置默认位置\r\n     * @param position - 要设置为默认位置的向量\r\n     */\r\n    setDefaultPosition(position: THREE.Vector3): void {\r\n        this.lodPosition = position.clone();\r\n    }\r\n\r\n    /**\r\n     * 获取默认位置\r\n     */\r\n    getDefaultPosition(): THREE.Vector3 | null {\r\n        return this.lodPosition ? this.lodPosition.clone() : null;\r\n    }\r\n\r\n    /**\r\n     * 更新相机初始位置为当前相机位置\r\n     */\r\n    updateInitialPosition(): void {\r\n        if (this.cameraRef) {\r\n            this.lodPosition = this.cameraRef.position.clone();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置默认相机位置和目标点\r\n     * @param position 相机位置\r\n     * @param target 相机目标点\r\n     */\r\n    setDefaultCameraPosition(position: THREE.Vector3, target: THREE.Vector3): void {\r\n        this.lodPosition = position.clone();\r\n        this.config.target = target.clone();\r\n        if (this.orbitControls) {\r\n            this.orbitControls.target.copy(target);\r\n            this.orbitControls.update();\r\n        }\r\n    }\r\n}\r\n","import { ScriptBase } from \"../core/ScriptBase\";\r\nimport { THREE, CSS2DObject } from \"../core/global.ts\";\r\n\r\n/**\r\n * 场景灯光配置接口\r\n */\r\nexport interface SceneLightingConfig {\r\n    /** 是否启用环境光 */\r\n    enableAmbientLight?: boolean;\r\n    /** 环境光颜色 */\r\n    ambientLightColor?: number;\r\n    /** 环境光地面颜色 */\r\n    ambientLightGroundColor?: number;\r\n    /** 环境光强度 */\r\n    ambientLightIntensity?: number;\r\n    \r\n    /** 是否启用聚光灯 */\r\n    enableSpotLight?: boolean;\r\n    /** 聚光灯颜色 */\r\n    spotLightColor?: number;\r\n    /** 聚光灯强度 */\r\n    spotLightIntensity?: number;\r\n    /** 聚光灯位置 */\r\n    spotLightPosition?: [number, number, number];\r\n    /** 聚光灯目标位置 */\r\n    spotLightTarget?: [number, number, number];\r\n    /** 聚光灯角度 */\r\n    spotLightAngle?: number;\r\n    /** 聚光灯半影 */\r\n    spotLightPenumbra?: number;\r\n    /** 聚光灯衰减 */\r\n    spotLightDecay?: number;\r\n    /** 聚光灯距离 */\r\n    spotLightDistance?: number;\r\n    /** 聚光灯贴图 */\r\n    spotLightMap?: string;\r\n    \r\n    /** 聚光灯阴影设置 */\r\n    spotLightShadow?: {\r\n        enabled?: boolean;\r\n        mapSizeWidth?: number;\r\n        mapSizeHeight?: number;\r\n        cameraNear?: number;\r\n        cameraFar?: number;\r\n        focus?: number;\r\n    };\r\n    \r\n    /** 是否显示灯光辅助器 */\r\n    showLightHelpers?: boolean;\r\n    \r\n    /** 是否显示标签 */\r\n    showLabels?: boolean;\r\n    /** 标签文本 */\r\n    labelContent?: string;\r\n    /** 标签是否可点击 */\r\n    clickableLabels?: boolean;\r\n}\r\n\r\n/**\r\n * 场景灯光脚本类\r\n * 用于在场景中添加和控制环境光和聚光灯\r\n */\r\nexport class SceneLightingScript extends ScriptBase {\r\n    name = 'SceneLightingScript';\r\n\r\n    // 灯光相关属性\r\n    private config: Required<SceneLightingConfig>;\r\n    private ambientLight: THREE.HemisphereLight | null = null;\r\n    private spotLight: THREE.SpotLight | null = null;\r\n    private spotLightHelper: THREE.SpotLightHelper | null = null;\r\n    private textures: { [key: string]: THREE.Texture | null } = { none: null };\r\n    private label: CSS2DObject | null = null;\r\n    private labelElement: HTMLElement | null = null;\r\n    private isLightEnabled: boolean = true;\r\n\r\n    constructor(options?: SceneLightingConfig) {\r\n        super();\r\n\r\n        this.config = {\r\n            enableAmbientLight: true,\r\n            ambientLightColor: 0xffffff,\r\n            ambientLightGroundColor: 0x8d8d8d,\r\n            ambientLightIntensity: 4,\r\n            \r\n            enableSpotLight: true,\r\n            spotLightColor: 0xffffff,\r\n            spotLightIntensity: 100,\r\n            spotLightPosition: [2.5, 5, 2.5],\r\n            spotLightTarget: [0, 0, 0],  // 默认聚焦在地面中心\r\n            spotLightAngle: Math.PI / 2,\r\n            spotLightPenumbra: 1,\r\n            spotLightDecay: 2,\r\n            spotLightDistance: 0,\r\n            spotLightMap: 'colors.jpg',\r\n            \r\n            spotLightShadow: {\r\n                enabled: true,\r\n                mapSizeWidth: 2024,\r\n                mapSizeHeight: 2024,\r\n                cameraNear: 1,\r\n                cameraFar: 0,\r\n                focus: 0\r\n            },\r\n            \r\n            showLightHelpers: true,\r\n            showLabels: true,\r\n            labelContent: '灯光',\r\n            clickableLabels: true,\r\n            ...options\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 脚本初始化时调用\r\n     */\r\n    public override start(): void {\r\n        super.start?.();\r\n        \r\n        // 加载纹理\r\n        this.loadTextures();\r\n        \r\n        // 创建环境光\r\n        if (this.config.enableAmbientLight) {\r\n            this.createAmbientLight();\r\n        }\r\n        \r\n        // 创建聚光灯\r\n        if (this.config.enableSpotLight) {\r\n            this.createSpotLight();\r\n        }\r\n        \r\n        // 创建标签\r\n        if (this.config.showLabels) {\r\n            this.createLabel();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 每帧更新时调用\r\n     */\r\n    public override update(deltaTime: number): void {\r\n        super.update?.(deltaTime);\r\n        \r\n        // 更新灯光辅助器\r\n        if (this.spotLightHelper) {\r\n            this.spotLightHelper.update();\r\n        }\r\n        \r\n        // 更新标签位置\r\n        if (this.label && this.spotLight) {\r\n            this.label.position.copy(this.spotLight.position);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 加载纹理\r\n     */\r\n    private loadTextures(): void {\r\n        try {\r\n            const loader = new THREE.TextureLoader().setPath('/textures/');\r\n            const filenames = ['colors.png','disturb.jpg','uv_grid_opengl.jpg'];\r\n\r\n            for (let i = 0; i < filenames.length; i++) {\r\n                const filename = filenames[i];\r\n                const texture = loader.load(filename);\r\n                texture.minFilter = THREE.LinearFilter;\r\n                texture.magFilter = THREE.LinearFilter;\r\n                texture.generateMipmaps = false;\r\n                texture.colorSpace = THREE.SRGBColorSpace;\r\n                this.textures[filename] = texture;\r\n            }\r\n        } catch (error) {\r\n            console.error('[SceneLightingScript] 加载纹理失败:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建环境光\r\n     */\r\n    private createAmbientLight(): void {\r\n        try {\r\n            if (this.scene) {\r\n                this.ambientLight = new THREE.HemisphereLight(\r\n                    this.config.ambientLightColor,\r\n                    this.config.ambientLightGroundColor,\r\n                    this.config.ambientLightIntensity\r\n                );\r\n                this.scene.add(this.ambientLight);\r\n            }\r\n        } catch (error) {\r\n            console.error('[SceneLightingScript] 创建环境光失败:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建聚光灯\r\n     */\r\n    private createSpotLight(): void {\r\n        try {\r\n            if (this.scene) {\r\n                this.spotLight = new THREE.SpotLight(\r\n                    this.config.spotLightColor,\r\n                    this.config.spotLightIntensity\r\n                );\r\n                \r\n                // 设置位置\r\n                this.spotLight.position.set(\r\n                    this.config.spotLightPosition[0],\r\n                    this.config.spotLightPosition[1],\r\n                    this.config.spotLightPosition[2]\r\n                );\r\n                \r\n                // 设置聚光灯参数\r\n                this.spotLight.angle = this.config.spotLightAngle;\r\n                this.spotLight.penumbra = this.config.spotLightPenumbra;\r\n                this.spotLight.decay = this.config.spotLightDecay;\r\n                this.spotLight.distance = this.config.spotLightDistance;\r\n                \r\n                // 设置聚光灯贴图\r\n                if (this.config.spotLightMap && this.textures[this.config.spotLightMap]) {\r\n                    this.spotLight.map = this.textures[this.config.spotLightMap];\r\n                }\r\n                \r\n                // 设置阴影\r\n                if (this.config.spotLightShadow?.enabled) {\r\n                    this.spotLight.castShadow = true;\r\n                    this.spotLight.shadow.mapSize.width = this.config.spotLightShadow.mapSizeWidth || 2024;\r\n                    this.spotLight.shadow.mapSize.height = this.config.spotLightShadow.mapSizeHeight || 2024;\r\n                    this.spotLight.shadow.camera.near = this.config.spotLightShadow.cameraNear || 1;\r\n                    this.spotLight.shadow.camera.far = this.config.spotLightShadow.cameraFar || 0;\r\n                    this.spotLight.shadow.focus = this.config.spotLightShadow.focus || 0;\r\n                }\r\n                \r\n                // 添加目标对象，使灯光面向指定位置\r\n                const targetObject = new THREE.Object3D();\r\n                targetObject.position.set(\r\n                    this.config.spotLightTarget[0],\r\n                    this.config.spotLightTarget[1],\r\n                    this.config.spotLightTarget[2]\r\n                );\r\n                this.scene.add(targetObject);\r\n                this.spotLight.target = targetObject;\r\n                \r\n                this.scene.add(this.spotLight);\r\n                \r\n                // 创建灯光辅助器\r\n                if (this.config.showLightHelpers && this.spotLight) {\r\n                    this.spotLightHelper = new THREE.SpotLightHelper(this.spotLight);\r\n                    this.scene.add(this.spotLightHelper);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('[SceneLightingScript] 创建聚光灯失败:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建标签\r\n     */\r\n    private createLabel(): void {\r\n        try {\r\n            if (this.spotLight && this.scene) {\r\n                // 创建标签元素\r\n                this.labelElement = document.createElement('div');\r\n                this.labelElement.className = 'scene-light-label';\r\n                this.labelElement.textContent = this.config.labelContent || '灯光';\r\n                this.labelElement.style.padding = '8px 12px';\r\n                this.labelElement.style.background = 'rgba(0, 0, 0, 0.85)';\r\n                this.labelElement.style.color = '#ffffff';\r\n                this.labelElement.style.borderRadius = '8px';\r\n                this.labelElement.style.fontSize = '14px';\r\n                this.labelElement.style.fontFamily = 'Arial, \"Microsoft YaHei\", sans-serif';\r\n                this.labelElement.style.fontWeight = '500';\r\n                this.labelElement.style.whiteSpace = 'nowrap';\r\n                this.labelElement.style.userSelect = 'none';\r\n                this.labelElement.style.border = '1px solid rgba(255, 255, 255, 0.15)';\r\n                this.labelElement.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.4)';\r\n                this.labelElement.style.backdropFilter = 'blur(8px)';\r\n                this.labelElement.style.pointerEvents = this.config.clickableLabels ? 'auto' : 'none';\r\n                this.labelElement.style.zIndex = '1000';\r\n                this.labelElement.style.cursor = this.config.clickableLabels ? 'pointer' : 'default';\r\n\r\n                // 添加悬停效果\r\n                if (this.config.clickableLabels) {\r\n                    this.labelElement.addEventListener('mouseenter', () => {\r\n                        this.labelElement!.style.transform = 'scale(1.05)';\r\n                        this.labelElement!.style.boxShadow = '0 6px 16px rgba(0, 0, 0, 0.5)';\r\n                    });\r\n\r\n                    this.labelElement.addEventListener('mouseleave', () => {\r\n                        this.labelElement!.style.transform = 'scale(1)';\r\n                        this.labelElement!.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.4)';\r\n                    });\r\n\r\n                    // 添加点击事件\r\n                    this.labelElement.addEventListener('click', (event) => {\r\n                        event.stopPropagation();\r\n                        this.toggleLight();\r\n                    });\r\n                }\r\n\r\n                // 创建CSS2DObject\r\n                this.label = new CSS2DObject(this.labelElement);\r\n                this.label.position.copy(this.spotLight.position);\r\n                \r\n                // 将标签添加到场景中\r\n                this.scene.add(this.label);\r\n            }\r\n        } catch (error) {\r\n            console.error('[SceneLightingScript] 创建标签失败:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新环境光配置\r\n     */\r\n    public updateAmbientLightConfig(newConfig: Partial<{\r\n        color: number;\r\n        groundColor: number;\r\n        intensity: number;\r\n    }>): void {\r\n        if (!this.ambientLight) return;\r\n        \r\n        if (newConfig.color !== undefined) {\r\n            this.ambientLight.color.set(newConfig.color);\r\n        }\r\n        \r\n        if (newConfig.groundColor !== undefined) {\r\n            this.ambientLight.groundColor.set(newConfig.groundColor);\r\n        }\r\n        \r\n        if (newConfig.intensity !== undefined) {\r\n            this.ambientLight.intensity = newConfig.intensity;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新聚光灯目标位置\r\n     */\r\n    public updateSpotLightTarget(target: [number, number, number]): void {\r\n        if (this.spotLight) {\r\n            (this.spotLight.target as THREE.Object3D).position.set(target[0], target[1], target[2]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新聚光灯配置\r\n     */\r\n    public updateSpotLightConfig(newConfig: Partial<{\r\n        color: number;\r\n        intensity: number;\r\n        position: [number, number, number];\r\n        target: [number, number, number];\r\n        angle: number;\r\n        penumbra: number;\r\n        decay: number;\r\n        distance: number;\r\n    }>): void {\r\n        if (!this.spotLight) return;\r\n        \r\n        if (newConfig.color !== undefined) {\r\n            this.spotLight.color.set(newConfig.color);\r\n        }\r\n        \r\n        if (newConfig.intensity !== undefined) {\r\n            this.spotLight.intensity = newConfig.intensity;\r\n        }\r\n        \r\n        if (newConfig.position !== undefined) {\r\n            this.spotLight.position.set(\r\n                newConfig.position[0],\r\n                newConfig.position[1],\r\n                newConfig.position[2]\r\n            );\r\n            // 更新标签位置\r\n            if (this.label) {\r\n                this.label.position.copy(this.spotLight.position);\r\n            }\r\n        }\r\n        \r\n        if (newConfig.target !== undefined) {\r\n            (this.spotLight.target as THREE.Object3D).position.set(\r\n                newConfig.target[0],\r\n                newConfig.target[1],\r\n                newConfig.target[2]\r\n            );\r\n        }\r\n        \r\n        if (newConfig.angle !== undefined) {\r\n            this.spotLight.angle = newConfig.angle;\r\n        }\r\n        \r\n        if (newConfig.penumbra !== undefined) {\r\n            this.spotLight.penumbra = newConfig.penumbra;\r\n        }\r\n        \r\n        if (newConfig.decay !== undefined) {\r\n            this.spotLight.decay = newConfig.decay;\r\n        }\r\n        \r\n        if (newConfig.distance !== undefined) {\r\n            this.spotLight.distance = newConfig.distance;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新聚光灯阴影配置\r\n     */\r\n    public updateSpotLightShadowConfig(newConfig: Partial<{\r\n        enabled: boolean;\r\n        mapSizeWidth: number;\r\n        mapSizeHeight: number;\r\n        cameraNear: number;\r\n        cameraFar: number;\r\n        focus: number;\r\n    }>): void {\r\n        if (!this.spotLight) return;\r\n        \r\n        if (newConfig.enabled !== undefined) {\r\n            this.spotLight.castShadow = newConfig.enabled;\r\n        }\r\n        \r\n        if (newConfig.mapSizeWidth !== undefined) {\r\n            this.spotLight.shadow.mapSize.width = newConfig.mapSizeWidth;\r\n        }\r\n        \r\n        if (newConfig.mapSizeHeight !== undefined) {\r\n            this.spotLight.shadow.mapSize.height = newConfig.mapSizeHeight;\r\n        }\r\n        \r\n        if (newConfig.cameraNear !== undefined) {\r\n            this.spotLight.shadow.camera.near = newConfig.cameraNear;\r\n        }\r\n        \r\n        if (newConfig.cameraFar !== undefined) {\r\n            this.spotLight.shadow.camera.far = newConfig.cameraFar;\r\n        }\r\n        \r\n        if (newConfig.focus !== undefined) {\r\n            this.spotLight.shadow.focus = newConfig.focus;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置标签内容\r\n     */\r\n    public setLabelContent(content: string): void {\r\n        this.config.labelContent = content;\r\n        if (this.labelElement) {\r\n            this.labelElement.textContent = content;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 显示/隐藏标签\r\n     */\r\n    public setShowLabels(show: boolean): void {\r\n        this.config.showLabels = show;\r\n        if (this.label) {\r\n            this.label.visible = show;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置标签是否可点击\r\n     */\r\n    public setClickableLabels(clickable: boolean): void {\r\n        this.config.clickableLabels = clickable;\r\n        if (this.labelElement) {\r\n            this.labelElement.style.pointerEvents = clickable ? 'auto' : 'none';\r\n            this.labelElement.style.cursor = clickable ? 'pointer' : 'default';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置聚光灯聚焦到特定对象\r\n     */\r\n    public focusSpotLightOn(object: THREE.Object3D): void {\r\n        if (this.spotLight) {\r\n            this.spotLight.target = object;\r\n            // 更新辅助器\r\n            if (this.spotLightHelper) {\r\n                this.spotLightHelper.update();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取聚光灯对象\r\n     */\r\n    public getSpotLight(): THREE.SpotLight | null {\r\n        return this.spotLight;\r\n    }\r\n\r\n    /**\r\n     * 获取聚光灯辅助器对象\r\n     */\r\n    public getSpotLightHelper(): THREE.SpotLightHelper | null {\r\n        return this.spotLightHelper;\r\n    }\r\n\r\n    /**\r\n     * 启用或禁用环境光\r\n     */\r\n    public setAmbientLightEnabled(enabled: boolean): void {\r\n        if (enabled && !this.ambientLight) {\r\n            this.createAmbientLight();\r\n        } else if (!enabled && this.ambientLight) {\r\n            if (this.scene) {\r\n                this.scene.remove(this.ambientLight);\r\n            }\r\n            this.ambientLight = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 启用或禁用聚光灯\r\n     */\r\n    public setSpotLightEnabled(enabled: boolean): void {\r\n        if (enabled && !this.spotLight) {\r\n            this.createSpotLight();\r\n        } else if (!enabled && this.spotLight) {\r\n            if (this.scene) {\r\n                this.scene.remove(this.spotLight);\r\n                if (this.spotLightHelper) {\r\n                    this.scene.remove(this.spotLightHelper);\r\n                    this.spotLightHelper = null;\r\n                }\r\n                if (this.label) {\r\n                    this.scene.remove(this.label);\r\n                    this.label = null;\r\n                    this.labelElement = null;\r\n                }\r\n            }\r\n            this.spotLight = null;\r\n        }\r\n        \r\n        // 更新灯光状态\r\n        this.isLightEnabled = enabled;\r\n        this.updateLabelStyle();\r\n    }\r\n\r\n    /**\r\n     * 获取环境光对象\r\n     */\r\n    public getAmbientLight(): THREE.HemisphereLight | null {\r\n        return this.ambientLight;\r\n    }\r\n\r\n    /**\r\n     * 切换灯光开关\r\n     */\r\n    public toggleLight(): void {\r\n        this.isLightEnabled = !this.isLightEnabled;\r\n        \r\n        // 控制环境光\r\n        if (this.ambientLight) {\r\n            this.ambientLight.visible = this.isLightEnabled;\r\n        }\r\n        \r\n        // 控制聚光灯\r\n        if (this.spotLight) {\r\n            this.spotLight.visible = this.isLightEnabled;\r\n            this.spotLight.intensity = this.isLightEnabled ? this.config.spotLightIntensity : 0;\r\n        }\r\n        \r\n        // 控制辅助器\r\n        if (this.spotLightHelper) {\r\n            this.spotLightHelper.visible = this.isLightEnabled;\r\n        }\r\n        \r\n        // 更新标签样式\r\n        this.updateLabelStyle();\r\n        \r\n        console.log(`[SceneLightingScript] 灯光已${this.isLightEnabled ? '开启' : '关闭'}`);\r\n    }\r\n\r\n    /**\r\n     * 更新标签样式以反映灯光状态\r\n     */\r\n    private updateLabelStyle(): void {\r\n        if (this.labelElement) {\r\n            // 根据灯光状态更新背景色\r\n            if (this.isLightEnabled) {\r\n                this.labelElement.style.background = 'rgba(0, 0, 0, 0.85)';\r\n                this.labelElement.style.border = '1px solid rgba(255, 255, 255, 0.15)';\r\n            } else {\r\n                this.labelElement.style.background = 'rgba(100, 100, 100, 0.85)';\r\n                this.labelElement.style.border = '1px solid rgba(150, 150, 150, 0.15)';\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 脚本销毁时调用\r\n     */\r\n    public override destroy(): void {\r\n        super.destroy?.();\r\n        \r\n        // 清理环境光\r\n        if (this.ambientLight && this.scene) {\r\n            this.scene.remove(this.ambientLight);\r\n        }\r\n        \r\n        // 清理聚光灯\r\n        if (this.spotLight && this.scene) {\r\n            // 清理目标对象\r\n            if (this.spotLight.target && this.spotLight.target !== this.scene) {\r\n                this.scene.remove(this.spotLight.target);\r\n            }\r\n            this.scene.remove(this.spotLight);\r\n        }\r\n        \r\n        // 清理聚光灯辅助器\r\n        if (this.spotLightHelper && this.scene) {\r\n            this.scene.remove(this.spotLightHelper);\r\n        }\r\n        \r\n        // 清理标签\r\n        if (this.label && this.scene) {\r\n            this.scene.remove(this.label);\r\n        }\r\n        \r\n        // 清理纹理\r\n        for (const key in this.textures) {\r\n            if (this.textures[key]) {\r\n                this.textures[key]?.dispose();\r\n            }\r\n        }\r\n        \r\n        this.ambientLight = null;\r\n        this.spotLight = null;\r\n        this.spotLightHelper = null;\r\n        this.label = null;\r\n        this.labelElement = null;\r\n        this.textures = { none: null };\r\n    }\r\n}","import { THREE } from \"../core/global.ts\";\r\nimport { ScriptBase } from \"../core/ScriptBase\";\r\nimport { UnrealBloomPass } from '../core/global';\r\n\r\n/**\r\n * Bloom效果脚本\r\n * 演示如何创建一个具体后处理效果脚本\r\n */\r\nexport class BloomEffectScript extends ScriptBase {\r\n    // Bloom效果参数\r\n    private strength: number = 0.5;\r\n    private radius: number = 0.4;\r\n    private threshold: number = 0.85;\r\n    private pass: any = null;\r\n\r\n    constructor(strength?: number, radius?: number, threshold?: number) {\r\n        super();\r\n        this.name = \"BloomEffectScript\";\r\n\r\n        if (strength !== undefined) this.strength = strength;\r\n        if (radius !== undefined) this.radius = radius;\r\n        if (threshold !== undefined) this.threshold = threshold;\r\n    }\r\n\r\n    /**\r\n     * 当脚本被添加到渲染器时调用\r\n     */\r\n    public override awake(): void {\r\n        super.awake?.();\r\n\r\n        // 创建Bloom通道\r\n        this.createPass();\r\n    }\r\n\r\n    /**\r\n     * 当脚本变为启用和激活状态时调用\r\n     */\r\n    public override onEnable(): void {\r\n        super.onEnable?.();\r\n\r\n        // 如果通道已创建，添加到Composer中\r\n        if (this.pass && this.renderer) {\r\n            const composer = this.renderer.getPostProcessingComposer();\r\n            if (composer) {\r\n                this.renderer.addPostProcessingPass(this.pass);\r\n                console.log('[BloomEffectScript] Bloom pass enabled and added to composer');\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 当脚本变为禁用或非激活状态时调用\r\n     */\r\n    public override onDisable(): void {\r\n        super.onDisable?.();\r\n\r\n        // 从Composer中移除通道\r\n        if (this.pass && this.renderer) {\r\n            this.renderer.removePostProcessingPass(this.pass);\r\n            console.log('[BloomEffectScript] Bloom pass disabled and removed from composer');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 脚本销毁时调用\r\n     */\r\n    public override destroy(): void {\r\n        super.destroy?.();\r\n\r\n        // 从Composer中移除通道\r\n        if (this.pass && this.renderer) {\r\n            this.renderer.removePostProcessingPass(this.pass);\r\n        }\r\n\r\n        // 清理通道资源\r\n        if (this.pass && typeof this.pass.dispose === 'function') {\r\n            this.pass.dispose();\r\n            this.pass = null;\r\n        }\r\n\r\n        console.log('[BloomEffectScript] Bloom pass destroyed');\r\n    }\r\n\r\n    /**\r\n     * 创建Bloom通道\r\n     */\r\n    private createPass(): void {\r\n        try {\r\n            if (this.renderer) {\r\n                // 创建Vector2对象而不是使用字面量对象\r\n                const size = new THREE.Vector2(window.innerWidth, window.innerHeight);\r\n                console.log('[BloomEffectScript] Creating Bloom pass with params:', {\r\n                    size: `${size.x}x${size.y}`,\r\n                    strength: this.strength,\r\n                    radius: this.radius,\r\n                    threshold: this.threshold\r\n                });\r\n\r\n                this.pass = new UnrealBloomPass(\r\n                    size,\r\n                    this.strength,\r\n                    this.radius,\r\n                    this.threshold\r\n                );\r\n\r\n                // 如果脚本已经启用，立即将通道添加到composer中\r\n                if (this.renderer.isPostProcessingEnabled()) {\r\n                    this.renderer.addPostProcessingPass(this.pass);\r\n                    console.log('[BloomEffectScript] Bloom pass created and added to composer');\r\n                } else {\r\n                    console.log('[BloomEffectScript] Bloom pass created but post-processing is not enabled');\r\n                }\r\n            } else {\r\n                console.warn('[BloomEffectScript] Renderer not available when creating Bloom pass');\r\n            }\r\n        } catch (error) {\r\n            console.error('[BloomEffectScript] Failed to create Bloom pass:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新Bloom参数\r\n     */\r\n    public updateParameters(strength?: number, radius?: number, threshold?: number): void {\r\n        if (strength !== undefined) this.strength = strength;\r\n        if (radius !== undefined) this.radius = radius;\r\n        if (threshold !== undefined) this.threshold = threshold;\r\n\r\n        // 更新通道参数\r\n        if (this.pass) {\r\n            if (strength !== undefined) this.pass.strength = strength;\r\n            if (radius !== undefined) this.pass.radius = radius;\r\n            if (threshold !== undefined) this.pass.threshold = threshold;\r\n\r\n            console.log('[BloomEffectScript] Bloom parameters updated:', {\r\n                strength: strength !== undefined ? strength : this.strength,\r\n                radius: radius !== undefined ? radius : this.radius,\r\n                threshold: threshold !== undefined ? threshold : this.threshold\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 每一帧更新时调用\r\n     */\r\n    public override update(deltaTime: number): void {\r\n        super.update?.(deltaTime);\r\n\r\n        // 可以在这里添加基于时间的动画效果\r\n        // 例如：动态调整Bloom强度\r\n    }\r\n\r\n    /**\r\n     * 每一帧在 update 调用之后调用\r\n     */\r\n    public override lateUpdate(deltaTime: number): void {\r\n        super.lateUpdate?.(deltaTime);\r\n    }\r\n\r\n    /**\r\n     * 获取通道实例\r\n     */\r\n    public getPass(): any {\r\n        return this.pass;\r\n    }\r\n}\r\n","import { ScriptBase } from \"../core/ScriptBase\";\r\nimport {THREE, CSS2DObject, RectAreaLightUniformsLib, RectAreaLightHelper, TWEEN} from \"../core/global.ts\";\r\n\r\n\r\n/**\r\n * 矩形区域光配置接口\r\n */\r\nexport interface RectAreaLightConfig {\r\n    /** 是否启用矩形区域光 */\r\n    enabled?: boolean;\r\n    /** 矩形区域光颜色 */\r\n    color?: THREE.Color;\r\n    /** 矩形区域光强度 */\r\n    intensity?: number;\r\n    /** 矩形区域光宽度 */\r\n    width?: number;\r\n    /** 矩形区域光高度 */\r\n    height?: number;\r\n    /** 矩形区域光位置 */\r\n    position?: [number, number, number];\r\n    /** 矩形区域光旋转 */\r\n    rotation?: [number, number, number];\r\n    /** 是否显示灯光辅助器 */\r\n    showLightHelpers?: boolean;\r\n    /** 是否显示标签 */\r\n    showLabels?: boolean;\r\n    /** 标签文本 */\r\n    labelContent?: string;\r\n    /** 标签是否可点击 */\r\n    clickableLabels?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * 矩形区域光脚本类\r\n * 用于在场景中添加和控制矩形区域光\r\n *\r\n * 提供以下主要功能：\r\n * - 创建和配置矩形区域光\r\n * - 控制灯光开关（开灯、关灯、切换）\r\n * - 管理标签显示和交互\r\n * - 控制灯光辅助器显示\r\n */\r\nexport class RectAreaLightScript extends ScriptBase {\r\n    name = 'RectAreaLightScript';\r\n\r\n    // 灯光相关属性\r\n    private config: Required<RectAreaLightConfig>;\r\n    private rectAreaLight: THREE.RectAreaLight | null = null;\r\n    private rectAreaLightHelper: any | null = null;\r\n    private label: CSS2DObject | null = null;\r\n    private labelElement: HTMLElement | null = null;\r\n    private isLightEnabled: boolean = true;\r\n    private isTweenEnabled: boolean = false;\r\n    private static uniformsLibInitialized: boolean = false;\r\n    private openTweens: TWEEN.Tween | null = null;\r\n    private closeTweens: TWEEN.Tween | null = null;\r\n\r\n\r\n    constructor(options?: RectAreaLightConfig) {\r\n        super();\r\n\r\n        this.config = {\r\n            enabled: true,\r\n            color: new THREE.Color('#6b828a'),\r\n            intensity: 1,\r\n            width: 10,\r\n            height: 10,\r\n            position: [0, 5, 0],\r\n            rotation: [0, 0, 0],\r\n            showLightHelpers: true,\r\n            showLabels: true,\r\n            labelContent: '矩形区域光',\r\n            clickableLabels: true,\r\n            ...options\r\n        };\r\n\r\n        // 默认情况下灯光是关闭的\r\n        this.isLightEnabled = false;\r\n    }\r\n\r\n    /**\r\n     * 脚本初始化时调用\r\n     */\r\n    public override start(): void {\r\n        super.start?.();\r\n\r\n        // 初始化RectAreaLightUniformsLib（只需要初始化一次）\r\n        if (!RectAreaLightScript.uniformsLibInitialized) {\r\n            RectAreaLightUniformsLib.init();\r\n            RectAreaLightScript.uniformsLibInitialized = true;\r\n        }\r\n\r\n        // 创建矩形区域光\r\n        if (this.config.enabled) {\r\n            this.createRectAreaLight();\r\n            // 确保灯光初始化为关闭状态\r\n            if (this.rectAreaLight) {\r\n                this.rectAreaLight.visible = false;\r\n                this.rectAreaLight.intensity = 0;\r\n            }\r\n        }\r\n\r\n        // 创建标签\r\n        if (this.config.showLabels) {\r\n            this.createLabel();\r\n            // 更新标签样式以反映初始关闭状态\r\n            this.updateLabelStyle();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 每帧更新时调用\r\n     */\r\n    public override update(deltaTime: number): void {\r\n        super.update?.(deltaTime);\r\n\r\n        // 更新标签位置\r\n        if (this.label && this.rectAreaLight) {\r\n            this.label.position.copy(this.rectAreaLight.position);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建矩形区域光\r\n     */\r\n    private createRectAreaLight(): void {\r\n        try {\r\n            if (this.scene) {\r\n                // 创建矩形区域光\r\n                this.rectAreaLight = new THREE.RectAreaLight(\r\n                    this.config.color,\r\n                    this.config.intensity,\r\n                    this.config.width,\r\n                    this.config.height\r\n                );\r\n\r\n                // 设置位置\r\n                this.rectAreaLight.position.set(\r\n                    this.config.position[0],\r\n                    this.config.position[1],\r\n                    this.config.position[2]\r\n                );\r\n\r\n                // 设置旋转\r\n                this.rectAreaLight.rotation.set(\r\n                    this.config.rotation[0],\r\n                    this.config.rotation[1],\r\n                    this.config.rotation[2]\r\n                );\r\n\r\n                this.scene.add(this.rectAreaLight);\r\n\r\n                // 创建灯光辅助器\r\n                if (this.config.showLightHelpers && this.rectAreaLight) {\r\n                    this.rectAreaLightHelper = new RectAreaLightHelper(this.rectAreaLight!);\r\n                        this.scene!.add(this.rectAreaLightHelper);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('[RectAreaLightScript] 创建矩形区域光失败:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建标签\r\n     */\r\n    private createLabel(): void {\r\n        try {\r\n            if (this.rectAreaLight && this.scene) {\r\n                // 创建标签元素\r\n                this.labelElement = document.createElement('div');\r\n                this.labelElement.className = 'rect-area-light-label';\r\n\r\n                // 创建图标元素\r\n                const iconElement = document.createElement('img');\r\n                iconElement.className = 'rect-area-light-icon';\r\n                iconElement.style.marginRight = '6px'; // 减小右边距\r\n                iconElement.style.width = '18px'; // 稍微减小图片尺寸\r\n                iconElement.style.height = '18px'; // 稍微减小图片尺寸\r\n                iconElement.style.objectFit = 'contain';\r\n\r\n                // 创建文本元素\r\n                const textElement = document.createElement('span');\r\n                textElement.className = 'rect-area-light-text';\r\n                textElement.textContent = this.config.labelContent || '矩形区域光';\r\n\r\n                // 将图标和文本添加到标签元素中\r\n                this.labelElement.appendChild(iconElement);\r\n                this.labelElement.appendChild(textElement);\r\n\r\n                // 设置标签整体样式 - LiquidGlass效果，减小内边距使标签更紧凑\r\n                this.labelElement.style.display = 'flex';\r\n                this.labelElement.style.alignItems = 'center';\r\n                this.labelElement.style.padding = '6px 10px'; // 显著减小内边距\r\n                this.labelElement.style.background = 'rgba(255, 255, 255, 0.05)';\r\n                this.labelElement.style.color = '#ffffff';\r\n                this.labelElement.style.borderRadius = '10px'; // 稍稍微减小圆角\r\n                this.labelElement.style.fontSize = '12px'; // 保持较小字体\r\n                this.labelElement.style.fontFamily = 'Arial, \"Microsoft YaHei\", sans-serif';\r\n                this.labelElement.style.fontWeight = '500';\r\n                this.labelElement.style.whiteSpace = 'nowrap';\r\n                this.labelElement.style.userSelect = 'none';\r\n                this.labelElement.style.border = '1px solid rgba(255, 255, 255, 0.1)';\r\n                this.labelElement.style.boxShadow = `\r\n                    0 4px 30px rgba(0, 0, 0, 0.1),\r\n                    inset 0 0 10px rgba(255, 255, 255, 0.1)\r\n                `;\r\n                this.labelElement.style.backdropFilter = 'blur(10px)';\r\n                // 使用类型断言来设置Safari兼容的backdrop-filter\r\n                (this.labelElement.style as any).webkitBackdropFilter = 'blur(10px)';\r\n                this.labelElement.style.pointerEvents = this.config.clickableLabels ? 'auto' : 'none';\r\n                this.labelElement.style.zIndex = '1000';\r\n                this.labelElement.style.cursor = this.config.clickableLabels ? 'pointer' : 'default';\r\n                this.labelElement.style.position = 'relative';\r\n                this.labelElement.style.overflow = 'hidden';\r\n                this.labelElement.style.transition = 'all 0.1s ease';\r\n                this.labelElement.style.opacity = '1'; // 添加初始opacity值\r\n\r\n                // 添加LiquidGlass效果的before伪元素样式\r\n                const beforeElement = document.createElement('div');\r\n                beforeElement.style.position = 'absolute';\r\n                beforeElement.style.top = '0';\r\n                beforeElement.style.left = '0';\r\n                beforeElement.style.right = '0';\r\n                beforeElement.style.bottom = '0';\r\n                beforeElement.style.background = 'linear-gradient(45deg, rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0.01))';\r\n                beforeElement.style.borderRadius = '10px';\r\n                beforeElement.style.zIndex = '-1';\r\n                beforeElement.style.pointerEvents = 'none';\r\n                this.labelElement.appendChild(beforeElement);\r\n\r\n                // 添加LiquidGlass效果的after伪元素样式\r\n                const afterElement = document.createElement('div');\r\n                afterElement.style.position = 'absolute';\r\n                afterElement.style.top = '0';\r\n                afterElement.style.left = '0';\r\n                afterElement.style.right = '0';\r\n                afterElement.style.bottom = '0';\r\n                afterElement.style.background = 'radial-gradient(circle at center, rgba(255, 255, 255, 0.2) 0%, transparent 70%)';\r\n                afterElement.style.borderRadius = '10px';\r\n                afterElement.style.zIndex = '-1';\r\n                afterElement.style.pointerEvents = 'none';\r\n                this.labelElement.appendChild(afterElement);\r\n\r\n                // 添加点击事件\r\n                if (this.config.clickableLabels) {\r\n                    // 添加点击事件\r\n                    this.labelElement.addEventListener('click', (event) => {\r\n                        event.stopPropagation();\r\n                        this.toggleLight();\r\n                    });\r\n                }\r\n\r\n                // 创建CSS2DObject\r\n                this.label = new CSS2DObject(this.labelElement);\r\n                this.label.position.copy(this.rectAreaLight.position);\r\n\r\n                // 将标签添加到场景中\r\n                this.scene.add(this.label);\r\n\r\n                // 初始化图标状态\r\n                this.updateLabelIcon();\r\n            }\r\n        } catch (error) {\r\n            console.error('[RectAreaLightScript] 创建标签失败:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新矩形区域光配置\r\n     */\r\n    public updateConfig(newConfig: Partial<RectAreaLightConfig>): void {\r\n        if (!this.rectAreaLight) return;\r\n\r\n        if (newConfig.color !== undefined) {\r\n            this.rectAreaLight.color.set(newConfig.color);\r\n        }\r\n\r\n        if (newConfig.intensity !== undefined) {\r\n            this.rectAreaLight.intensity = newConfig.intensity;\r\n        }\r\n\r\n        if (newConfig.width !== undefined) {\r\n            this.rectAreaLight.width = newConfig.width;\r\n        }\r\n\r\n        if (newConfig.height !== undefined) {\r\n            this.rectAreaLight.height = newConfig.height;\r\n        }\r\n\r\n        if (newConfig.position !== undefined) {\r\n            this.rectAreaLight.position.set(\r\n                newConfig.position[0],\r\n                newConfig.position[1],\r\n                newConfig.position[2]\r\n            );\r\n            // 更新标签位置\r\n            if (this.label) {\r\n                this.label.position.copy(this.rectAreaLight.position);\r\n            }\r\n        }\r\n\r\n        if (newConfig.rotation !== undefined) {\r\n            this.rectAreaLight.rotation.set(\r\n                newConfig.rotation[0],\r\n                newConfig.rotation[1],\r\n                newConfig.rotation[2]\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置标签内容\r\n     */\r\n    public setLabelContent(content: string): void {\r\n        this.config.labelContent = content;\r\n        if (this.labelElement) {\r\n            this.labelElement.textContent = content;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 显示/隐藏标签\r\n     */\r\n    public setShowLabels(show: boolean): void {\r\n        this.config.showLabels = show;\r\n        if (this.label && this.labelElement) {\r\n            // 确保过渡效果的一致性\r\n            this.labelElement.style.transition = 'opacity 0.3s ease-in-out';\r\n\r\n            if (show) {\r\n                // 渐显效果\r\n                this.label.visible = true;\r\n                // 强制重绘后触发动画\r\n                requestAnimationFrame(() => {\r\n                    this.labelElement!.style.opacity = '1';\r\n                });\r\n            } else {\r\n                // 渐隐效果\r\n                this.labelElement.style.opacity = '0';\r\n\r\n                // 延迟隐藏标签，等动画完成\r\n                setTimeout(() => {\r\n                    if (this.label) {\r\n                        this.label.visible = false;\r\n                    }\r\n                }, 300);\r\n            }\r\n        } else if (this.label) {\r\n            // 如果没有labelElement，直接设置visible属性\r\n            this.label.visible = show;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置标签是否可点击\r\n     */\r\n    public setClickableLabels(clickable: boolean): void {\r\n        this.config.clickableLabels = clickable;\r\n        if (this.labelElement) {\r\n            this.labelElement.style.pointerEvents = clickable ? 'auto' : 'none';\r\n            this.labelElement.style.cursor = clickable ? 'pointer' : 'default';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取矩形区域光对象\r\n     */\r\n    public getRectAreaLight(): THREE.RectAreaLight | null {\r\n        return this.rectAreaLight;\r\n    }\r\n\r\n    /**\r\n     * 获取矩形区域光辅助器对象\r\n     */\r\n    public getRectAreaLightHelper(): any | null {\r\n        return this.rectAreaLightHelper;\r\n    }\r\n\r\n    /**\r\n     * 启用或禁用矩形区域光\r\n     */\r\n    public setEnabled(enabled: boolean): void {\r\n        if (enabled && !this.rectAreaLight) {\r\n            this.createRectAreaLight();\r\n        } else if (!enabled && this.rectAreaLight) {\r\n            if (this.scene) {\r\n                this.scene.remove(this.rectAreaLight);\r\n                if (this.rectAreaLightHelper) {\r\n                    this.scene.remove(this.rectAreaLightHelper);\r\n                    this.rectAreaLightHelper = null;\r\n                }\r\n                if (this.label) {\r\n                    this.scene.remove(this.label);\r\n                    this.label = null;\r\n                    this.labelElement = null;\r\n                }\r\n            }\r\n            this.rectAreaLight = null;\r\n        }\r\n\r\n        // 更新灯光状态\r\n        this.isLightEnabled = enabled;\r\n        this.updateLabelStyle();\r\n    }\r\n\r\n    /**\r\n     * 切换灯光开关\r\n     */\r\n    public toggleLight(): void {\r\n        this.isLightEnabled = !this.isLightEnabled;\r\n\r\n        // 控制矩形区域光\r\n        if (this.rectAreaLight) {\r\n            this.rectAreaLight.visible = this.isLightEnabled;\r\n            this.rectAreaLight.intensity = this.isLightEnabled ? this.config.intensity : 0;\r\n        }\r\n\r\n        // 控制辅助器\r\n        if (this.rectAreaLightHelper) {\r\n            this.rectAreaLightHelper.visible = this.isLightEnabled;\r\n        }\r\n\r\n        // 更新标签样式\r\n        this.updateLabelStyle();\r\n\r\n        console.log(`[RectAreaLightScript] 矩形区域光已${this.isLightEnabled ? '开启' : '关闭'}`);\r\n    }\r\n\r\n    /**\r\n     * 开灯\r\n     */\r\n    public turnOn(): void {\r\n        if (!this.isLightEnabled) {\r\n            this.toggleLight();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 关灯\r\n     */\r\n    public turnOff(): void {\r\n        if (this.isLightEnabled) {\r\n            this.toggleLight();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 检查灯光是否开启\r\n     */\r\n    public isLightOn(): boolean {\r\n        return this.isLightEnabled;\r\n    }\r\n\r\n    /**\r\n     * 更新标签样式以反映灯光状态\r\n     */\r\n    private updateLabelStyle(): void {\r\n        if (this.labelElement) {\r\n            // 根据灯光状态更新背景色 - LiquidGlass效果\r\n            if (this.isLightEnabled) {\r\n                this.labelElement.style.background = 'rgba(255, 255, 255, 0.08)';\r\n                this.labelElement.style.border = '1px solid rgba(255, 255, 255, 0.15)';\r\n                this.labelElement.style.boxShadow = `\r\n                    0 4px 30px rgba(0, 0, 0, 0.1),\r\n                    inset 0 0 10px rgba(255, 255, 255, 0.1)\r\n                `;\r\n            } else {\r\n                this.labelElement.style.background = 'rgba(100, 100, 100, 0.08)';\r\n                this.labelElement.style.border = '1px solid rgba(150, 150, 150, 0.15)';\r\n                this.labelElement.style.boxShadow = `\r\n                    0 4px 30px rgba(0, 0, 0, 0.1),\r\n                    inset 0 0 10px rgba(150, 150, 150, 0.1)\r\n                `;\r\n            }\r\n\r\n            // 更新图标\r\n            this.updateLabelIcon();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新标签图标以反映灯光状态\r\n     */\r\n    private updateLabelIcon(): void {\r\n        if (this.labelElement) {\r\n            const iconElement = this.labelElement.querySelector('.rect-area-light-icon') as HTMLImageElement;\r\n            if (iconElement) {\r\n                // 根据灯光状态设置图标图片，使用LightControl.tsx中的图片\r\n                if (this.isLightEnabled) {\r\n                    // 使用开启状态的图片\r\n                    iconElement.src = 'https://lanhu-oss-2537-2.lanhuapp.com/FigmaDDSSlicePNG242ac23827c6159d8038b7d4dbbc8937.png';\r\n                } else {\r\n                    // 使用关闭状态的图片（如果需要不同的图片）\r\n                    // 如果没有专门的关闭图片，可以使用相同的图片或者添加透明度效果\r\n                    iconElement.src = 'https://lanhu-oss-2537-2.lanhuapp.com/FigmaDDSSlicePNG242ac23827c6159d8038b7d4dbbc8937.png';\r\n                    // 可以添加透明度效果来表示关闭状态\r\n                    iconElement.style.opacity = '1';\r\n                }\r\n\r\n                // 如果开/关状态使用相同的图片，通过透明度区分\r\n                if (this.isLightEnabled) {\r\n                    iconElement.style.opacity = '1';\r\n                } else {\r\n                    iconElement.style.opacity = '0.5';\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 脚本销毁时调用\r\n     */\r\n    public override destroy(): void {\r\n        super.destroy?.();\r\n\r\n        // 清理矩形区域光\r\n        if (this.rectAreaLight && this.scene) {\r\n            this.scene.remove(this.rectAreaLight);\r\n        }\r\n\r\n        // 清理矩形区域光辅助器\r\n        if (this.rectAreaLightHelper && this.scene) {\r\n            this.scene.remove(this.rectAreaLightHelper);\r\n        }\r\n\r\n        // 清理标签\r\n        if (this.label && this.scene) {\r\n            this.scene.remove(this.label);\r\n        }\r\n\r\n        this.rectAreaLight = null;\r\n        this.rectAreaLightHelper = null;\r\n        this.label = null;\r\n        this.labelElement = null;\r\n    }\r\n}\r\n","import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tInstancedBufferAttribute,\n\tInterleavedBuffer,\n\tInterleavedBufferAttribute,\n\tTriangleFanDrawMode,\n\tTriangleStripDrawMode,\n\tTrianglesDrawMode,\n\tVector3,\n} from 'three';\n\n/**\n * @module BufferGeometryUtils\n * @three_import import * as BufferGeometryUtils from 'three/addons/utils/BufferGeometryUtils.js';\n */\n\n/**\n * Computes vertex tangents using the MikkTSpace algorithm. MikkTSpace generates the same tangents consistently,\n * and is used in most modelling tools and normal map bakers. Use MikkTSpace for materials with normal maps,\n * because inconsistent tangents may lead to subtle visual issues in the normal map, particularly around mirrored\n * UV seams.\n *\n * In comparison to this method, {@link BufferGeometry#computeTangents} (a custom algorithm) generates tangents that\n * probably will not match the tangents in other software. The custom algorithm is sufficient for general use with a\n * custom material, and may be faster than MikkTSpace.\n *\n * Returns the original BufferGeometry. Indexed geometries will be de-indexed. Requires position, normal, and uv attributes.\n *\n * @param {BufferGeometry} geometry - The geometry to compute tangents for.\n * @param {Object} MikkTSpace - Instance of `examples/jsm/libs/mikktspace.module.js`, or `mikktspace` npm package.\n * Await `MikkTSpace.ready` before use.\n * @param {boolean} [negateSign=true] - Whether to negate the sign component (.w) of each tangent.\n * Required for normal map conventions in some formats, including glTF.\n * @return {BufferGeometry} The updated geometry.\n */\nfunction computeMikkTSpaceTangents( geometry, MikkTSpace, negateSign = true ) {\n\n\tif ( ! MikkTSpace || ! MikkTSpace.isReady ) {\n\n\t\tthrow new Error( 'BufferGeometryUtils: Initialized MikkTSpace library required.' );\n\n\t}\n\n\tif ( ! geometry.hasAttribute( 'position' ) || ! geometry.hasAttribute( 'normal' ) || ! geometry.hasAttribute( 'uv' ) ) {\n\n\t\tthrow new Error( 'BufferGeometryUtils: Tangents require \"position\", \"normal\", and \"uv\" attributes.' );\n\n\t}\n\n\tfunction getAttributeArray( attribute ) {\n\n\t\tif ( attribute.normalized || attribute.isInterleavedBufferAttribute ) {\n\n\t\t\tconst dstArray = new Float32Array( attribute.count * attribute.itemSize );\n\n\t\t\tfor ( let i = 0, j = 0; i < attribute.count; i ++ ) {\n\n\t\t\t\tdstArray[ j ++ ] = attribute.getX( i );\n\t\t\t\tdstArray[ j ++ ] = attribute.getY( i );\n\n\t\t\t\tif ( attribute.itemSize > 2 ) {\n\n\t\t\t\t\tdstArray[ j ++ ] = attribute.getZ( i );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn dstArray;\n\n\t\t}\n\n\t\tif ( attribute.array instanceof Float32Array ) {\n\n\t\t\treturn attribute.array;\n\n\t\t}\n\n\t\treturn new Float32Array( attribute.array );\n\n\t}\n\n\t// MikkTSpace algorithm requires non-indexed input.\n\n\tconst _geometry = geometry.index ? geometry.toNonIndexed() : geometry;\n\n\t// Compute vertex tangents.\n\n\tconst tangents = MikkTSpace.generateTangents(\n\n\t\tgetAttributeArray( _geometry.attributes.position ),\n\t\tgetAttributeArray( _geometry.attributes.normal ),\n\t\tgetAttributeArray( _geometry.attributes.uv )\n\n\t);\n\n\t// Texture coordinate convention of glTF differs from the apparent\n\t// default of the MikkTSpace library; .w component must be flipped.\n\n\tif ( negateSign ) {\n\n\t\tfor ( let i = 3; i < tangents.length; i += 4 ) {\n\n\t\t\ttangents[ i ] *= - 1;\n\n\t\t}\n\n\t}\n\n\t//\n\n\t_geometry.setAttribute( 'tangent', new BufferAttribute( tangents, 4 ) );\n\n\tif ( geometry !== _geometry ) {\n\n\t\tgeometry.copy( _geometry );\n\n\t}\n\n\treturn geometry;\n\n}\n\n/**\n * Merges a set of geometries into a single instance. All geometries must have compatible attributes.\n *\n * @param {Array<BufferGeometry>} geometries - The geometries to merge.\n * @param {boolean} [useGroups=false] - Whether to use groups or not.\n * @return {?BufferGeometry} The merged geometry. Returns `null` if the merge does not succeed.\n */\nfunction mergeGeometries( geometries, useGroups = false ) {\n\n\tconst isIndexed = geometries[ 0 ].index !== null;\n\n\tconst attributesUsed = new Set( Object.keys( geometries[ 0 ].attributes ) );\n\tconst morphAttributesUsed = new Set( Object.keys( geometries[ 0 ].morphAttributes ) );\n\n\tconst attributes = {};\n\tconst morphAttributes = {};\n\n\tconst morphTargetsRelative = geometries[ 0 ].morphTargetsRelative;\n\n\tconst mergedGeometry = new BufferGeometry();\n\n\tlet offset = 0;\n\n\tfor ( let i = 0; i < geometries.length; ++ i ) {\n\n\t\tconst geometry = geometries[ i ];\n\t\tlet attributesCount = 0;\n\n\t\t// ensure that all geometries are indexed, or none\n\n\t\tif ( isIndexed !== ( geometry.index !== null ) ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// gather attributes, exit early if they're different\n\n\t\tfor ( const name in geometry.attributes ) {\n\n\t\t\tif ( ! attributesUsed.has( name ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure \"' + name + '\" attribute exists among all geometries, or in none of them.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tif ( attributes[ name ] === undefined ) attributes[ name ] = [];\n\n\t\t\tattributes[ name ].push( geometry.attributes[ name ] );\n\n\t\t\tattributesCount ++;\n\n\t\t}\n\n\t\t// ensure geometries have the same number of attributes\n\n\t\tif ( attributesCount !== attributesUsed.size ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. Make sure all geometries have the same number of attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// gather morph attributes, exit early if they're different\n\n\t\tif ( morphTargetsRelative !== geometry.morphTargetsRelative ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. .morphTargetsRelative must be consistent throughout all geometries.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tfor ( const name in geometry.morphAttributes ) {\n\n\t\t\tif ( ! morphAttributesUsed.has( name ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '.  .morphAttributes must be consistent throughout all geometries.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tif ( morphAttributes[ name ] === undefined ) morphAttributes[ name ] = [];\n\n\t\t\tmorphAttributes[ name ].push( geometry.morphAttributes[ name ] );\n\n\t\t}\n\n\t\tif ( useGroups ) {\n\n\t\t\tlet count;\n\n\t\t\tif ( isIndexed ) {\n\n\t\t\t\tcount = geometry.index.count;\n\n\t\t\t} else if ( geometry.attributes.position !== undefined ) {\n\n\t\t\t\tcount = geometry.attributes.position.count;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. The geometry must have either an index or a position attribute' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tmergedGeometry.addGroup( offset, count, i );\n\n\t\t\toffset += count;\n\n\t\t}\n\n\t}\n\n\t// merge indices\n\n\tif ( isIndexed ) {\n\n\t\tlet indexOffset = 0;\n\t\tconst mergedIndex = [];\n\n\t\tfor ( let i = 0; i < geometries.length; ++ i ) {\n\n\t\t\tconst index = geometries[ i ].index;\n\n\t\t\tfor ( let j = 0; j < index.count; ++ j ) {\n\n\t\t\t\tmergedIndex.push( index.getX( j ) + indexOffset );\n\n\t\t\t}\n\n\t\t\tindexOffset += geometries[ i ].attributes.position.count;\n\n\t\t}\n\n\t\tmergedGeometry.setIndex( mergedIndex );\n\n\t}\n\n\t// merge attributes\n\n\tfor ( const name in attributes ) {\n\n\t\tconst mergedAttribute = mergeAttributes( attributes[ name ] );\n\n\t\tif ( ! mergedAttribute ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed while trying to merge the ' + name + ' attribute.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tmergedGeometry.setAttribute( name, mergedAttribute );\n\n\t}\n\n\t// merge morph attributes\n\n\tfor ( const name in morphAttributes ) {\n\n\t\tconst numMorphTargets = morphAttributes[ name ][ 0 ].length;\n\n\t\tif ( numMorphTargets === 0 ) break;\n\n\t\tmergedGeometry.morphAttributes = mergedGeometry.morphAttributes || {};\n\t\tmergedGeometry.morphAttributes[ name ] = [];\n\n\t\tfor ( let i = 0; i < numMorphTargets; ++ i ) {\n\n\t\t\tconst morphAttributesToMerge = [];\n\n\t\t\tfor ( let j = 0; j < morphAttributes[ name ].length; ++ j ) {\n\n\t\t\t\tmorphAttributesToMerge.push( morphAttributes[ name ][ j ][ i ] );\n\n\t\t\t}\n\n\t\t\tconst mergedMorphAttribute = mergeAttributes( morphAttributesToMerge );\n\n\t\t\tif ( ! mergedMorphAttribute ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed while trying to merge the ' + name + ' morphAttribute.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tmergedGeometry.morphAttributes[ name ].push( mergedMorphAttribute );\n\n\t\t}\n\n\t}\n\n\treturn mergedGeometry;\n\n}\n\n/**\n * Merges a set of attributes into a single instance. All attributes must have compatible properties and types.\n * Instances of {@link InterleavedBufferAttribute} are not supported.\n *\n * @param {Array<BufferAttribute>} attributes - The attributes to merge.\n * @return {?BufferAttribute} The merged attribute. Returns `null` if the merge does not succeed.\n */\nfunction mergeAttributes( attributes ) {\n\n\tlet TypedArray;\n\tlet itemSize;\n\tlet normalized;\n\tlet gpuType = - 1;\n\tlet arrayLength = 0;\n\n\tfor ( let i = 0; i < attributes.length; ++ i ) {\n\n\t\tconst attribute = attributes[ i ];\n\n\t\tif ( TypedArray === undefined ) TypedArray = attribute.array.constructor;\n\t\tif ( TypedArray !== attribute.array.constructor ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tif ( itemSize === undefined ) itemSize = attribute.itemSize;\n\t\tif ( itemSize !== attribute.itemSize ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tif ( normalized === undefined ) normalized = attribute.normalized;\n\t\tif ( normalized !== attribute.normalized ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tif ( gpuType === - 1 ) gpuType = attribute.gpuType;\n\t\tif ( gpuType !== attribute.gpuType ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.gpuType must be consistent across matching attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tarrayLength += attribute.count * itemSize;\n\n\t}\n\n\tconst array = new TypedArray( arrayLength );\n\tconst result = new BufferAttribute( array, itemSize, normalized );\n\tlet offset = 0;\n\n\tfor ( let i = 0; i < attributes.length; ++ i ) {\n\n\t\tconst attribute = attributes[ i ];\n\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\tconst tupleOffset = offset / itemSize;\n\t\t\tfor ( let j = 0, l = attribute.count; j < l; j ++ ) {\n\n\t\t\t\tfor ( let c = 0; c < itemSize; c ++ ) {\n\n\t\t\t\t\tconst value = attribute.getComponent( j, c );\n\t\t\t\t\tresult.setComponent( j + tupleOffset, c, value );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tarray.set( attribute.array, offset );\n\n\t\t}\n\n\t\toffset += attribute.count * itemSize;\n\n\t}\n\n\tif ( gpuType !== undefined ) {\n\n\t\tresult.gpuType = gpuType;\n\n\t}\n\n\treturn result;\n\n}\n\n/**\n * Performs a deep clone of the given buffer attribute.\n *\n * @param {BufferAttribute} attribute - The attribute to clone.\n * @return {BufferAttribute} The cloned attribute.\n */\nfunction deepCloneAttribute( attribute ) {\n\n\tif ( attribute.isInstancedInterleavedBufferAttribute || attribute.isInterleavedBufferAttribute ) {\n\n\t\treturn deinterleaveAttribute( attribute );\n\n\t}\n\n\tif ( attribute.isInstancedBufferAttribute ) {\n\n\t\treturn new InstancedBufferAttribute().copy( attribute );\n\n\t}\n\n\treturn new BufferAttribute().copy( attribute );\n\n}\n\n/**\n * Interleaves a set of attributes and returns a new array of corresponding attributes that share a\n * single {@link InterleavedBuffer} instance. All attributes must have compatible types.\n *\n * @param {Array<BufferAttribute>} attributes - The attributes to interleave.\n * @return {Array<InterleavedBufferAttribute>} An array of interleaved attributes. If interleave does not succeed, the method returns `null`.\n */\nfunction interleaveAttributes( attributes ) {\n\n\t// Interleaves the provided attributes into an InterleavedBuffer and returns\n\t// a set of InterleavedBufferAttributes for each attribute\n\tlet TypedArray;\n\tlet arrayLength = 0;\n\tlet stride = 0;\n\n\t// calculate the length and type of the interleavedBuffer\n\tfor ( let i = 0, l = attributes.length; i < l; ++ i ) {\n\n\t\tconst attribute = attributes[ i ];\n\n\t\tif ( TypedArray === undefined ) TypedArray = attribute.array.constructor;\n\t\tif ( TypedArray !== attribute.array.constructor ) {\n\n\t\t\tconsole.error( 'AttributeBuffers of different types cannot be interleaved' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tarrayLength += attribute.array.length;\n\t\tstride += attribute.itemSize;\n\n\t}\n\n\t// Create the set of buffer attributes\n\tconst interleavedBuffer = new InterleavedBuffer( new TypedArray( arrayLength ), stride );\n\tlet offset = 0;\n\tconst res = [];\n\tconst getters = [ 'getX', 'getY', 'getZ', 'getW' ];\n\tconst setters = [ 'setX', 'setY', 'setZ', 'setW' ];\n\n\tfor ( let j = 0, l = attributes.length; j < l; j ++ ) {\n\n\t\tconst attribute = attributes[ j ];\n\t\tconst itemSize = attribute.itemSize;\n\t\tconst count = attribute.count;\n\t\tconst iba = new InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, attribute.normalized );\n\t\tres.push( iba );\n\n\t\toffset += itemSize;\n\n\t\t// Move the data for each attribute into the new interleavedBuffer\n\t\t// at the appropriate offset\n\t\tfor ( let c = 0; c < count; c ++ ) {\n\n\t\t\tfor ( let k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\tiba[ setters[ k ] ]( c, attribute[ getters[ k ] ]( c ) );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn res;\n\n}\n\n/**\n * Returns a new, non-interleaved version of the given attribute.\n *\n * @param {InterleavedBufferAttribute} attribute - The interleaved attribute.\n * @return {BufferAttribute} The non-interleaved attribute.\n */\nfunction deinterleaveAttribute( attribute ) {\n\n\tconst cons = attribute.data.array.constructor;\n\tconst count = attribute.count;\n\tconst itemSize = attribute.itemSize;\n\tconst normalized = attribute.normalized;\n\n\tconst array = new cons( count * itemSize );\n\tlet newAttribute;\n\tif ( attribute.isInstancedInterleavedBufferAttribute ) {\n\n\t\tnewAttribute = new InstancedBufferAttribute( array, itemSize, normalized, attribute.meshPerAttribute );\n\n\t} else {\n\n\t\tnewAttribute = new BufferAttribute( array, itemSize, normalized );\n\n\t}\n\n\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\tnewAttribute.setX( i, attribute.getX( i ) );\n\n\t\tif ( itemSize >= 2 ) {\n\n\t\t\tnewAttribute.setY( i, attribute.getY( i ) );\n\n\t\t}\n\n\t\tif ( itemSize >= 3 ) {\n\n\t\t\tnewAttribute.setZ( i, attribute.getZ( i ) );\n\n\t\t}\n\n\t\tif ( itemSize >= 4 ) {\n\n\t\t\tnewAttribute.setW( i, attribute.getW( i ) );\n\n\t\t}\n\n\t}\n\n\treturn newAttribute;\n\n}\n\n/**\n * Deinterleaves all attributes on the given geometry.\n *\n * @param {BufferGeometry} geometry - The geometry to deinterleave.\n */\nfunction deinterleaveGeometry( geometry ) {\n\n\tconst attributes = geometry.attributes;\n\tconst morphTargets = geometry.morphTargets;\n\tconst attrMap = new Map();\n\n\tfor ( const key in attributes ) {\n\n\t\tconst attr = attributes[ key ];\n\t\tif ( attr.isInterleavedBufferAttribute ) {\n\n\t\t\tif ( ! attrMap.has( attr ) ) {\n\n\t\t\t\tattrMap.set( attr, deinterleaveAttribute( attr ) );\n\n\t\t\t}\n\n\t\t\tattributes[ key ] = attrMap.get( attr );\n\n\t\t}\n\n\t}\n\n\tfor ( const key in morphTargets ) {\n\n\t\tconst attr = morphTargets[ key ];\n\t\tif ( attr.isInterleavedBufferAttribute ) {\n\n\t\t\tif ( ! attrMap.has( attr ) ) {\n\n\t\t\t\tattrMap.set( attr, deinterleaveAttribute( attr ) );\n\n\t\t\t}\n\n\t\t\tmorphTargets[ key ] = attrMap.get( attr );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * Returns the amount of bytes used by all attributes to represent the geometry.\n *\n * @param {BufferGeometry} geometry - The geometry.\n * @return {number} The estimate bytes used.\n */\nfunction estimateBytesUsed( geometry ) {\n\n\t// Return the estimated memory used by this geometry in bytes\n\t// Calculate using itemSize, count, and BYTES_PER_ELEMENT to account\n\t// for InterleavedBufferAttributes.\n\tlet mem = 0;\n\tfor ( const name in geometry.attributes ) {\n\n\t\tconst attr = geometry.getAttribute( name );\n\t\tmem += attr.count * attr.itemSize * attr.array.BYTES_PER_ELEMENT;\n\n\t}\n\n\tconst indices = geometry.getIndex();\n\tmem += indices ? indices.count * indices.itemSize * indices.array.BYTES_PER_ELEMENT : 0;\n\treturn mem;\n\n}\n\n/**\n * Returns a new geometry with vertices for which all similar vertex attributes (within tolerance) are merged.\n *\n * @param {BufferGeometry} geometry - The geometry to merge vertices for.\n * @param {number} [tolerance=1e-4] - The tolerance value.\n * @return {BufferGeometry} - The new geometry with merged vertices.\n */\nfunction mergeVertices( geometry, tolerance = 1e-4 ) {\n\n\ttolerance = Math.max( tolerance, Number.EPSILON );\n\n\t// Generate an index buffer if the geometry doesn't have one, or optimize it\n\t// if it's already available.\n\tconst hashToIndex = {};\n\tconst indices = geometry.getIndex();\n\tconst positions = geometry.getAttribute( 'position' );\n\tconst vertexCount = indices ? indices.count : positions.count;\n\n\t// next value for triangle indices\n\tlet nextIndex = 0;\n\n\t// attributes and new attribute arrays\n\tconst attributeNames = Object.keys( geometry.attributes );\n\tconst tmpAttributes = {};\n\tconst tmpMorphAttributes = {};\n\tconst newIndices = [];\n\tconst getters = [ 'getX', 'getY', 'getZ', 'getW' ];\n\tconst setters = [ 'setX', 'setY', 'setZ', 'setW' ];\n\n\t// Initialize the arrays, allocating space conservatively. Extra\n\t// space will be trimmed in the last step.\n\tfor ( let i = 0, l = attributeNames.length; i < l; i ++ ) {\n\n\t\tconst name = attributeNames[ i ];\n\t\tconst attr = geometry.attributes[ name ];\n\n\t\ttmpAttributes[ name ] = new attr.constructor(\n\t\t\tnew attr.array.constructor( attr.count * attr.itemSize ),\n\t\t\tattr.itemSize,\n\t\t\tattr.normalized\n\t\t);\n\n\t\tconst morphAttributes = geometry.morphAttributes[ name ];\n\t\tif ( morphAttributes ) {\n\n\t\t\tif ( ! tmpMorphAttributes[ name ] ) tmpMorphAttributes[ name ] = [];\n\t\t\tmorphAttributes.forEach( ( morphAttr, i ) => {\n\n\t\t\t\tconst array = new morphAttr.array.constructor( morphAttr.count * morphAttr.itemSize );\n\t\t\t\ttmpMorphAttributes[ name ][ i ] = new morphAttr.constructor( array, morphAttr.itemSize, morphAttr.normalized );\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n\t// convert the error tolerance to an amount of decimal places to truncate to\n\tconst halfTolerance = tolerance * 0.5;\n\tconst exponent = Math.log10( 1 / tolerance );\n\tconst hashMultiplier = Math.pow( 10, exponent );\n\tconst hashAdditive = halfTolerance * hashMultiplier;\n\tfor ( let i = 0; i < vertexCount; i ++ ) {\n\n\t\tconst index = indices ? indices.getX( i ) : i;\n\n\t\t// Generate a hash for the vertex attributes at the current index 'i'\n\t\tlet hash = '';\n\t\tfor ( let j = 0, l = attributeNames.length; j < l; j ++ ) {\n\n\t\t\tconst name = attributeNames[ j ];\n\t\t\tconst attribute = geometry.getAttribute( name );\n\t\t\tconst itemSize = attribute.itemSize;\n\n\t\t\tfor ( let k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t// double tilde truncates the decimal value\n\t\t\t\thash += `${ ~ ~ ( attribute[ getters[ k ] ]( index ) * hashMultiplier + hashAdditive ) },`;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Add another reference to the vertex if it's already\n\t\t// used by another index\n\t\tif ( hash in hashToIndex ) {\n\n\t\t\tnewIndices.push( hashToIndex[ hash ] );\n\n\t\t} else {\n\n\t\t\t// copy data to the new index in the temporary attributes\n\t\t\tfor ( let j = 0, l = attributeNames.length; j < l; j ++ ) {\n\n\t\t\t\tconst name = attributeNames[ j ];\n\t\t\t\tconst attribute = geometry.getAttribute( name );\n\t\t\t\tconst morphAttributes = geometry.morphAttributes[ name ];\n\t\t\t\tconst itemSize = attribute.itemSize;\n\t\t\t\tconst newArray = tmpAttributes[ name ];\n\t\t\t\tconst newMorphArrays = tmpMorphAttributes[ name ];\n\n\t\t\t\tfor ( let k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t\tconst getterFunc = getters[ k ];\n\t\t\t\t\tconst setterFunc = setters[ k ];\n\t\t\t\t\tnewArray[ setterFunc ]( nextIndex, attribute[ getterFunc ]( index ) );\n\n\t\t\t\t\tif ( morphAttributes ) {\n\n\t\t\t\t\t\tfor ( let m = 0, ml = morphAttributes.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\tnewMorphArrays[ m ][ setterFunc ]( nextIndex, morphAttributes[ m ][ getterFunc ]( index ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\thashToIndex[ hash ] = nextIndex;\n\t\t\tnewIndices.push( nextIndex );\n\t\t\tnextIndex ++;\n\n\t\t}\n\n\t}\n\n\t// generate result BufferGeometry\n\tconst result = geometry.clone();\n\tfor ( const name in geometry.attributes ) {\n\n\t\tconst tmpAttribute = tmpAttributes[ name ];\n\n\t\tresult.setAttribute( name, new tmpAttribute.constructor(\n\t\t\ttmpAttribute.array.slice( 0, nextIndex * tmpAttribute.itemSize ),\n\t\t\ttmpAttribute.itemSize,\n\t\t\ttmpAttribute.normalized,\n\t\t) );\n\n\t\tif ( ! ( name in tmpMorphAttributes ) ) continue;\n\n\t\tfor ( let j = 0; j < tmpMorphAttributes[ name ].length; j ++ ) {\n\n\t\t\tconst tmpMorphAttribute = tmpMorphAttributes[ name ][ j ];\n\n\t\t\tresult.morphAttributes[ name ][ j ] = new tmpMorphAttribute.constructor(\n\t\t\t\ttmpMorphAttribute.array.slice( 0, nextIndex * tmpMorphAttribute.itemSize ),\n\t\t\t\ttmpMorphAttribute.itemSize,\n\t\t\t\ttmpMorphAttribute.normalized,\n\t\t\t);\n\n\t\t}\n\n\t}\n\n\t// indices\n\n\tresult.setIndex( newIndices );\n\n\treturn result;\n\n}\n\n/**\n * Returns a new indexed geometry based on `TrianglesDrawMode` draw mode.\n * This mode corresponds to the `gl.TRIANGLES` primitive in WebGL.\n *\n * @param {BufferGeometry} geometry - The geometry to convert.\n * @param {number} drawMode - The current draw mode.\n * @return {BufferGeometry} The new geometry using `TrianglesDrawMode`.\n */\nfunction toTrianglesDrawMode( geometry, drawMode ) {\n\n\tif ( drawMode === TrianglesDrawMode ) {\n\n\t\tconsole.warn( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles.' );\n\t\treturn geometry;\n\n\t}\n\n\tif ( drawMode === TriangleFanDrawMode || drawMode === TriangleStripDrawMode ) {\n\n\t\tlet index = geometry.getIndex();\n\n\t\t// generate index if not present\n\n\t\tif ( index === null ) {\n\n\t\t\tconst indices = [];\n\n\t\t\tconst position = geometry.getAttribute( 'position' );\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tfor ( let i = 0; i < position.count; i ++ ) {\n\n\t\t\t\t\tindices.push( i );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.setIndex( indices );\n\t\t\t\tindex = geometry.getIndex();\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.' );\n\t\t\t\treturn geometry;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tconst numberOfTriangles = index.count - 2;\n\t\tconst newIndices = [];\n\n\t\tif ( drawMode === TriangleFanDrawMode ) {\n\n\t\t\t// gl.TRIANGLE_FAN\n\n\t\t\tfor ( let i = 1; i <= numberOfTriangles; i ++ ) {\n\n\t\t\t\tnewIndices.push( index.getX( 0 ) );\n\t\t\t\tnewIndices.push( index.getX( i ) );\n\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// gl.TRIANGLE_STRIP\n\n\t\t\tfor ( let i = 0; i < numberOfTriangles; i ++ ) {\n\n\t\t\t\tif ( i % 2 === 0 ) {\n\n\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 2 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnewIndices.push( index.getX( i + 2 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( ( newIndices.length / 3 ) !== numberOfTriangles ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.' );\n\n\t\t}\n\n\t\t// build final geometry\n\n\t\tconst newGeometry = geometry.clone();\n\t\tnewGeometry.setIndex( newIndices );\n\t\tnewGeometry.clearGroups();\n\n\t\treturn newGeometry;\n\n\t} else {\n\n\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:', drawMode );\n\t\treturn geometry;\n\n\t}\n\n}\n\n/**\n * Calculates the morphed attributes of a morphed/skinned BufferGeometry.\n *\n * Helpful for Raytracing or Decals (i.e. a `DecalGeometry` applied to a morphed Object with a `BufferGeometry`\n * will use the original `BufferGeometry`, not the morphed/skinned one, generating an incorrect result.\n * Using this function to create a shadow `Object3`D the `DecalGeometry` can be correctly generated).\n *\n * @param {Mesh|Line|Points} object - The 3D object to compute morph attributes for.\n * @return {Object} An object with original position/normal attributes and morphed ones.\n */\nfunction computeMorphedAttributes( object ) {\n\n\tconst _vA = new Vector3();\n\tconst _vB = new Vector3();\n\tconst _vC = new Vector3();\n\n\tconst _tempA = new Vector3();\n\tconst _tempB = new Vector3();\n\tconst _tempC = new Vector3();\n\n\tconst _morphA = new Vector3();\n\tconst _morphB = new Vector3();\n\tconst _morphC = new Vector3();\n\n\tfunction _calculateMorphedAttributeData(\n\t\tobject,\n\t\tattribute,\n\t\tmorphAttribute,\n\t\tmorphTargetsRelative,\n\t\ta,\n\t\tb,\n\t\tc,\n\t\tmodifiedAttributeArray\n\t) {\n\n\t\t_vA.fromBufferAttribute( attribute, a );\n\t\t_vB.fromBufferAttribute( attribute, b );\n\t\t_vC.fromBufferAttribute( attribute, c );\n\n\t\tconst morphInfluences = object.morphTargetInfluences;\n\n\t\tif ( morphAttribute && morphInfluences ) {\n\n\t\t\t_morphA.set( 0, 0, 0 );\n\t\t\t_morphB.set( 0, 0, 0 );\n\t\t\t_morphC.set( 0, 0, 0 );\n\n\t\t\tfor ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {\n\n\t\t\t\tconst influence = morphInfluences[ i ];\n\t\t\t\tconst morph = morphAttribute[ i ];\n\n\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t_tempA.fromBufferAttribute( morph, a );\n\t\t\t\t_tempB.fromBufferAttribute( morph, b );\n\t\t\t\t_tempC.fromBufferAttribute( morph, c );\n\n\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA, influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB, influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC, influence );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA.sub( _vA ), influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB.sub( _vB ), influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC.sub( _vC ), influence );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_vA.add( _morphA );\n\t\t\t_vB.add( _morphB );\n\t\t\t_vC.add( _morphC );\n\n\t\t}\n\n\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\tobject.applyBoneTransform( a, _vA );\n\t\t\tobject.applyBoneTransform( b, _vB );\n\t\t\tobject.applyBoneTransform( c, _vC );\n\n\t\t}\n\n\t\tmodifiedAttributeArray[ a * 3 + 0 ] = _vA.x;\n\t\tmodifiedAttributeArray[ a * 3 + 1 ] = _vA.y;\n\t\tmodifiedAttributeArray[ a * 3 + 2 ] = _vA.z;\n\t\tmodifiedAttributeArray[ b * 3 + 0 ] = _vB.x;\n\t\tmodifiedAttributeArray[ b * 3 + 1 ] = _vB.y;\n\t\tmodifiedAttributeArray[ b * 3 + 2 ] = _vB.z;\n\t\tmodifiedAttributeArray[ c * 3 + 0 ] = _vC.x;\n\t\tmodifiedAttributeArray[ c * 3 + 1 ] = _vC.y;\n\t\tmodifiedAttributeArray[ c * 3 + 2 ] = _vC.z;\n\n\t}\n\n\tconst geometry = object.geometry;\n\tconst material = object.material;\n\n\tlet a, b, c;\n\tconst index = geometry.index;\n\tconst positionAttribute = geometry.attributes.position;\n\tconst morphPosition = geometry.morphAttributes.position;\n\tconst morphTargetsRelative = geometry.morphTargetsRelative;\n\tconst normalAttribute = geometry.attributes.normal;\n\tconst morphNormal = geometry.morphAttributes.position;\n\n\tconst groups = geometry.groups;\n\tconst drawRange = geometry.drawRange;\n\tlet i, j, il, jl;\n\tlet group;\n\tlet start, end;\n\n\tconst modifiedPosition = new Float32Array( positionAttribute.count * positionAttribute.itemSize );\n\tconst modifiedNormal = new Float32Array( normalAttribute.count * normalAttribute.itemSize );\n\n\tif ( index !== null ) {\n\n\t\t// indexed buffer geometry\n\n\t\tif ( Array.isArray( material ) ) {\n\n\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\tgroup = groups[ i ];\n\n\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\ta = index.getX( j );\n\t\t\t\t\tb = index.getX( j + 1 );\n\t\t\t\t\tc = index.getX( j + 2 );\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tpositionAttribute,\n\t\t\t\t\t\tmorphPosition,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedPosition\n\t\t\t\t\t);\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tnormalAttribute,\n\t\t\t\t\t\tmorphNormal,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedNormal\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\tend = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\ta = index.getX( i );\n\t\t\t\tb = index.getX( i + 1 );\n\t\t\t\tc = index.getX( i + 2 );\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tpositionAttribute,\n\t\t\t\t\tmorphPosition,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedPosition\n\t\t\t\t);\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tnormalAttribute,\n\t\t\t\t\tmorphNormal,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedNormal\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t} else {\n\n\t\t// non-indexed buffer geometry\n\n\t\tif ( Array.isArray( material ) ) {\n\n\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\tgroup = groups[ i ];\n\n\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\ta = j;\n\t\t\t\t\tb = j + 1;\n\t\t\t\t\tc = j + 2;\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tpositionAttribute,\n\t\t\t\t\t\tmorphPosition,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedPosition\n\t\t\t\t\t);\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tnormalAttribute,\n\t\t\t\t\t\tmorphNormal,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedNormal\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\tend = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\ta = i;\n\t\t\t\tb = i + 1;\n\t\t\t\tc = i + 2;\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tpositionAttribute,\n\t\t\t\t\tmorphPosition,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedPosition\n\t\t\t\t);\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tnormalAttribute,\n\t\t\t\t\tmorphNormal,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedNormal\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tconst morphedPositionAttribute = new Float32BufferAttribute( modifiedPosition, 3 );\n\tconst morphedNormalAttribute = new Float32BufferAttribute( modifiedNormal, 3 );\n\n\treturn {\n\n\t\tpositionAttribute: positionAttribute,\n\t\tnormalAttribute: normalAttribute,\n\t\tmorphedPositionAttribute: morphedPositionAttribute,\n\t\tmorphedNormalAttribute: morphedNormalAttribute\n\n\t};\n\n}\n\n/**\n * Merges the {@link BufferGeometry#groups} for the given geometry.\n *\n * @param {BufferGeometry} geometry - The geometry to modify.\n * @return {BufferGeometry} - The updated geometry\n */\nfunction mergeGroups( geometry ) {\n\n\tif ( geometry.groups.length === 0 ) {\n\n\t\tconsole.warn( 'THREE.BufferGeometryUtils.mergeGroups(): No groups are defined. Nothing to merge.' );\n\t\treturn geometry;\n\n\t}\n\n\tlet groups = geometry.groups;\n\n\t// sort groups by material index\n\n\tgroups = groups.sort( ( a, b ) => {\n\n\t\tif ( a.materialIndex !== b.materialIndex ) return a.materialIndex - b.materialIndex;\n\n\t\treturn a.start - b.start;\n\n\t} );\n\n\t// create index for non-indexed geometries\n\n\tif ( geometry.getIndex() === null ) {\n\n\t\tconst positionAttribute = geometry.getAttribute( 'position' );\n\t\tconst indices = [];\n\n\t\tfor ( let i = 0; i < positionAttribute.count; i += 3 ) {\n\n\t\t\tindices.push( i, i + 1, i + 2 );\n\n\t\t}\n\n\t\tgeometry.setIndex( indices );\n\n\t}\n\n\t// sort index\n\n\tconst index = geometry.getIndex();\n\n\tconst newIndices = [];\n\n\tfor ( let i = 0; i < groups.length; i ++ ) {\n\n\t\tconst group = groups[ i ];\n\n\t\tconst groupStart = group.start;\n\t\tconst groupLength = groupStart + group.count;\n\n\t\tfor ( let j = groupStart; j < groupLength; j ++ ) {\n\n\t\t\tnewIndices.push( index.getX( j ) );\n\n\t\t}\n\n\t}\n\n\tgeometry.dispose(); // Required to force buffer recreation\n\tgeometry.setIndex( newIndices );\n\n\t// update groups indices\n\n\tlet start = 0;\n\n\tfor ( let i = 0; i < groups.length; i ++ ) {\n\n\t\tconst group = groups[ i ];\n\n\t\tgroup.start = start;\n\t\tstart += group.count;\n\n\t}\n\n\t// merge groups\n\n\tlet currentGroup = groups[ 0 ];\n\n\tgeometry.groups = [ currentGroup ];\n\n\tfor ( let i = 1; i < groups.length; i ++ ) {\n\n\t\tconst group = groups[ i ];\n\n\t\tif ( currentGroup.materialIndex === group.materialIndex ) {\n\n\t\t\tcurrentGroup.count += group.count;\n\n\t\t} else {\n\n\t\t\tcurrentGroup = group;\n\t\t\tgeometry.groups.push( currentGroup );\n\n\t\t}\n\n\t}\n\n\treturn geometry;\n\n}\n\n/**\n * Modifies the supplied geometry if it is non-indexed, otherwise creates a new,\n * non-indexed geometry. Returns the geometry with smooth normals everywhere except\n * faces that meet at an angle greater than the crease angle.\n *\n * @param {BufferGeometry} geometry - The geometry to modify.\n * @param {number} [creaseAngle=Math.PI/3] - The crease angle in radians.\n * @return {BufferGeometry} - The updated geometry\n */\nfunction toCreasedNormals( geometry, creaseAngle = Math.PI / 3 /* 60 degrees */ ) {\n\n\tconst creaseDot = Math.cos( creaseAngle );\n\tconst hashMultiplier = ( 1 + 1e-10 ) * 1e2;\n\n\t// reusable vectors\n\tconst verts = [ new Vector3(), new Vector3(), new Vector3() ];\n\tconst tempVec1 = new Vector3();\n\tconst tempVec2 = new Vector3();\n\tconst tempNorm = new Vector3();\n\tconst tempNorm2 = new Vector3();\n\n\t// hashes a vector\n\tfunction hashVertex( v ) {\n\n\t\tconst x = ~ ~ ( v.x * hashMultiplier );\n\t\tconst y = ~ ~ ( v.y * hashMultiplier );\n\t\tconst z = ~ ~ ( v.z * hashMultiplier );\n\t\treturn `${x},${y},${z}`;\n\n\t}\n\n\t// BufferGeometry.toNonIndexed() warns if the geometry is non-indexed\n\t// and returns the original geometry\n\tconst resultGeometry = geometry.index ? geometry.toNonIndexed() : geometry;\n\tconst posAttr = resultGeometry.attributes.position;\n\tconst vertexMap = {};\n\n\t// find all the normals shared by commonly located vertices\n\tfor ( let i = 0, l = posAttr.count / 3; i < l; i ++ ) {\n\n\t\tconst i3 = 3 * i;\n\t\tconst a = verts[ 0 ].fromBufferAttribute( posAttr, i3 + 0 );\n\t\tconst b = verts[ 1 ].fromBufferAttribute( posAttr, i3 + 1 );\n\t\tconst c = verts[ 2 ].fromBufferAttribute( posAttr, i3 + 2 );\n\n\t\ttempVec1.subVectors( c, b );\n\t\ttempVec2.subVectors( a, b );\n\n\t\t// add the normal to the map for all vertices\n\t\tconst normal = new Vector3().crossVectors( tempVec1, tempVec2 ).normalize();\n\t\tfor ( let n = 0; n < 3; n ++ ) {\n\n\t\t\tconst vert = verts[ n ];\n\t\t\tconst hash = hashVertex( vert );\n\t\t\tif ( ! ( hash in vertexMap ) ) {\n\n\t\t\t\tvertexMap[ hash ] = [];\n\n\t\t\t}\n\n\t\t\tvertexMap[ hash ].push( normal );\n\n\t\t}\n\n\t}\n\n\t// average normals from all vertices that share a common location if they are within the\n\t// provided crease threshold\n\tconst normalArray = new Float32Array( posAttr.count * 3 );\n\tconst normAttr = new BufferAttribute( normalArray, 3, false );\n\tfor ( let i = 0, l = posAttr.count / 3; i < l; i ++ ) {\n\n\t\t// get the face normal for this vertex\n\t\tconst i3 = 3 * i;\n\t\tconst a = verts[ 0 ].fromBufferAttribute( posAttr, i3 + 0 );\n\t\tconst b = verts[ 1 ].fromBufferAttribute( posAttr, i3 + 1 );\n\t\tconst c = verts[ 2 ].fromBufferAttribute( posAttr, i3 + 2 );\n\n\t\ttempVec1.subVectors( c, b );\n\t\ttempVec2.subVectors( a, b );\n\n\t\ttempNorm.crossVectors( tempVec1, tempVec2 ).normalize();\n\n\t\t// average all normals that meet the threshold and set the normal value\n\t\tfor ( let n = 0; n < 3; n ++ ) {\n\n\t\t\tconst vert = verts[ n ];\n\t\t\tconst hash = hashVertex( vert );\n\t\t\tconst otherNormals = vertexMap[ hash ];\n\t\t\ttempNorm2.set( 0, 0, 0 );\n\n\t\t\tfor ( let k = 0, lk = otherNormals.length; k < lk; k ++ ) {\n\n\t\t\t\tconst otherNorm = otherNormals[ k ];\n\t\t\t\tif ( tempNorm.dot( otherNorm ) > creaseDot ) {\n\n\t\t\t\t\ttempNorm2.add( otherNorm );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ttempNorm2.normalize();\n\t\t\tnormAttr.setXYZ( i3 + n, tempNorm2.x, tempNorm2.y, tempNorm2.z );\n\n\t\t}\n\n\t}\n\n\tresultGeometry.setAttribute( 'normal', normAttr );\n\treturn resultGeometry;\n\n}\n\nexport {\n\tcomputeMikkTSpaceTangents,\n\tmergeGeometries,\n\tmergeAttributes,\n\tdeepCloneAttribute,\n\tdeinterleaveAttribute,\n\tdeinterleaveGeometry,\n\tinterleaveAttributes,\n\testimateBytesUsed,\n\tmergeVertices,\n\ttoTrianglesDrawMode,\n\tcomputeMorphedAttributes,\n\tmergeGroups,\n\ttoCreasedNormals\n};\n","import {\n\tAnimationClip,\n\tBone,\n\tBox3,\n\tBufferAttribute,\n\tBufferGeometry,\n\tClampToEdgeWrapping,\n\tColor,\n\tColorManagement,\n\tDirectionalLight,\n\tDoubleSide,\n\tFileLoader,\n\tFrontSide,\n\tGroup,\n\tImageBitmapLoader,\n\tInstancedMesh,\n\tInterleavedBuffer,\n\tInterleavedBufferAttribute,\n\tInterpolant,\n\tInterpolateDiscrete,\n\tInterpolateLinear,\n\tLine,\n\tLineBasicMaterial,\n\tLineLoop,\n\tLineSegments,\n\tLinearFilter,\n\tLinearMipmapLinearFilter,\n\tLinearMipmapNearestFilter,\n\tLinearSRGBColorSpace,\n\tLoader,\n\tLoaderUtils,\n\tMaterial,\n\tMathUtils,\n\tMatrix4,\n\tMesh,\n\tMeshBasicMaterial,\n\tMeshPhysicalMaterial,\n\tMeshStandardMaterial,\n\tMirroredRepeatWrapping,\n\tNearestFilter,\n\tNearestMipmapLinearFilter,\n\tNearestMipmapNearestFilter,\n\tNumberKeyframeTrack,\n\tObject3D,\n\tOrthographicCamera,\n\tPerspectiveCamera,\n\tPointLight,\n\tPoints,\n\tPointsMaterial,\n\tPropertyBinding,\n\tQuaternion,\n\tQuaternionKeyframeTrack,\n\tRepeatWrapping,\n\tSkeleton,\n\tSkinnedMesh,\n\tSphere,\n\tSpotLight,\n\tTexture,\n\tTextureLoader,\n\tTriangleFanDrawMode,\n\tTriangleStripDrawMode,\n\tVector2,\n\tVector3,\n\tVectorKeyframeTrack,\n\tSRGBColorSpace,\n\tInstancedBufferAttribute\n} from 'three';\nimport { toTrianglesDrawMode } from '../utils/BufferGeometryUtils.js';\n\n/**\n * A loader for the glTF 2.0 format.\n *\n * [glTF]{@link https://www.khronos.org/gltf/} (GL Transmission Format) is an [open format specification]{@link https://github.com/KhronosGroup/glTF/tree/main/specification/2.0}\n * for efficient delivery and loading of 3D content. Assets may be provided either in JSON (.gltf) or binary (.glb)\n * format. External files store textures (.jpg, .png) and additional binary data (.bin). A glTF asset may deliver\n * one or more scenes, including meshes, materials, textures, skins, skeletons, morph targets, animations, lights,\n * and/or cameras.\n *\n * `GLTFLoader` uses {@link ImageBitmapLoader} whenever possible. Be advised that image bitmaps are not\n * automatically GC-collected when they are no longer referenced, and they require special handling during\n * the disposal process.\n *\n * `GLTFLoader` supports the following glTF 2.0 extensions:\n * - KHR_draco_mesh_compression\n * - KHR_materials_clearcoat\n * - KHR_materials_dispersion\n * - KHR_materials_ior\n * - KHR_materials_specular\n * - KHR_materials_transmission\n * - KHR_materials_iridescence\n * - KHR_materials_unlit\n * - KHR_materials_volume\n * - KHR_mesh_quantization\n * - KHR_lights_punctual\n * - KHR_texture_basisu\n * - KHR_texture_transform\n * - EXT_texture_webp\n * - EXT_meshopt_compression\n * - EXT_mesh_gpu_instancing\n *\n * The following glTF 2.0 extension is supported by an external user plugin:\n * - [KHR_materials_variants]{@link https://github.com/takahirox/three-gltf-extensions}\n * - [MSFT_texture_dds]{@link https://github.com/takahirox/three-gltf-extensions}\n *\n * ```js\n * const loader = new GLTFLoader();\n *\n * // Optional: Provide a DRACOLoader instance to decode compressed mesh data\n * const dracoLoader = new DRACOLoader();\n * dracoLoader.setDecoderPath( '/examples/jsm/libs/draco/' );\n * loader.setDRACOLoader( dracoLoader );\n *\n * const gltf = await loader.loadAsync( 'models/gltf/duck/duck.gltf' );\n * scene.add( gltf.scene );\n * ```\n *\n * @augments Loader\n * @three_import import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\n */\nclass GLTFLoader extends Loader {\n\n\t/**\n\t * Constructs a new glTF loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.dracoLoader = null;\n\t\tthis.ktx2Loader = null;\n\t\tthis.meshoptDecoder = null;\n\n\t\tthis.pluginCallbacks = [];\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFMaterialsClearcoatExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFMaterialsDispersionExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFTextureBasisUExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFTextureWebPExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFTextureAVIFExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFMaterialsSheenExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFMaterialsTransmissionExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFMaterialsVolumeExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFMaterialsIorExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFMaterialsEmissiveStrengthExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFMaterialsSpecularExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFMaterialsIridescenceExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFMaterialsAnisotropyExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFMaterialsBumpExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFLightsExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFMeshoptCompression( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFMeshGpuInstancing( parser );\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded glTF asset\n\t * to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(GLTFLoader~LoadObject)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tlet resourcePath;\n\n\t\tif ( this.resourcePath !== '' ) {\n\n\t\t\tresourcePath = this.resourcePath;\n\n\t\t} else if ( this.path !== '' ) {\n\n\t\t\t// If a base path is set, resources will be relative paths from that plus the relative path of the gltf file\n\t\t\t// Example  path = 'https://my-cnd-server.com/', url = 'assets/models/model.gltf'\n\t\t\t// resourcePath = 'https://my-cnd-server.com/assets/models/'\n\t\t\t// referenced resource 'model.bin' will be loaded from 'https://my-cnd-server.com/assets/models/model.bin'\n\t\t\t// referenced resource '../textures/texture.png' will be loaded from 'https://my-cnd-server.com/assets/textures/texture.png'\n\t\t\tconst relativeUrl = LoaderUtils.extractUrlBase( url );\n\t\t\tresourcePath = LoaderUtils.resolveURL( relativeUrl, this.path );\n\n\t\t} else {\n\n\t\t\tresourcePath = LoaderUtils.extractUrlBase( url );\n\n\t\t}\n\n\t\t// Tells the LoadingManager to track an extra item, which resolves after\n\t\t// the model is fully loaded. This means the count of items loaded will\n\t\t// be incorrect, but ensures manager.onLoad() does not fire early.\n\t\tthis.manager.itemStart( url );\n\n\t\tconst _onError = function ( e ) {\n\n\t\t\tif ( onError ) {\n\n\t\t\t\tonError( e );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( e );\n\n\t\t\t}\n\n\t\t\tscope.manager.itemError( url );\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t};\n\n\t\tconst loader = new FileLoader( this.manager );\n\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\tloader.load( url, function ( data ) {\n\n\t\t\ttry {\n\n\t\t\t\tscope.parse( data, resourcePath, function ( gltf ) {\n\n\t\t\t\t\tonLoad( gltf );\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, _onError );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\t_onError( e );\n\n\t\t\t}\n\n\t\t}, onProgress, _onError );\n\n\t}\n\n\t/**\n\t * Sets the given Draco loader to this loader. Required for decoding assets\n\t * compressed with the `KHR_draco_mesh_compression` extension.\n\t *\n\t * @param {DRACOLoader} dracoLoader - The Draco loader to set.\n\t * @return {GLTFLoader} A reference to this loader.\n\t */\n\tsetDRACOLoader( dracoLoader ) {\n\n\t\tthis.dracoLoader = dracoLoader;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given KTX2 loader to this loader. Required for loading KTX2\n\t * compressed textures.\n\t *\n\t * @param {KTX2Loader} ktx2Loader - The KTX2 loader to set.\n\t * @return {GLTFLoader} A reference to this loader.\n\t */\n\tsetKTX2Loader( ktx2Loader ) {\n\n\t\tthis.ktx2Loader = ktx2Loader;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given meshopt decoder. Required for decoding assets\n\t * compressed with the `EXT_meshopt_compression` extension.\n\t *\n\t * @param {Object} meshoptDecoder - The meshopt decoder to set.\n\t * @return {GLTFLoader} A reference to this loader.\n\t */\n\tsetMeshoptDecoder( meshoptDecoder ) {\n\n\t\tthis.meshoptDecoder = meshoptDecoder;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Registers a plugin callback. This API is internally used to implement the various\n\t * glTF extensions but can also used by third-party code to add additional logic\n\t * to the loader.\n\t *\n\t * @param {function(parser:GLTFParser)} callback - The callback function to register.\n\t * @return {GLTFLoader} A reference to this loader.\n\t */\n\tregister( callback ) {\n\n\t\tif ( this.pluginCallbacks.indexOf( callback ) === - 1 ) {\n\n\t\t\tthis.pluginCallbacks.push( callback );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Unregisters a plugin callback.\n\t *\n\t * @param {Function} callback - The callback function to unregister.\n\t * @return {GLTFLoader} A reference to this loader.\n\t */\n\tunregister( callback ) {\n\n\t\tif ( this.pluginCallbacks.indexOf( callback ) !== - 1 ) {\n\n\t\t\tthis.pluginCallbacks.splice( this.pluginCallbacks.indexOf( callback ), 1 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Parses the given FBX data and returns the resulting group.\n\t *\n\t * @param {string|ArrayBuffer} data - The raw glTF data.\n\t * @param {string} path - The URL base path.\n\t * @param {function(GLTFLoader~LoadObject)} onLoad - Executed when the loading process has been finished.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tparse( data, path, onLoad, onError ) {\n\n\t\tlet json;\n\t\tconst extensions = {};\n\t\tconst plugins = {};\n\t\tconst textDecoder = new TextDecoder();\n\n\t\tif ( typeof data === 'string' ) {\n\n\t\t\tjson = JSON.parse( data );\n\n\t\t} else if ( data instanceof ArrayBuffer ) {\n\n\t\t\tconst magic = textDecoder.decode( new Uint8Array( data, 0, 4 ) );\n\n\t\t\tif ( magic === BINARY_EXTENSION_HEADER_MAGIC ) {\n\n\t\t\t\ttry {\n\n\t\t\t\t\textensions[ EXTENSIONS.KHR_BINARY_GLTF ] = new GLTFBinaryExtension( data );\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\tif ( onError ) onError( error );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tjson = JSON.parse( extensions[ EXTENSIONS.KHR_BINARY_GLTF ].content );\n\n\t\t\t} else {\n\n\t\t\t\tjson = JSON.parse( textDecoder.decode( data ) );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tjson = data;\n\n\t\t}\n\n\t\tif ( json.asset === undefined || json.asset.version[ 0 ] < 2 ) {\n\n\t\t\tif ( onError ) onError( new Error( 'THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported.' ) );\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst parser = new GLTFParser( json, {\n\n\t\t\tpath: path || this.resourcePath || '',\n\t\t\tcrossOrigin: this.crossOrigin,\n\t\t\trequestHeader: this.requestHeader,\n\t\t\tmanager: this.manager,\n\t\t\tktx2Loader: this.ktx2Loader,\n\t\t\tmeshoptDecoder: this.meshoptDecoder\n\n\t\t} );\n\n\t\tparser.fileLoader.setRequestHeader( this.requestHeader );\n\n\t\tfor ( let i = 0; i < this.pluginCallbacks.length; i ++ ) {\n\n\t\t\tconst plugin = this.pluginCallbacks[ i ]( parser );\n\n\t\t\tif ( ! plugin.name ) console.error( 'THREE.GLTFLoader: Invalid plugin found: missing name' );\n\n\t\t\tplugins[ plugin.name ] = plugin;\n\n\t\t\t// Workaround to avoid determining as unknown extension\n\t\t\t// in addUnknownExtensionsToUserData().\n\t\t\t// Remove this workaround if we move all the existing\n\t\t\t// extension handlers to plugin system\n\t\t\textensions[ plugin.name ] = true;\n\n\t\t}\n\n\t\tif ( json.extensionsUsed ) {\n\n\t\t\tfor ( let i = 0; i < json.extensionsUsed.length; ++ i ) {\n\n\t\t\t\tconst extensionName = json.extensionsUsed[ i ];\n\t\t\t\tconst extensionsRequired = json.extensionsRequired || [];\n\n\t\t\t\tswitch ( extensionName ) {\n\n\t\t\t\t\tcase EXTENSIONS.KHR_MATERIALS_UNLIT:\n\t\t\t\t\t\textensions[ extensionName ] = new GLTFMaterialsUnlitExtension();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase EXTENSIONS.KHR_DRACO_MESH_COMPRESSION:\n\t\t\t\t\t\textensions[ extensionName ] = new GLTFDracoMeshCompressionExtension( json, this.dracoLoader );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase EXTENSIONS.KHR_TEXTURE_TRANSFORM:\n\t\t\t\t\t\textensions[ extensionName ] = new GLTFTextureTransformExtension();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase EXTENSIONS.KHR_MESH_QUANTIZATION:\n\t\t\t\t\t\textensions[ extensionName ] = new GLTFMeshQuantizationExtension();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( extensionsRequired.indexOf( extensionName ) >= 0 && plugins[ extensionName ] === undefined ) {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.GLTFLoader: Unknown extension \"' + extensionName + '\".' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tparser.setExtensions( extensions );\n\t\tparser.setPlugins( plugins );\n\t\tparser.parse( onLoad, onError );\n\n\t}\n\n\t/**\n\t * Async version of {@link GLTFLoader#parse}.\n\t *\n\t * @async\n\t * @param {string|ArrayBuffer} data - The raw glTF data.\n\t * @param {string} path - The URL base path.\n\t * @return {Promise<GLTFLoader~LoadObject>} A Promise that resolves with the loaded glTF when the parsing has been finished.\n\t */\n\tparseAsync( data, path ) {\n\n\t\tconst scope = this;\n\n\t\treturn new Promise( function ( resolve, reject ) {\n\n\t\t\tscope.parse( data, path, resolve, reject );\n\n\t\t} );\n\n\t}\n\n}\n\n/* GLTFREGISTRY */\n\nfunction GLTFRegistry() {\n\n\tlet objects = {};\n\n\treturn\t{\n\n\t\tget: function ( key ) {\n\n\t\t\treturn objects[ key ];\n\n\t\t},\n\n\t\tadd: function ( key, object ) {\n\n\t\t\tobjects[ key ] = object;\n\n\t\t},\n\n\t\tremove: function ( key ) {\n\n\t\t\tdelete objects[ key ];\n\n\t\t},\n\n\t\tremoveAll: function () {\n\n\t\t\tobjects = {};\n\n\t\t}\n\n\t};\n\n}\n\n/*********************************/\n/********** EXTENSIONS ***********/\n/*********************************/\n\nconst EXTENSIONS = {\n\tKHR_BINARY_GLTF: 'KHR_binary_glTF',\n\tKHR_DRACO_MESH_COMPRESSION: 'KHR_draco_mesh_compression',\n\tKHR_LIGHTS_PUNCTUAL: 'KHR_lights_punctual',\n\tKHR_MATERIALS_CLEARCOAT: 'KHR_materials_clearcoat',\n\tKHR_MATERIALS_DISPERSION: 'KHR_materials_dispersion',\n\tKHR_MATERIALS_IOR: 'KHR_materials_ior',\n\tKHR_MATERIALS_SHEEN: 'KHR_materials_sheen',\n\tKHR_MATERIALS_SPECULAR: 'KHR_materials_specular',\n\tKHR_MATERIALS_TRANSMISSION: 'KHR_materials_transmission',\n\tKHR_MATERIALS_IRIDESCENCE: 'KHR_materials_iridescence',\n\tKHR_MATERIALS_ANISOTROPY: 'KHR_materials_anisotropy',\n\tKHR_MATERIALS_UNLIT: 'KHR_materials_unlit',\n\tKHR_MATERIALS_VOLUME: 'KHR_materials_volume',\n\tKHR_TEXTURE_BASISU: 'KHR_texture_basisu',\n\tKHR_TEXTURE_TRANSFORM: 'KHR_texture_transform',\n\tKHR_MESH_QUANTIZATION: 'KHR_mesh_quantization',\n\tKHR_MATERIALS_EMISSIVE_STRENGTH: 'KHR_materials_emissive_strength',\n\tEXT_MATERIALS_BUMP: 'EXT_materials_bump',\n\tEXT_TEXTURE_WEBP: 'EXT_texture_webp',\n\tEXT_TEXTURE_AVIF: 'EXT_texture_avif',\n\tEXT_MESHOPT_COMPRESSION: 'EXT_meshopt_compression',\n\tEXT_MESH_GPU_INSTANCING: 'EXT_mesh_gpu_instancing'\n};\n\n/**\n * Punctual Lights Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_lights_punctual\n *\n * @private\n */\nclass GLTFLightsExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.KHR_LIGHTS_PUNCTUAL;\n\n\t\t// Object3D instance caches\n\t\tthis.cache = { refs: {}, uses: {} };\n\n\t}\n\n\t_markDefs() {\n\n\t\tconst parser = this.parser;\n\t\tconst nodeDefs = this.parser.json.nodes || [];\n\n\t\tfor ( let nodeIndex = 0, nodeLength = nodeDefs.length; nodeIndex < nodeLength; nodeIndex ++ ) {\n\n\t\t\tconst nodeDef = nodeDefs[ nodeIndex ];\n\n\t\t\tif ( nodeDef.extensions\n\t\t\t\t\t&& nodeDef.extensions[ this.name ]\n\t\t\t\t\t&& nodeDef.extensions[ this.name ].light !== undefined ) {\n\n\t\t\t\tparser._addNodeRef( this.cache, nodeDef.extensions[ this.name ].light );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_loadLight( lightIndex ) {\n\n\t\tconst parser = this.parser;\n\t\tconst cacheKey = 'light:' + lightIndex;\n\t\tlet dependency = parser.cache.get( cacheKey );\n\n\t\tif ( dependency ) return dependency;\n\n\t\tconst json = parser.json;\n\t\tconst extensions = ( json.extensions && json.extensions[ this.name ] ) || {};\n\t\tconst lightDefs = extensions.lights || [];\n\t\tconst lightDef = lightDefs[ lightIndex ];\n\t\tlet lightNode;\n\n\t\tconst color = new Color( 0xffffff );\n\n\t\tif ( lightDef.color !== undefined ) color.setRGB( lightDef.color[ 0 ], lightDef.color[ 1 ], lightDef.color[ 2 ], LinearSRGBColorSpace );\n\n\t\tconst range = lightDef.range !== undefined ? lightDef.range : 0;\n\n\t\tswitch ( lightDef.type ) {\n\n\t\t\tcase 'directional':\n\t\t\t\tlightNode = new DirectionalLight( color );\n\t\t\t\tlightNode.target.position.set( 0, 0, - 1 );\n\t\t\t\tlightNode.add( lightNode.target );\n\t\t\t\tbreak;\n\n\t\t\tcase 'point':\n\t\t\t\tlightNode = new PointLight( color );\n\t\t\t\tlightNode.distance = range;\n\t\t\t\tbreak;\n\n\t\t\tcase 'spot':\n\t\t\t\tlightNode = new SpotLight( color );\n\t\t\t\tlightNode.distance = range;\n\t\t\t\t// Handle spotlight properties.\n\t\t\t\tlightDef.spot = lightDef.spot || {};\n\t\t\t\tlightDef.spot.innerConeAngle = lightDef.spot.innerConeAngle !== undefined ? lightDef.spot.innerConeAngle : 0;\n\t\t\t\tlightDef.spot.outerConeAngle = lightDef.spot.outerConeAngle !== undefined ? lightDef.spot.outerConeAngle : Math.PI / 4.0;\n\t\t\t\tlightNode.angle = lightDef.spot.outerConeAngle;\n\t\t\t\tlightNode.penumbra = 1.0 - lightDef.spot.innerConeAngle / lightDef.spot.outerConeAngle;\n\t\t\t\tlightNode.target.position.set( 0, 0, - 1 );\n\t\t\t\tlightNode.add( lightNode.target );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'THREE.GLTFLoader: Unexpected light type: ' + lightDef.type );\n\n\t\t}\n\n\t\t// Some lights (e.g. spot) default to a position other than the origin. Reset the position\n\t\t// here, because node-level parsing will only override position if explicitly specified.\n\t\tlightNode.position.set( 0, 0, 0 );\n\n\t\tassignExtrasToUserData( lightNode, lightDef );\n\n\t\tif ( lightDef.intensity !== undefined ) lightNode.intensity = lightDef.intensity;\n\n\t\tlightNode.name = parser.createUniqueName( lightDef.name || ( 'light_' + lightIndex ) );\n\n\t\tdependency = Promise.resolve( lightNode );\n\n\t\tparser.cache.add( cacheKey, dependency );\n\n\t\treturn dependency;\n\n\t}\n\n\tgetDependency( type, index ) {\n\n\t\tif ( type !== 'light' ) return;\n\n\t\treturn this._loadLight( index );\n\n\t}\n\n\tcreateNodeAttachment( nodeIndex ) {\n\n\t\tconst self = this;\n\t\tconst parser = this.parser;\n\t\tconst json = parser.json;\n\t\tconst nodeDef = json.nodes[ nodeIndex ];\n\t\tconst lightDef = ( nodeDef.extensions && nodeDef.extensions[ this.name ] ) || {};\n\t\tconst lightIndex = lightDef.light;\n\n\t\tif ( lightIndex === undefined ) return null;\n\n\t\treturn this._loadLight( lightIndex ).then( function ( light ) {\n\n\t\t\treturn parser._getNodeRef( self.cache, lightIndex, light );\n\n\t\t} );\n\n\t}\n\n}\n\n/**\n * Unlit Materials Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_unlit\n *\n * @private\n */\nclass GLTFMaterialsUnlitExtension {\n\n\tconstructor() {\n\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_UNLIT;\n\n\t}\n\n\tgetMaterialType() {\n\n\t\treturn MeshBasicMaterial;\n\n\t}\n\n\textendParams( materialParams, materialDef, parser ) {\n\n\t\tconst pending = [];\n\n\t\tmaterialParams.color = new Color( 1.0, 1.0, 1.0 );\n\t\tmaterialParams.opacity = 1.0;\n\n\t\tconst metallicRoughness = materialDef.pbrMetallicRoughness;\n\n\t\tif ( metallicRoughness ) {\n\n\t\t\tif ( Array.isArray( metallicRoughness.baseColorFactor ) ) {\n\n\t\t\t\tconst array = metallicRoughness.baseColorFactor;\n\n\t\t\t\tmaterialParams.color.setRGB( array[ 0 ], array[ 1 ], array[ 2 ], LinearSRGBColorSpace );\n\t\t\t\tmaterialParams.opacity = array[ 3 ];\n\n\t\t\t}\n\n\t\t\tif ( metallicRoughness.baseColorTexture !== undefined ) {\n\n\t\t\t\tpending.push( parser.assignTexture( materialParams, 'map', metallicRoughness.baseColorTexture, SRGBColorSpace ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Promise.all( pending );\n\n\t}\n\n}\n\n/**\n * Materials Emissive Strength Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/blob/5768b3ce0ef32bc39cdf1bef10b948586635ead3/extensions/2.0/Khronos/KHR_materials_emissive_strength/README.md\n *\n * @private\n */\nclass GLTFMaterialsEmissiveStrengthExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_EMISSIVE_STRENGTH;\n\n\t}\n\n\textendMaterialParams( materialIndex, materialParams ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) {\n\n\t\t\treturn Promise.resolve();\n\n\t\t}\n\n\t\tconst emissiveStrength = materialDef.extensions[ this.name ].emissiveStrength;\n\n\t\tif ( emissiveStrength !== undefined ) {\n\n\t\t\tmaterialParams.emissiveIntensity = emissiveStrength;\n\n\t\t}\n\n\t\treturn Promise.resolve();\n\n\t}\n\n}\n\n/**\n * Clearcoat Materials Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_clearcoat\n *\n * @private\n */\nclass GLTFMaterialsClearcoatExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_CLEARCOAT;\n\n\t}\n\n\tgetMaterialType( materialIndex ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) return null;\n\n\t\treturn MeshPhysicalMaterial;\n\n\t}\n\n\textendMaterialParams( materialIndex, materialParams ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) {\n\n\t\t\treturn Promise.resolve();\n\n\t\t}\n\n\t\tconst pending = [];\n\n\t\tconst extension = materialDef.extensions[ this.name ];\n\n\t\tif ( extension.clearcoatFactor !== undefined ) {\n\n\t\t\tmaterialParams.clearcoat = extension.clearcoatFactor;\n\n\t\t}\n\n\t\tif ( extension.clearcoatTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'clearcoatMap', extension.clearcoatTexture ) );\n\n\t\t}\n\n\t\tif ( extension.clearcoatRoughnessFactor !== undefined ) {\n\n\t\t\tmaterialParams.clearcoatRoughness = extension.clearcoatRoughnessFactor;\n\n\t\t}\n\n\t\tif ( extension.clearcoatRoughnessTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'clearcoatRoughnessMap', extension.clearcoatRoughnessTexture ) );\n\n\t\t}\n\n\t\tif ( extension.clearcoatNormalTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'clearcoatNormalMap', extension.clearcoatNormalTexture ) );\n\n\t\t\tif ( extension.clearcoatNormalTexture.scale !== undefined ) {\n\n\t\t\t\tconst scale = extension.clearcoatNormalTexture.scale;\n\n\t\t\t\tmaterialParams.clearcoatNormalScale = new Vector2( scale, scale );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Promise.all( pending );\n\n\t}\n\n}\n\n/**\n * Materials dispersion Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/main/extensions/2.0/Khronos/KHR_materials_dispersion\n *\n * @private\n */\nclass GLTFMaterialsDispersionExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_DISPERSION;\n\n\t}\n\n\tgetMaterialType( materialIndex ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) return null;\n\n\t\treturn MeshPhysicalMaterial;\n\n\t}\n\n\textendMaterialParams( materialIndex, materialParams ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) {\n\n\t\t\treturn Promise.resolve();\n\n\t\t}\n\n\t\tconst extension = materialDef.extensions[ this.name ];\n\n\t\tmaterialParams.dispersion = extension.dispersion !== undefined ? extension.dispersion : 0;\n\n\t\treturn Promise.resolve();\n\n\t}\n\n}\n\n/**\n * Iridescence Materials Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_iridescence\n *\n * @private\n */\nclass GLTFMaterialsIridescenceExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_IRIDESCENCE;\n\n\t}\n\n\tgetMaterialType( materialIndex ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) return null;\n\n\t\treturn MeshPhysicalMaterial;\n\n\t}\n\n\textendMaterialParams( materialIndex, materialParams ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) {\n\n\t\t\treturn Promise.resolve();\n\n\t\t}\n\n\t\tconst pending = [];\n\n\t\tconst extension = materialDef.extensions[ this.name ];\n\n\t\tif ( extension.iridescenceFactor !== undefined ) {\n\n\t\t\tmaterialParams.iridescence = extension.iridescenceFactor;\n\n\t\t}\n\n\t\tif ( extension.iridescenceTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'iridescenceMap', extension.iridescenceTexture ) );\n\n\t\t}\n\n\t\tif ( extension.iridescenceIor !== undefined ) {\n\n\t\t\tmaterialParams.iridescenceIOR = extension.iridescenceIor;\n\n\t\t}\n\n\t\tif ( materialParams.iridescenceThicknessRange === undefined ) {\n\n\t\t\tmaterialParams.iridescenceThicknessRange = [ 100, 400 ];\n\n\t\t}\n\n\t\tif ( extension.iridescenceThicknessMinimum !== undefined ) {\n\n\t\t\tmaterialParams.iridescenceThicknessRange[ 0 ] = extension.iridescenceThicknessMinimum;\n\n\t\t}\n\n\t\tif ( extension.iridescenceThicknessMaximum !== undefined ) {\n\n\t\t\tmaterialParams.iridescenceThicknessRange[ 1 ] = extension.iridescenceThicknessMaximum;\n\n\t\t}\n\n\t\tif ( extension.iridescenceThicknessTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'iridescenceThicknessMap', extension.iridescenceThicknessTexture ) );\n\n\t\t}\n\n\t\treturn Promise.all( pending );\n\n\t}\n\n}\n\n/**\n * Sheen Materials Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/main/extensions/2.0/Khronos/KHR_materials_sheen\n *\n * @private\n */\nclass GLTFMaterialsSheenExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_SHEEN;\n\n\t}\n\n\tgetMaterialType( materialIndex ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) return null;\n\n\t\treturn MeshPhysicalMaterial;\n\n\t}\n\n\textendMaterialParams( materialIndex, materialParams ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) {\n\n\t\t\treturn Promise.resolve();\n\n\t\t}\n\n\t\tconst pending = [];\n\n\t\tmaterialParams.sheenColor = new Color( 0, 0, 0 );\n\t\tmaterialParams.sheenRoughness = 0;\n\t\tmaterialParams.sheen = 1;\n\n\t\tconst extension = materialDef.extensions[ this.name ];\n\n\t\tif ( extension.sheenColorFactor !== undefined ) {\n\n\t\t\tconst colorFactor = extension.sheenColorFactor;\n\t\t\tmaterialParams.sheenColor.setRGB( colorFactor[ 0 ], colorFactor[ 1 ], colorFactor[ 2 ], LinearSRGBColorSpace );\n\n\t\t}\n\n\t\tif ( extension.sheenRoughnessFactor !== undefined ) {\n\n\t\t\tmaterialParams.sheenRoughness = extension.sheenRoughnessFactor;\n\n\t\t}\n\n\t\tif ( extension.sheenColorTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'sheenColorMap', extension.sheenColorTexture, SRGBColorSpace ) );\n\n\t\t}\n\n\t\tif ( extension.sheenRoughnessTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'sheenRoughnessMap', extension.sheenRoughnessTexture ) );\n\n\t\t}\n\n\t\treturn Promise.all( pending );\n\n\t}\n\n}\n\n/**\n * Transmission Materials Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_transmission\n * Draft: https://github.com/KhronosGroup/glTF/pull/1698\n *\n * @private\n */\nclass GLTFMaterialsTransmissionExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_TRANSMISSION;\n\n\t}\n\n\tgetMaterialType( materialIndex ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) return null;\n\n\t\treturn MeshPhysicalMaterial;\n\n\t}\n\n\textendMaterialParams( materialIndex, materialParams ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) {\n\n\t\t\treturn Promise.resolve();\n\n\t\t}\n\n\t\tconst pending = [];\n\n\t\tconst extension = materialDef.extensions[ this.name ];\n\n\t\tif ( extension.transmissionFactor !== undefined ) {\n\n\t\t\tmaterialParams.transmission = extension.transmissionFactor;\n\n\t\t}\n\n\t\tif ( extension.transmissionTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'transmissionMap', extension.transmissionTexture ) );\n\n\t\t}\n\n\t\treturn Promise.all( pending );\n\n\t}\n\n}\n\n/**\n * Materials Volume Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_volume\n *\n * @private\n */\nclass GLTFMaterialsVolumeExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_VOLUME;\n\n\t}\n\n\tgetMaterialType( materialIndex ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) return null;\n\n\t\treturn MeshPhysicalMaterial;\n\n\t}\n\n\textendMaterialParams( materialIndex, materialParams ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) {\n\n\t\t\treturn Promise.resolve();\n\n\t\t}\n\n\t\tconst pending = [];\n\n\t\tconst extension = materialDef.extensions[ this.name ];\n\n\t\tmaterialParams.thickness = extension.thicknessFactor !== undefined ? extension.thicknessFactor : 0;\n\n\t\tif ( extension.thicknessTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'thicknessMap', extension.thicknessTexture ) );\n\n\t\t}\n\n\t\tmaterialParams.attenuationDistance = extension.attenuationDistance || Infinity;\n\n\t\tconst colorArray = extension.attenuationColor || [ 1, 1, 1 ];\n\t\tmaterialParams.attenuationColor = new Color().setRGB( colorArray[ 0 ], colorArray[ 1 ], colorArray[ 2 ], LinearSRGBColorSpace );\n\n\t\treturn Promise.all( pending );\n\n\t}\n\n}\n\n/**\n * Materials ior Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_ior\n *\n * @private\n */\nclass GLTFMaterialsIorExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_IOR;\n\n\t}\n\n\tgetMaterialType( materialIndex ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) return null;\n\n\t\treturn MeshPhysicalMaterial;\n\n\t}\n\n\textendMaterialParams( materialIndex, materialParams ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) {\n\n\t\t\treturn Promise.resolve();\n\n\t\t}\n\n\t\tconst extension = materialDef.extensions[ this.name ];\n\n\t\tmaterialParams.ior = extension.ior !== undefined ? extension.ior : 1.5;\n\n\t\treturn Promise.resolve();\n\n\t}\n\n}\n\n/**\n * Materials specular Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_specular\n *\n * @private\n */\nclass GLTFMaterialsSpecularExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_SPECULAR;\n\n\t}\n\n\tgetMaterialType( materialIndex ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) return null;\n\n\t\treturn MeshPhysicalMaterial;\n\n\t}\n\n\textendMaterialParams( materialIndex, materialParams ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) {\n\n\t\t\treturn Promise.resolve();\n\n\t\t}\n\n\t\tconst pending = [];\n\n\t\tconst extension = materialDef.extensions[ this.name ];\n\n\t\tmaterialParams.specularIntensity = extension.specularFactor !== undefined ? extension.specularFactor : 1.0;\n\n\t\tif ( extension.specularTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'specularIntensityMap', extension.specularTexture ) );\n\n\t\t}\n\n\t\tconst colorArray = extension.specularColorFactor || [ 1, 1, 1 ];\n\t\tmaterialParams.specularColor = new Color().setRGB( colorArray[ 0 ], colorArray[ 1 ], colorArray[ 2 ], LinearSRGBColorSpace );\n\n\t\tif ( extension.specularColorTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'specularColorMap', extension.specularColorTexture, SRGBColorSpace ) );\n\n\t\t}\n\n\t\treturn Promise.all( pending );\n\n\t}\n\n}\n\n\n/**\n * Materials bump Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/EXT_materials_bump\n *\n * @private\n */\nclass GLTFMaterialsBumpExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.EXT_MATERIALS_BUMP;\n\n\t}\n\n\tgetMaterialType( materialIndex ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) return null;\n\n\t\treturn MeshPhysicalMaterial;\n\n\t}\n\n\textendMaterialParams( materialIndex, materialParams ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) {\n\n\t\t\treturn Promise.resolve();\n\n\t\t}\n\n\t\tconst pending = [];\n\n\t\tconst extension = materialDef.extensions[ this.name ];\n\n\t\tmaterialParams.bumpScale = extension.bumpFactor !== undefined ? extension.bumpFactor : 1.0;\n\n\t\tif ( extension.bumpTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'bumpMap', extension.bumpTexture ) );\n\n\t\t}\n\n\t\treturn Promise.all( pending );\n\n\t}\n\n}\n\n/**\n * Materials anisotropy Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_anisotropy\n *\n * @private\n */\nclass GLTFMaterialsAnisotropyExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_ANISOTROPY;\n\n\t}\n\n\tgetMaterialType( materialIndex ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) return null;\n\n\t\treturn MeshPhysicalMaterial;\n\n\t}\n\n\textendMaterialParams( materialIndex, materialParams ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) {\n\n\t\t\treturn Promise.resolve();\n\n\t\t}\n\n\t\tconst pending = [];\n\n\t\tconst extension = materialDef.extensions[ this.name ];\n\n\t\tif ( extension.anisotropyStrength !== undefined ) {\n\n\t\t\tmaterialParams.anisotropy = extension.anisotropyStrength;\n\n\t\t}\n\n\t\tif ( extension.anisotropyRotation !== undefined ) {\n\n\t\t\tmaterialParams.anisotropyRotation = extension.anisotropyRotation;\n\n\t\t}\n\n\t\tif ( extension.anisotropyTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'anisotropyMap', extension.anisotropyTexture ) );\n\n\t\t}\n\n\t\treturn Promise.all( pending );\n\n\t}\n\n}\n\n/**\n * BasisU Texture Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_texture_basisu\n *\n * @private\n */\nclass GLTFTextureBasisUExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.KHR_TEXTURE_BASISU;\n\n\t}\n\n\tloadTexture( textureIndex ) {\n\n\t\tconst parser = this.parser;\n\t\tconst json = parser.json;\n\n\t\tconst textureDef = json.textures[ textureIndex ];\n\n\t\tif ( ! textureDef.extensions || ! textureDef.extensions[ this.name ] ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst extension = textureDef.extensions[ this.name ];\n\t\tconst loader = parser.options.ktx2Loader;\n\n\t\tif ( ! loader ) {\n\n\t\t\tif ( json.extensionsRequired && json.extensionsRequired.indexOf( this.name ) >= 0 ) {\n\n\t\t\t\tthrow new Error( 'THREE.GLTFLoader: setKTX2Loader must be called before loading KTX2 textures' );\n\n\t\t\t} else {\n\n\t\t\t\t// Assumes that the extension is optional and that a fallback texture is present\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn parser.loadTextureImage( textureIndex, extension.source, loader );\n\n\t}\n\n}\n\n/**\n * WebP Texture Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/EXT_texture_webp\n *\n * @private\n */\nclass GLTFTextureWebPExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.EXT_TEXTURE_WEBP;\n\n\t}\n\n\tloadTexture( textureIndex ) {\n\n\t\tconst name = this.name;\n\t\tconst parser = this.parser;\n\t\tconst json = parser.json;\n\n\t\tconst textureDef = json.textures[ textureIndex ];\n\n\t\tif ( ! textureDef.extensions || ! textureDef.extensions[ name ] ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst extension = textureDef.extensions[ name ];\n\t\tconst source = json.images[ extension.source ];\n\n\t\tlet loader = parser.textureLoader;\n\t\tif ( source.uri ) {\n\n\t\t\tconst handler = parser.options.manager.getHandler( source.uri );\n\t\t\tif ( handler !== null ) loader = handler;\n\n\t\t}\n\n\t\treturn parser.loadTextureImage( textureIndex, extension.source, loader );\n\n\t}\n\n}\n\n/**\n * AVIF Texture Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/EXT_texture_avif\n *\n * @private\n */\nclass GLTFTextureAVIFExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.EXT_TEXTURE_AVIF;\n\n\t}\n\n\tloadTexture( textureIndex ) {\n\n\t\tconst name = this.name;\n\t\tconst parser = this.parser;\n\t\tconst json = parser.json;\n\n\t\tconst textureDef = json.textures[ textureIndex ];\n\n\t\tif ( ! textureDef.extensions || ! textureDef.extensions[ name ] ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst extension = textureDef.extensions[ name ];\n\t\tconst source = json.images[ extension.source ];\n\n\t\tlet loader = parser.textureLoader;\n\t\tif ( source.uri ) {\n\n\t\t\tconst handler = parser.options.manager.getHandler( source.uri );\n\t\t\tif ( handler !== null ) loader = handler;\n\n\t\t}\n\n\t\treturn parser.loadTextureImage( textureIndex, extension.source, loader );\n\n\t}\n\n}\n\n/**\n * meshopt BufferView Compression Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/EXT_meshopt_compression\n *\n * @private\n */\nclass GLTFMeshoptCompression {\n\n\tconstructor( parser ) {\n\n\t\tthis.name = EXTENSIONS.EXT_MESHOPT_COMPRESSION;\n\t\tthis.parser = parser;\n\n\t}\n\n\tloadBufferView( index ) {\n\n\t\tconst json = this.parser.json;\n\t\tconst bufferView = json.bufferViews[ index ];\n\n\t\tif ( bufferView.extensions && bufferView.extensions[ this.name ] ) {\n\n\t\t\tconst extensionDef = bufferView.extensions[ this.name ];\n\n\t\t\tconst buffer = this.parser.getDependency( 'buffer', extensionDef.buffer );\n\t\t\tconst decoder = this.parser.options.meshoptDecoder;\n\n\t\t\tif ( ! decoder || ! decoder.supported ) {\n\n\t\t\t\tif ( json.extensionsRequired && json.extensionsRequired.indexOf( this.name ) >= 0 ) {\n\n\t\t\t\t\tthrow new Error( 'THREE.GLTFLoader: setMeshoptDecoder must be called before loading compressed files' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Assumes that the extension is optional and that fallback buffer data is present\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn buffer.then( function ( res ) {\n\n\t\t\t\tconst byteOffset = extensionDef.byteOffset || 0;\n\t\t\t\tconst byteLength = extensionDef.byteLength || 0;\n\n\t\t\t\tconst count = extensionDef.count;\n\t\t\t\tconst stride = extensionDef.byteStride;\n\n\t\t\t\tconst source = new Uint8Array( res, byteOffset, byteLength );\n\n\t\t\t\tif ( decoder.decodeGltfBufferAsync ) {\n\n\t\t\t\t\treturn decoder.decodeGltfBufferAsync( count, stride, source, extensionDef.mode, extensionDef.filter ).then( function ( res ) {\n\n\t\t\t\t\t\treturn res.buffer;\n\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Support for MeshoptDecoder 0.18 or earlier, without decodeGltfBufferAsync\n\t\t\t\t\treturn decoder.ready.then( function () {\n\n\t\t\t\t\t\tconst result = new ArrayBuffer( count * stride );\n\t\t\t\t\t\tdecoder.decodeGltfBuffer( new Uint8Array( result ), count, stride, source, extensionDef.mode, extensionDef.filter );\n\t\t\t\t\t\treturn result;\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t} else {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * GPU Instancing Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/EXT_mesh_gpu_instancing\n *\n * @private\n */\nclass GLTFMeshGpuInstancing {\n\n\tconstructor( parser ) {\n\n\t\tthis.name = EXTENSIONS.EXT_MESH_GPU_INSTANCING;\n\t\tthis.parser = parser;\n\n\t}\n\n\tcreateNodeMesh( nodeIndex ) {\n\n\t\tconst json = this.parser.json;\n\t\tconst nodeDef = json.nodes[ nodeIndex ];\n\n\t\tif ( ! nodeDef.extensions || ! nodeDef.extensions[ this.name ] ||\n\t\t\tnodeDef.mesh === undefined ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst meshDef = json.meshes[ nodeDef.mesh ];\n\n\t\t// No Points or Lines + Instancing support yet\n\n\t\tfor ( const primitive of meshDef.primitives ) {\n\n\t\t\tif ( primitive.mode !== WEBGL_CONSTANTS.TRIANGLES &&\n\t\t\t\t primitive.mode !== WEBGL_CONSTANTS.TRIANGLE_STRIP &&\n\t\t\t\t primitive.mode !== WEBGL_CONSTANTS.TRIANGLE_FAN &&\n\t\t\t\t primitive.mode !== undefined ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst extensionDef = nodeDef.extensions[ this.name ];\n\t\tconst attributesDef = extensionDef.attributes;\n\n\t\t// @TODO: Can we support InstancedMesh + SkinnedMesh?\n\n\t\tconst pending = [];\n\t\tconst attributes = {};\n\n\t\tfor ( const key in attributesDef ) {\n\n\t\t\tpending.push( this.parser.getDependency( 'accessor', attributesDef[ key ] ).then( accessor => {\n\n\t\t\t\tattributes[ key ] = accessor;\n\t\t\t\treturn attributes[ key ];\n\n\t\t\t} ) );\n\n\t\t}\n\n\t\tif ( pending.length < 1 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tpending.push( this.parser.createNodeMesh( nodeIndex ) );\n\n\t\treturn Promise.all( pending ).then( results => {\n\n\t\t\tconst nodeObject = results.pop();\n\t\t\tconst meshes = nodeObject.isGroup ? nodeObject.children : [ nodeObject ];\n\t\t\tconst count = results[ 0 ].count; // All attribute counts should be same\n\t\t\tconst instancedMeshes = [];\n\n\t\t\tfor ( const mesh of meshes ) {\n\n\t\t\t\t// Temporal variables\n\t\t\t\tconst m = new Matrix4();\n\t\t\t\tconst p = new Vector3();\n\t\t\t\tconst q = new Quaternion();\n\t\t\t\tconst s = new Vector3( 1, 1, 1 );\n\n\t\t\t\tconst instancedMesh = new InstancedMesh( mesh.geometry, mesh.material, count );\n\n\t\t\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\t\t\tif ( attributes.TRANSLATION ) {\n\n\t\t\t\t\t\tp.fromBufferAttribute( attributes.TRANSLATION, i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attributes.ROTATION ) {\n\n\t\t\t\t\t\tq.fromBufferAttribute( attributes.ROTATION, i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attributes.SCALE ) {\n\n\t\t\t\t\t\ts.fromBufferAttribute( attributes.SCALE, i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tinstancedMesh.setMatrixAt( i, m.compose( p, q, s ) );\n\n\t\t\t\t}\n\n\t\t\t\t// Add instance attributes to the geometry, excluding TRS.\n\t\t\t\tfor ( const attributeName in attributes ) {\n\n\t\t\t\t\tif ( attributeName === '_COLOR_0' ) {\n\n\t\t\t\t\t\tconst attr = attributes[ attributeName ];\n\t\t\t\t\t\tinstancedMesh.instanceColor = new InstancedBufferAttribute( attr.array, attr.itemSize, attr.normalized );\n\n\t\t\t\t\t} else if ( attributeName !== 'TRANSLATION' &&\n\t\t\t\t\t\t attributeName !== 'ROTATION' &&\n\t\t\t\t\t\t attributeName !== 'SCALE' ) {\n\n\t\t\t\t\t\tmesh.geometry.setAttribute( attributeName, attributes[ attributeName ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// Just in case\n\t\t\t\tObject3D.prototype.copy.call( instancedMesh, mesh );\n\n\t\t\t\tthis.parser.assignFinalMaterial( instancedMesh );\n\n\t\t\t\tinstancedMeshes.push( instancedMesh );\n\n\t\t\t}\n\n\t\t\tif ( nodeObject.isGroup ) {\n\n\t\t\t\tnodeObject.clear();\n\n\t\t\t\tnodeObject.add( ... instancedMeshes );\n\n\t\t\t\treturn nodeObject;\n\n\t\t\t}\n\n\t\t\treturn instancedMeshes[ 0 ];\n\n\t\t} );\n\n\t}\n\n}\n\n/* BINARY EXTENSION */\nconst BINARY_EXTENSION_HEADER_MAGIC = 'glTF';\nconst BINARY_EXTENSION_HEADER_LENGTH = 12;\nconst BINARY_EXTENSION_CHUNK_TYPES = { JSON: 0x4E4F534A, BIN: 0x004E4942 };\n\nclass GLTFBinaryExtension {\n\n\tconstructor( data ) {\n\n\t\tthis.name = EXTENSIONS.KHR_BINARY_GLTF;\n\t\tthis.content = null;\n\t\tthis.body = null;\n\n\t\tconst headerView = new DataView( data, 0, BINARY_EXTENSION_HEADER_LENGTH );\n\t\tconst textDecoder = new TextDecoder();\n\n\t\tthis.header = {\n\t\t\tmagic: textDecoder.decode( new Uint8Array( data.slice( 0, 4 ) ) ),\n\t\t\tversion: headerView.getUint32( 4, true ),\n\t\t\tlength: headerView.getUint32( 8, true )\n\t\t};\n\n\t\tif ( this.header.magic !== BINARY_EXTENSION_HEADER_MAGIC ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: Unsupported glTF-Binary header.' );\n\n\t\t} else if ( this.header.version < 2.0 ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: Legacy binary file detected.' );\n\n\t\t}\n\n\t\tconst chunkContentsLength = this.header.length - BINARY_EXTENSION_HEADER_LENGTH;\n\t\tconst chunkView = new DataView( data, BINARY_EXTENSION_HEADER_LENGTH );\n\t\tlet chunkIndex = 0;\n\n\t\twhile ( chunkIndex < chunkContentsLength ) {\n\n\t\t\tconst chunkLength = chunkView.getUint32( chunkIndex, true );\n\t\t\tchunkIndex += 4;\n\n\t\t\tconst chunkType = chunkView.getUint32( chunkIndex, true );\n\t\t\tchunkIndex += 4;\n\n\t\t\tif ( chunkType === BINARY_EXTENSION_CHUNK_TYPES.JSON ) {\n\n\t\t\t\tconst contentArray = new Uint8Array( data, BINARY_EXTENSION_HEADER_LENGTH + chunkIndex, chunkLength );\n\t\t\t\tthis.content = textDecoder.decode( contentArray );\n\n\t\t\t} else if ( chunkType === BINARY_EXTENSION_CHUNK_TYPES.BIN ) {\n\n\t\t\t\tconst byteOffset = BINARY_EXTENSION_HEADER_LENGTH + chunkIndex;\n\t\t\t\tthis.body = data.slice( byteOffset, byteOffset + chunkLength );\n\n\t\t\t}\n\n\t\t\t// Clients must ignore chunks with unknown types.\n\n\t\t\tchunkIndex += chunkLength;\n\n\t\t}\n\n\t\tif ( this.content === null ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: JSON content not found.' );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * DRACO Mesh Compression Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_draco_mesh_compression\n *\n * @private\n */\nclass GLTFDracoMeshCompressionExtension {\n\n\tconstructor( json, dracoLoader ) {\n\n\t\tif ( ! dracoLoader ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: No DRACOLoader instance provided.' );\n\n\t\t}\n\n\t\tthis.name = EXTENSIONS.KHR_DRACO_MESH_COMPRESSION;\n\t\tthis.json = json;\n\t\tthis.dracoLoader = dracoLoader;\n\t\tthis.dracoLoader.preload();\n\n\t}\n\n\tdecodePrimitive( primitive, parser ) {\n\n\t\tconst json = this.json;\n\t\tconst dracoLoader = this.dracoLoader;\n\t\tconst bufferViewIndex = primitive.extensions[ this.name ].bufferView;\n\t\tconst gltfAttributeMap = primitive.extensions[ this.name ].attributes;\n\t\tconst threeAttributeMap = {};\n\t\tconst attributeNormalizedMap = {};\n\t\tconst attributeTypeMap = {};\n\n\t\tfor ( const attributeName in gltfAttributeMap ) {\n\n\t\t\tconst threeAttributeName = ATTRIBUTES[ attributeName ] || attributeName.toLowerCase();\n\n\t\t\tthreeAttributeMap[ threeAttributeName ] = gltfAttributeMap[ attributeName ];\n\n\t\t}\n\n\t\tfor ( const attributeName in primitive.attributes ) {\n\n\t\t\tconst threeAttributeName = ATTRIBUTES[ attributeName ] || attributeName.toLowerCase();\n\n\t\t\tif ( gltfAttributeMap[ attributeName ] !== undefined ) {\n\n\t\t\t\tconst accessorDef = json.accessors[ primitive.attributes[ attributeName ] ];\n\t\t\t\tconst componentType = WEBGL_COMPONENT_TYPES[ accessorDef.componentType ];\n\n\t\t\t\tattributeTypeMap[ threeAttributeName ] = componentType.name;\n\t\t\t\tattributeNormalizedMap[ threeAttributeName ] = accessorDef.normalized === true;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn parser.getDependency( 'bufferView', bufferViewIndex ).then( function ( bufferView ) {\n\n\t\t\treturn new Promise( function ( resolve, reject ) {\n\n\t\t\t\tdracoLoader.decodeDracoFile( bufferView, function ( geometry ) {\n\n\t\t\t\t\tfor ( const attributeName in geometry.attributes ) {\n\n\t\t\t\t\t\tconst attribute = geometry.attributes[ attributeName ];\n\t\t\t\t\t\tconst normalized = attributeNormalizedMap[ attributeName ];\n\n\t\t\t\t\t\tif ( normalized !== undefined ) attribute.normalized = normalized;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve( geometry );\n\n\t\t\t\t}, threeAttributeMap, attributeTypeMap, LinearSRGBColorSpace, reject );\n\n\t\t\t} );\n\n\t\t} );\n\n\t}\n\n}\n\n/**\n * Texture Transform Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_texture_transform\n *\n * @private\n */\nclass GLTFTextureTransformExtension {\n\n\tconstructor() {\n\n\t\tthis.name = EXTENSIONS.KHR_TEXTURE_TRANSFORM;\n\n\t}\n\n\textendTexture( texture, transform ) {\n\n\t\tif ( ( transform.texCoord === undefined || transform.texCoord === texture.channel )\n\t\t\t&& transform.offset === undefined\n\t\t\t&& transform.rotation === undefined\n\t\t\t&& transform.scale === undefined ) {\n\n\t\t\t// See https://github.com/mrdoob/three.js/issues/21819.\n\t\t\treturn texture;\n\n\t\t}\n\n\t\ttexture = texture.clone();\n\n\t\tif ( transform.texCoord !== undefined ) {\n\n\t\t\ttexture.channel = transform.texCoord;\n\n\t\t}\n\n\t\tif ( transform.offset !== undefined ) {\n\n\t\t\ttexture.offset.fromArray( transform.offset );\n\n\t\t}\n\n\t\tif ( transform.rotation !== undefined ) {\n\n\t\t\ttexture.rotation = transform.rotation;\n\n\t\t}\n\n\t\tif ( transform.scale !== undefined ) {\n\n\t\t\ttexture.repeat.fromArray( transform.scale );\n\n\t\t}\n\n\t\ttexture.needsUpdate = true;\n\n\t\treturn texture;\n\n\t}\n\n}\n\n/**\n * Mesh Quantization Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_mesh_quantization\n *\n * @private\n */\nclass GLTFMeshQuantizationExtension {\n\n\tconstructor() {\n\n\t\tthis.name = EXTENSIONS.KHR_MESH_QUANTIZATION;\n\n\t}\n\n}\n\n/*********************************/\n/********** INTERPOLATION ********/\n/*********************************/\n\n// Spline Interpolation\n// Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#appendix-c-spline-interpolation\nclass GLTFCubicSplineInterpolant extends Interpolant {\n\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tcopySampleValue_( index ) {\n\n\t\t// Copies a sample value to the result buffer. See description of glTF\n\t\t// CUBICSPLINE values layout in interpolate_() function below.\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tvalueSize = this.valueSize,\n\t\t\toffset = index * valueSize * 3 + valueSize;\n\n\t\tfor ( let i = 0; i !== valueSize; i ++ ) {\n\n\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tinterpolate_( i1, t0, t, t1 ) {\n\n\t\tconst result = this.resultBuffer;\n\t\tconst values = this.sampleValues;\n\t\tconst stride = this.valueSize;\n\n\t\tconst stride2 = stride * 2;\n\t\tconst stride3 = stride * 3;\n\n\t\tconst td = t1 - t0;\n\n\t\tconst p = ( t - t0 ) / td;\n\t\tconst pp = p * p;\n\t\tconst ppp = pp * p;\n\n\t\tconst offset1 = i1 * stride3;\n\t\tconst offset0 = offset1 - stride3;\n\n\t\tconst s2 = - 2 * ppp + 3 * pp;\n\t\tconst s3 = ppp - pp;\n\t\tconst s0 = 1 - s2;\n\t\tconst s1 = s3 - pp + p;\n\n\t\t// Layout of keyframe output values for CUBICSPLINE animations:\n\t\t//   [ inTangent_1, splineVertex_1, outTangent_1, inTangent_2, splineVertex_2, ... ]\n\t\tfor ( let i = 0; i !== stride; i ++ ) {\n\n\t\t\tconst p0 = values[ offset0 + i + stride ]; // splineVertex_k\n\t\t\tconst m0 = values[ offset0 + i + stride2 ] * td; // outTangent_k * (t_k+1 - t_k)\n\t\t\tconst p1 = values[ offset1 + i + stride ]; // splineVertex_k+1\n\t\t\tconst m1 = values[ offset1 + i ] * td; // inTangent_k+1 * (t_k+1 - t_k)\n\n\t\t\tresult[ i ] = s0 * p0 + s1 * m0 + s2 * p1 + s3 * m1;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n}\n\nconst _quaternion = new Quaternion();\n\nclass GLTFCubicSplineQuaternionInterpolant extends GLTFCubicSplineInterpolant {\n\n\tinterpolate_( i1, t0, t, t1 ) {\n\n\t\tconst result = super.interpolate_( i1, t0, t, t1 );\n\n\t\t_quaternion.fromArray( result ).normalize().toArray( result );\n\n\t\treturn result;\n\n\t}\n\n}\n\n\n/*********************************/\n/********** INTERNALS ************/\n/*********************************/\n\n/* CONSTANTS */\n\nconst WEBGL_CONSTANTS = {\n\tFLOAT: 5126,\n\t//FLOAT_MAT2: 35674,\n\tFLOAT_MAT3: 35675,\n\tFLOAT_MAT4: 35676,\n\tFLOAT_VEC2: 35664,\n\tFLOAT_VEC3: 35665,\n\tFLOAT_VEC4: 35666,\n\tLINEAR: 9729,\n\tREPEAT: 10497,\n\tSAMPLER_2D: 35678,\n\tPOINTS: 0,\n\tLINES: 1,\n\tLINE_LOOP: 2,\n\tLINE_STRIP: 3,\n\tTRIANGLES: 4,\n\tTRIANGLE_STRIP: 5,\n\tTRIANGLE_FAN: 6,\n\tUNSIGNED_BYTE: 5121,\n\tUNSIGNED_SHORT: 5123\n};\n\nconst WEBGL_COMPONENT_TYPES = {\n\t5120: Int8Array,\n\t5121: Uint8Array,\n\t5122: Int16Array,\n\t5123: Uint16Array,\n\t5125: Uint32Array,\n\t5126: Float32Array\n};\n\nconst WEBGL_FILTERS = {\n\t9728: NearestFilter,\n\t9729: LinearFilter,\n\t9984: NearestMipmapNearestFilter,\n\t9985: LinearMipmapNearestFilter,\n\t9986: NearestMipmapLinearFilter,\n\t9987: LinearMipmapLinearFilter\n};\n\nconst WEBGL_WRAPPINGS = {\n\t33071: ClampToEdgeWrapping,\n\t33648: MirroredRepeatWrapping,\n\t10497: RepeatWrapping\n};\n\nconst WEBGL_TYPE_SIZES = {\n\t'SCALAR': 1,\n\t'VEC2': 2,\n\t'VEC3': 3,\n\t'VEC4': 4,\n\t'MAT2': 4,\n\t'MAT3': 9,\n\t'MAT4': 16\n};\n\nconst ATTRIBUTES = {\n\tPOSITION: 'position',\n\tNORMAL: 'normal',\n\tTANGENT: 'tangent',\n\tTEXCOORD_0: 'uv',\n\tTEXCOORD_1: 'uv1',\n\tTEXCOORD_2: 'uv2',\n\tTEXCOORD_3: 'uv3',\n\tCOLOR_0: 'color',\n\tWEIGHTS_0: 'skinWeight',\n\tJOINTS_0: 'skinIndex',\n};\n\nconst PATH_PROPERTIES = {\n\tscale: 'scale',\n\ttranslation: 'position',\n\trotation: 'quaternion',\n\tweights: 'morphTargetInfluences'\n};\n\nconst INTERPOLATION = {\n\tCUBICSPLINE: undefined, // We use a custom interpolant (GLTFCubicSplineInterpolation) for CUBICSPLINE tracks. Each\n\t\t                        // keyframe track will be initialized with a default interpolation type, then modified.\n\tLINEAR: InterpolateLinear,\n\tSTEP: InterpolateDiscrete\n};\n\nconst ALPHA_MODES = {\n\tOPAQUE: 'OPAQUE',\n\tMASK: 'MASK',\n\tBLEND: 'BLEND'\n};\n\n/**\n * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#default-material\n *\n * @private\n * @param {Object<string, Material>} cache\n * @return {Material}\n */\nfunction createDefaultMaterial( cache ) {\n\n\tif ( cache[ 'DefaultMaterial' ] === undefined ) {\n\n\t\tcache[ 'DefaultMaterial' ] = new MeshStandardMaterial( {\n\t\t\tcolor: 0xFFFFFF,\n\t\t\temissive: 0x000000,\n\t\t\tmetalness: 1,\n\t\t\troughness: 1,\n\t\t\ttransparent: false,\n\t\t\tdepthTest: true,\n\t\t\tside: FrontSide\n\t\t} );\n\n\t}\n\n\treturn cache[ 'DefaultMaterial' ];\n\n}\n\nfunction addUnknownExtensionsToUserData( knownExtensions, object, objectDef ) {\n\n\t// Add unknown glTF extensions to an object's userData.\n\n\tfor ( const name in objectDef.extensions ) {\n\n\t\tif ( knownExtensions[ name ] === undefined ) {\n\n\t\t\tobject.userData.gltfExtensions = object.userData.gltfExtensions || {};\n\t\t\tobject.userData.gltfExtensions[ name ] = objectDef.extensions[ name ];\n\n\t\t}\n\n\t}\n\n}\n\n/**\n *\n * @private\n * @param {Object3D|Material|BufferGeometry|Object} object\n * @param {GLTF.definition} gltfDef\n */\nfunction assignExtrasToUserData( object, gltfDef ) {\n\n\tif ( gltfDef.extras !== undefined ) {\n\n\t\tif ( typeof gltfDef.extras === 'object' ) {\n\n\t\t\tObject.assign( object.userData, gltfDef.extras );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.GLTFLoader: Ignoring primitive type .extras, ' + gltfDef.extras );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#morph-targets\n *\n * @private\n * @param {BufferGeometry} geometry\n * @param {Array<GLTF.Target>} targets\n * @param {GLTFParser} parser\n * @return {Promise<BufferGeometry>}\n */\nfunction addMorphTargets( geometry, targets, parser ) {\n\n\tlet hasMorphPosition = false;\n\tlet hasMorphNormal = false;\n\tlet hasMorphColor = false;\n\n\tfor ( let i = 0, il = targets.length; i < il; i ++ ) {\n\n\t\tconst target = targets[ i ];\n\n\t\tif ( target.POSITION !== undefined ) hasMorphPosition = true;\n\t\tif ( target.NORMAL !== undefined ) hasMorphNormal = true;\n\t\tif ( target.COLOR_0 !== undefined ) hasMorphColor = true;\n\n\t\tif ( hasMorphPosition && hasMorphNormal && hasMorphColor ) break;\n\n\t}\n\n\tif ( ! hasMorphPosition && ! hasMorphNormal && ! hasMorphColor ) return Promise.resolve( geometry );\n\n\tconst pendingPositionAccessors = [];\n\tconst pendingNormalAccessors = [];\n\tconst pendingColorAccessors = [];\n\n\tfor ( let i = 0, il = targets.length; i < il; i ++ ) {\n\n\t\tconst target = targets[ i ];\n\n\t\tif ( hasMorphPosition ) {\n\n\t\t\tconst pendingAccessor = target.POSITION !== undefined\n\t\t\t\t? parser.getDependency( 'accessor', target.POSITION )\n\t\t\t\t: geometry.attributes.position;\n\n\t\t\tpendingPositionAccessors.push( pendingAccessor );\n\n\t\t}\n\n\t\tif ( hasMorphNormal ) {\n\n\t\t\tconst pendingAccessor = target.NORMAL !== undefined\n\t\t\t\t? parser.getDependency( 'accessor', target.NORMAL )\n\t\t\t\t: geometry.attributes.normal;\n\n\t\t\tpendingNormalAccessors.push( pendingAccessor );\n\n\t\t}\n\n\t\tif ( hasMorphColor ) {\n\n\t\t\tconst pendingAccessor = target.COLOR_0 !== undefined\n\t\t\t\t? parser.getDependency( 'accessor', target.COLOR_0 )\n\t\t\t\t: geometry.attributes.color;\n\n\t\t\tpendingColorAccessors.push( pendingAccessor );\n\n\t\t}\n\n\t}\n\n\treturn Promise.all( [\n\t\tPromise.all( pendingPositionAccessors ),\n\t\tPromise.all( pendingNormalAccessors ),\n\t\tPromise.all( pendingColorAccessors )\n\t] ).then( function ( accessors ) {\n\n\t\tconst morphPositions = accessors[ 0 ];\n\t\tconst morphNormals = accessors[ 1 ];\n\t\tconst morphColors = accessors[ 2 ];\n\n\t\tif ( hasMorphPosition ) geometry.morphAttributes.position = morphPositions;\n\t\tif ( hasMorphNormal ) geometry.morphAttributes.normal = morphNormals;\n\t\tif ( hasMorphColor ) geometry.morphAttributes.color = morphColors;\n\t\tgeometry.morphTargetsRelative = true;\n\n\t\treturn geometry;\n\n\t} );\n\n}\n\n/**\n *\n * @private\n * @param {Mesh} mesh\n * @param {GLTF.Mesh} meshDef\n */\nfunction updateMorphTargets( mesh, meshDef ) {\n\n\tmesh.updateMorphTargets();\n\n\tif ( meshDef.weights !== undefined ) {\n\n\t\tfor ( let i = 0, il = meshDef.weights.length; i < il; i ++ ) {\n\n\t\t\tmesh.morphTargetInfluences[ i ] = meshDef.weights[ i ];\n\n\t\t}\n\n\t}\n\n\t// .extras has user-defined data, so check that .extras.targetNames is an array.\n\tif ( meshDef.extras && Array.isArray( meshDef.extras.targetNames ) ) {\n\n\t\tconst targetNames = meshDef.extras.targetNames;\n\n\t\tif ( mesh.morphTargetInfluences.length === targetNames.length ) {\n\n\t\t\tmesh.morphTargetDictionary = {};\n\n\t\t\tfor ( let i = 0, il = targetNames.length; i < il; i ++ ) {\n\n\t\t\t\tmesh.morphTargetDictionary[ targetNames[ i ] ] = i;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.' );\n\n\t\t}\n\n\t}\n\n}\n\nfunction createPrimitiveKey( primitiveDef ) {\n\n\tlet geometryKey;\n\n\tconst dracoExtension = primitiveDef.extensions && primitiveDef.extensions[ EXTENSIONS.KHR_DRACO_MESH_COMPRESSION ];\n\n\tif ( dracoExtension ) {\n\n\t\tgeometryKey = 'draco:' + dracoExtension.bufferView\n\t\t\t\t+ ':' + dracoExtension.indices\n\t\t\t\t+ ':' + createAttributesKey( dracoExtension.attributes );\n\n\t} else {\n\n\t\tgeometryKey = primitiveDef.indices + ':' + createAttributesKey( primitiveDef.attributes ) + ':' + primitiveDef.mode;\n\n\t}\n\n\tif ( primitiveDef.targets !== undefined ) {\n\n\t\tfor ( let i = 0, il = primitiveDef.targets.length; i < il; i ++ ) {\n\n\t\t\tgeometryKey += ':' + createAttributesKey( primitiveDef.targets[ i ] );\n\n\t\t}\n\n\t}\n\n\treturn geometryKey;\n\n}\n\nfunction createAttributesKey( attributes ) {\n\n\tlet attributesKey = '';\n\n\tconst keys = Object.keys( attributes ).sort();\n\n\tfor ( let i = 0, il = keys.length; i < il; i ++ ) {\n\n\t\tattributesKey += keys[ i ] + ':' + attributes[ keys[ i ] ] + ';';\n\n\t}\n\n\treturn attributesKey;\n\n}\n\nfunction getNormalizedComponentScale( constructor ) {\n\n\t// Reference:\n\t// https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_mesh_quantization#encoding-quantized-data\n\n\tswitch ( constructor ) {\n\n\t\tcase Int8Array:\n\t\t\treturn 1 / 127;\n\n\t\tcase Uint8Array:\n\t\t\treturn 1 / 255;\n\n\t\tcase Int16Array:\n\t\t\treturn 1 / 32767;\n\n\t\tcase Uint16Array:\n\t\t\treturn 1 / 65535;\n\n\t\tdefault:\n\t\t\tthrow new Error( 'THREE.GLTFLoader: Unsupported normalized accessor component type.' );\n\n\t}\n\n}\n\nfunction getImageURIMimeType( uri ) {\n\n\tif ( uri.search( /\\.jpe?g($|\\?)/i ) > 0 || uri.search( /^data\\:image\\/jpeg/ ) === 0 ) return 'image/jpeg';\n\tif ( uri.search( /\\.webp($|\\?)/i ) > 0 || uri.search( /^data\\:image\\/webp/ ) === 0 ) return 'image/webp';\n\tif ( uri.search( /\\.ktx2($|\\?)/i ) > 0 || uri.search( /^data\\:image\\/ktx2/ ) === 0 ) return 'image/ktx2';\n\n\treturn 'image/png';\n\n}\n\nconst _identityMatrix = new Matrix4();\n\n/* GLTF PARSER */\n\nclass GLTFParser {\n\n\tconstructor( json = {}, options = {} ) {\n\n\t\tthis.json = json;\n\t\tthis.extensions = {};\n\t\tthis.plugins = {};\n\t\tthis.options = options;\n\n\t\t// loader object cache\n\t\tthis.cache = new GLTFRegistry();\n\n\t\t// associations between Three.js objects and glTF elements\n\t\tthis.associations = new Map();\n\n\t\t// BufferGeometry caching\n\t\tthis.primitiveCache = {};\n\n\t\t// Node cache\n\t\tthis.nodeCache = {};\n\n\t\t// Object3D instance caches\n\t\tthis.meshCache = { refs: {}, uses: {} };\n\t\tthis.cameraCache = { refs: {}, uses: {} };\n\t\tthis.lightCache = { refs: {}, uses: {} };\n\n\t\tthis.sourceCache = {};\n\t\tthis.textureCache = {};\n\n\t\t// Track node names, to ensure no duplicates\n\t\tthis.nodeNamesUsed = {};\n\n\t\t// Use an ImageBitmapLoader if imageBitmaps are supported. Moves much of the\n\t\t// expensive work of uploading a texture to the GPU off the main thread.\n\n\t\tlet isSafari = false;\n\t\tlet safariVersion = - 1;\n\t\tlet isFirefox = false;\n\t\tlet firefoxVersion = - 1;\n\n\t\tif ( typeof navigator !== 'undefined' ) {\n\n\t\t\tconst userAgent = navigator.userAgent;\n\n\t\t\tisSafari = /^((?!chrome|android).)*safari/i.test( userAgent ) === true;\n\t\t\tconst safariMatch = userAgent.match( /Version\\/(\\d+)/ );\n\t\t\tsafariVersion = isSafari && safariMatch ? parseInt( safariMatch[ 1 ], 10 ) : - 1;\n\n\t\t\tisFirefox = userAgent.indexOf( 'Firefox' ) > - 1;\n\t\t\tfirefoxVersion = isFirefox ? userAgent.match( /Firefox\\/([0-9]+)\\./ )[ 1 ] : - 1;\n\n\t\t}\n\n\t\tif ( typeof createImageBitmap === 'undefined' || ( isSafari && safariVersion < 17 ) || ( isFirefox && firefoxVersion < 98 ) ) {\n\n\t\t\tthis.textureLoader = new TextureLoader( this.options.manager );\n\n\t\t} else {\n\n\t\t\tthis.textureLoader = new ImageBitmapLoader( this.options.manager );\n\n\t\t}\n\n\t\tthis.textureLoader.setCrossOrigin( this.options.crossOrigin );\n\t\tthis.textureLoader.setRequestHeader( this.options.requestHeader );\n\n\t\tthis.fileLoader = new FileLoader( this.options.manager );\n\t\tthis.fileLoader.setResponseType( 'arraybuffer' );\n\n\t\tif ( this.options.crossOrigin === 'use-credentials' ) {\n\n\t\t\tthis.fileLoader.setWithCredentials( true );\n\n\t\t}\n\n\t}\n\n\tsetExtensions( extensions ) {\n\n\t\tthis.extensions = extensions;\n\n\t}\n\n\tsetPlugins( plugins ) {\n\n\t\tthis.plugins = plugins;\n\n\t}\n\n\tparse( onLoad, onError ) {\n\n\t\tconst parser = this;\n\t\tconst json = this.json;\n\t\tconst extensions = this.extensions;\n\n\t\t// Clear the loader cache\n\t\tthis.cache.removeAll();\n\t\tthis.nodeCache = {};\n\n\t\t// Mark the special nodes/meshes in json for efficient parse\n\t\tthis._invokeAll( function ( ext ) {\n\n\t\t\treturn ext._markDefs && ext._markDefs();\n\n\t\t} );\n\n\t\tPromise.all( this._invokeAll( function ( ext ) {\n\n\t\t\treturn ext.beforeRoot && ext.beforeRoot();\n\n\t\t} ) ).then( function () {\n\n\t\t\treturn Promise.all( [\n\n\t\t\t\tparser.getDependencies( 'scene' ),\n\t\t\t\tparser.getDependencies( 'animation' ),\n\t\t\t\tparser.getDependencies( 'camera' ),\n\n\t\t\t] );\n\n\t\t} ).then( function ( dependencies ) {\n\n\t\t\tconst result = {\n\t\t\t\tscene: dependencies[ 0 ][ json.scene || 0 ],\n\t\t\t\tscenes: dependencies[ 0 ],\n\t\t\t\tanimations: dependencies[ 1 ],\n\t\t\t\tcameras: dependencies[ 2 ],\n\t\t\t\tasset: json.asset,\n\t\t\t\tparser: parser,\n\t\t\t\tuserData: {}\n\t\t\t};\n\n\t\t\taddUnknownExtensionsToUserData( extensions, result, json );\n\n\t\t\tassignExtrasToUserData( result, json );\n\n\t\t\treturn Promise.all( parser._invokeAll( function ( ext ) {\n\n\t\t\t\treturn ext.afterRoot && ext.afterRoot( result );\n\n\t\t\t} ) ).then( function () {\n\n\t\t\t\tfor ( const scene of result.scenes ) {\n\n\t\t\t\t\tscene.updateMatrixWorld();\n\n\t\t\t\t}\n\n\t\t\t\tonLoad( result );\n\n\t\t\t} );\n\n\t\t} ).catch( onError );\n\n\t}\n\n\t/**\n\t * Marks the special nodes/meshes in json for efficient parse.\n\t *\n\t * @private\n\t */\n\t_markDefs() {\n\n\t\tconst nodeDefs = this.json.nodes || [];\n\t\tconst skinDefs = this.json.skins || [];\n\t\tconst meshDefs = this.json.meshes || [];\n\n\t\t// Nothing in the node definition indicates whether it is a Bone or an\n\t\t// Object3D. Use the skins' joint references to mark bones.\n\t\tfor ( let skinIndex = 0, skinLength = skinDefs.length; skinIndex < skinLength; skinIndex ++ ) {\n\n\t\t\tconst joints = skinDefs[ skinIndex ].joints;\n\n\t\t\tfor ( let i = 0, il = joints.length; i < il; i ++ ) {\n\n\t\t\t\tnodeDefs[ joints[ i ] ].isBone = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Iterate over all nodes, marking references to shared resources,\n\t\t// as well as skeleton joints.\n\t\tfor ( let nodeIndex = 0, nodeLength = nodeDefs.length; nodeIndex < nodeLength; nodeIndex ++ ) {\n\n\t\t\tconst nodeDef = nodeDefs[ nodeIndex ];\n\n\t\t\tif ( nodeDef.mesh !== undefined ) {\n\n\t\t\t\tthis._addNodeRef( this.meshCache, nodeDef.mesh );\n\n\t\t\t\t// Nothing in the mesh definition indicates whether it is\n\t\t\t\t// a SkinnedMesh or Mesh. Use the node's mesh reference\n\t\t\t\t// to mark SkinnedMesh if node has skin.\n\t\t\t\tif ( nodeDef.skin !== undefined ) {\n\n\t\t\t\t\tmeshDefs[ nodeDef.mesh ].isSkinnedMesh = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( nodeDef.camera !== undefined ) {\n\n\t\t\t\tthis._addNodeRef( this.cameraCache, nodeDef.camera );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Counts references to shared node / Object3D resources. These resources\n\t * can be reused, or \"instantiated\", at multiple nodes in the scene\n\t * hierarchy. Mesh, Camera, and Light instances are instantiated and must\n\t * be marked. Non-scenegraph resources (like Materials, Geometries, and\n\t * Textures) can be reused directly and are not marked here.\n\t *\n\t * Example: CesiumMilkTruck sample model reuses \"Wheel\" meshes.\n\t *\n\t * @private\n\t * @param {Object} cache\n\t * @param {Object3D} index\n\t */\n\t_addNodeRef( cache, index ) {\n\n\t\tif ( index === undefined ) return;\n\n\t\tif ( cache.refs[ index ] === undefined ) {\n\n\t\t\tcache.refs[ index ] = cache.uses[ index ] = 0;\n\n\t\t}\n\n\t\tcache.refs[ index ] ++;\n\n\t}\n\n\t/**\n\t * Returns a reference to a shared resource, cloning it if necessary.\n\t *\n\t * @private\n\t * @param {Object} cache\n\t * @param {number} index\n\t * @param {Object} object\n\t * @return {Object}\n\t */\n\t_getNodeRef( cache, index, object ) {\n\n\t\tif ( cache.refs[ index ] <= 1 ) return object;\n\n\t\tconst ref = object.clone();\n\n\t\t// Propagates mappings to the cloned object, prevents mappings on the\n\t\t// original object from being lost.\n\t\tconst updateMappings = ( original, clone ) => {\n\n\t\t\tconst mappings = this.associations.get( original );\n\t\t\tif ( mappings != null ) {\n\n\t\t\t\tthis.associations.set( clone, mappings );\n\n\t\t\t}\n\n\t\t\tfor ( const [ i, child ] of original.children.entries() ) {\n\n\t\t\t\tupdateMappings( child, clone.children[ i ] );\n\n\t\t\t}\n\n\t\t};\n\n\t\tupdateMappings( object, ref );\n\n\t\tref.name += '_instance_' + ( cache.uses[ index ] ++ );\n\n\t\treturn ref;\n\n\t}\n\n\t_invokeOne( func ) {\n\n\t\tconst extensions = Object.values( this.plugins );\n\t\textensions.push( this );\n\n\t\tfor ( let i = 0; i < extensions.length; i ++ ) {\n\n\t\t\tconst result = func( extensions[ i ] );\n\n\t\t\tif ( result ) return result;\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\t_invokeAll( func ) {\n\n\t\tconst extensions = Object.values( this.plugins );\n\t\textensions.unshift( this );\n\n\t\tconst pending = [];\n\n\t\tfor ( let i = 0; i < extensions.length; i ++ ) {\n\n\t\t\tconst result = func( extensions[ i ] );\n\n\t\t\tif ( result ) pending.push( result );\n\n\t\t}\n\n\t\treturn pending;\n\n\t}\n\n\t/**\n\t * Requests the specified dependency asynchronously, with caching.\n\t *\n\t * @private\n\t * @param {string} type\n\t * @param {number} index\n\t * @return {Promise<Object3D|Material|THREE.Texture|AnimationClip|ArrayBuffer|Object>}\n\t */\n\tgetDependency( type, index ) {\n\n\t\tconst cacheKey = type + ':' + index;\n\t\tlet dependency = this.cache.get( cacheKey );\n\n\t\tif ( ! dependency ) {\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 'scene':\n\t\t\t\t\tdependency = this.loadScene( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'node':\n\t\t\t\t\tdependency = this._invokeOne( function ( ext ) {\n\n\t\t\t\t\t\treturn ext.loadNode && ext.loadNode( index );\n\n\t\t\t\t\t} );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'mesh':\n\t\t\t\t\tdependency = this._invokeOne( function ( ext ) {\n\n\t\t\t\t\t\treturn ext.loadMesh && ext.loadMesh( index );\n\n\t\t\t\t\t} );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'accessor':\n\t\t\t\t\tdependency = this.loadAccessor( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'bufferView':\n\t\t\t\t\tdependency = this._invokeOne( function ( ext ) {\n\n\t\t\t\t\t\treturn ext.loadBufferView && ext.loadBufferView( index );\n\n\t\t\t\t\t} );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'buffer':\n\t\t\t\t\tdependency = this.loadBuffer( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'material':\n\t\t\t\t\tdependency = this._invokeOne( function ( ext ) {\n\n\t\t\t\t\t\treturn ext.loadMaterial && ext.loadMaterial( index );\n\n\t\t\t\t\t} );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'texture':\n\t\t\t\t\tdependency = this._invokeOne( function ( ext ) {\n\n\t\t\t\t\t\treturn ext.loadTexture && ext.loadTexture( index );\n\n\t\t\t\t\t} );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'skin':\n\t\t\t\t\tdependency = this.loadSkin( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'animation':\n\t\t\t\t\tdependency = this._invokeOne( function ( ext ) {\n\n\t\t\t\t\t\treturn ext.loadAnimation && ext.loadAnimation( index );\n\n\t\t\t\t\t} );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'camera':\n\t\t\t\t\tdependency = this.loadCamera( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tdependency = this._invokeOne( function ( ext ) {\n\n\t\t\t\t\t\treturn ext != this && ext.getDependency && ext.getDependency( type, index );\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tif ( ! dependency ) {\n\n\t\t\t\t\t\tthrow new Error( 'Unknown type: ' + type );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tthis.cache.add( cacheKey, dependency );\n\n\t\t}\n\n\t\treturn dependency;\n\n\t}\n\n\t/**\n\t * Requests all dependencies of the specified type asynchronously, with caching.\n\t *\n\t * @private\n\t * @param {string} type\n\t * @return {Promise<Array<Object>>}\n\t */\n\tgetDependencies( type ) {\n\n\t\tlet dependencies = this.cache.get( type );\n\n\t\tif ( ! dependencies ) {\n\n\t\t\tconst parser = this;\n\t\t\tconst defs = this.json[ type + ( type === 'mesh' ? 'es' : 's' ) ] || [];\n\n\t\t\tdependencies = Promise.all( defs.map( function ( def, index ) {\n\n\t\t\t\treturn parser.getDependency( type, index );\n\n\t\t\t} ) );\n\n\t\t\tthis.cache.add( type, dependencies );\n\n\t\t}\n\n\t\treturn dependencies;\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views\n\t *\n\t * @private\n\t * @param {number} bufferIndex\n\t * @return {Promise<ArrayBuffer>}\n\t */\n\tloadBuffer( bufferIndex ) {\n\n\t\tconst bufferDef = this.json.buffers[ bufferIndex ];\n\t\tconst loader = this.fileLoader;\n\n\t\tif ( bufferDef.type && bufferDef.type !== 'arraybuffer' ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: ' + bufferDef.type + ' buffer type is not supported.' );\n\n\t\t}\n\n\t\t// If present, GLB container is required to be the first buffer.\n\t\tif ( bufferDef.uri === undefined && bufferIndex === 0 ) {\n\n\t\t\treturn Promise.resolve( this.extensions[ EXTENSIONS.KHR_BINARY_GLTF ].body );\n\n\t\t}\n\n\t\tconst options = this.options;\n\n\t\treturn new Promise( function ( resolve, reject ) {\n\n\t\t\tloader.load( LoaderUtils.resolveURL( bufferDef.uri, options.path ), resolve, undefined, function () {\n\n\t\t\t\treject( new Error( 'THREE.GLTFLoader: Failed to load buffer \"' + bufferDef.uri + '\".' ) );\n\n\t\t\t} );\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views\n\t *\n\t * @private\n\t * @param {number} bufferViewIndex\n\t * @return {Promise<ArrayBuffer>}\n\t */\n\tloadBufferView( bufferViewIndex ) {\n\n\t\tconst bufferViewDef = this.json.bufferViews[ bufferViewIndex ];\n\n\t\treturn this.getDependency( 'buffer', bufferViewDef.buffer ).then( function ( buffer ) {\n\n\t\t\tconst byteLength = bufferViewDef.byteLength || 0;\n\t\t\tconst byteOffset = bufferViewDef.byteOffset || 0;\n\t\t\treturn buffer.slice( byteOffset, byteOffset + byteLength );\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#accessors\n\t *\n\t * @private\n\t * @param {number} accessorIndex\n\t * @return {Promise<BufferAttribute|InterleavedBufferAttribute>}\n\t */\n\tloadAccessor( accessorIndex ) {\n\n\t\tconst parser = this;\n\t\tconst json = this.json;\n\n\t\tconst accessorDef = this.json.accessors[ accessorIndex ];\n\n\t\tif ( accessorDef.bufferView === undefined && accessorDef.sparse === undefined ) {\n\n\t\t\tconst itemSize = WEBGL_TYPE_SIZES[ accessorDef.type ];\n\t\t\tconst TypedArray = WEBGL_COMPONENT_TYPES[ accessorDef.componentType ];\n\t\t\tconst normalized = accessorDef.normalized === true;\n\n\t\t\tconst array = new TypedArray( accessorDef.count * itemSize );\n\t\t\treturn Promise.resolve( new BufferAttribute( array, itemSize, normalized ) );\n\n\t\t}\n\n\t\tconst pendingBufferViews = [];\n\n\t\tif ( accessorDef.bufferView !== undefined ) {\n\n\t\t\tpendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.bufferView ) );\n\n\t\t} else {\n\n\t\t\tpendingBufferViews.push( null );\n\n\t\t}\n\n\t\tif ( accessorDef.sparse !== undefined ) {\n\n\t\t\tpendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.sparse.indices.bufferView ) );\n\t\t\tpendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.sparse.values.bufferView ) );\n\n\t\t}\n\n\t\treturn Promise.all( pendingBufferViews ).then( function ( bufferViews ) {\n\n\t\t\tconst bufferView = bufferViews[ 0 ];\n\n\t\t\tconst itemSize = WEBGL_TYPE_SIZES[ accessorDef.type ];\n\t\t\tconst TypedArray = WEBGL_COMPONENT_TYPES[ accessorDef.componentType ];\n\n\t\t\t// For VEC3: itemSize is 3, elementBytes is 4, itemBytes is 12.\n\t\t\tconst elementBytes = TypedArray.BYTES_PER_ELEMENT;\n\t\t\tconst itemBytes = elementBytes * itemSize;\n\t\t\tconst byteOffset = accessorDef.byteOffset || 0;\n\t\t\tconst byteStride = accessorDef.bufferView !== undefined ? json.bufferViews[ accessorDef.bufferView ].byteStride : undefined;\n\t\t\tconst normalized = accessorDef.normalized === true;\n\t\t\tlet array, bufferAttribute;\n\n\t\t\t// The buffer is not interleaved if the stride is the item size in bytes.\n\t\t\tif ( byteStride && byteStride !== itemBytes ) {\n\n\t\t\t\t// Each \"slice\" of the buffer, as defined by 'count' elements of 'byteStride' bytes, gets its own InterleavedBuffer\n\t\t\t\t// This makes sure that IBA.count reflects accessor.count properly\n\t\t\t\tconst ibSlice = Math.floor( byteOffset / byteStride );\n\t\t\t\tconst ibCacheKey = 'InterleavedBuffer:' + accessorDef.bufferView + ':' + accessorDef.componentType + ':' + ibSlice + ':' + accessorDef.count;\n\t\t\t\tlet ib = parser.cache.get( ibCacheKey );\n\n\t\t\t\tif ( ! ib ) {\n\n\t\t\t\t\tarray = new TypedArray( bufferView, ibSlice * byteStride, accessorDef.count * byteStride / elementBytes );\n\n\t\t\t\t\t// Integer parameters to IB/IBA are in array elements, not bytes.\n\t\t\t\t\tib = new InterleavedBuffer( array, byteStride / elementBytes );\n\n\t\t\t\t\tparser.cache.add( ibCacheKey, ib );\n\n\t\t\t\t}\n\n\t\t\t\tbufferAttribute = new InterleavedBufferAttribute( ib, itemSize, ( byteOffset % byteStride ) / elementBytes, normalized );\n\n\t\t\t} else {\n\n\t\t\t\tif ( bufferView === null ) {\n\n\t\t\t\t\tarray = new TypedArray( accessorDef.count * itemSize );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tarray = new TypedArray( bufferView, byteOffset, accessorDef.count * itemSize );\n\n\t\t\t\t}\n\n\t\t\t\tbufferAttribute = new BufferAttribute( array, itemSize, normalized );\n\n\t\t\t}\n\n\t\t\t// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#sparse-accessors\n\t\t\tif ( accessorDef.sparse !== undefined ) {\n\n\t\t\t\tconst itemSizeIndices = WEBGL_TYPE_SIZES.SCALAR;\n\t\t\t\tconst TypedArrayIndices = WEBGL_COMPONENT_TYPES[ accessorDef.sparse.indices.componentType ];\n\n\t\t\t\tconst byteOffsetIndices = accessorDef.sparse.indices.byteOffset || 0;\n\t\t\t\tconst byteOffsetValues = accessorDef.sparse.values.byteOffset || 0;\n\n\t\t\t\tconst sparseIndices = new TypedArrayIndices( bufferViews[ 1 ], byteOffsetIndices, accessorDef.sparse.count * itemSizeIndices );\n\t\t\t\tconst sparseValues = new TypedArray( bufferViews[ 2 ], byteOffsetValues, accessorDef.sparse.count * itemSize );\n\n\t\t\t\tif ( bufferView !== null ) {\n\n\t\t\t\t\t// Avoid modifying the original ArrayBuffer, if the bufferView wasn't initialized with zeroes.\n\t\t\t\t\tbufferAttribute = new BufferAttribute( bufferAttribute.array.slice(), bufferAttribute.itemSize, bufferAttribute.normalized );\n\n\t\t\t\t}\n\n\t\t\t\t// Ignore normalized since we copy from sparse\n\t\t\t\tbufferAttribute.normalized = false;\n\n\t\t\t\tfor ( let i = 0, il = sparseIndices.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst index = sparseIndices[ i ];\n\n\t\t\t\t\tbufferAttribute.setX( index, sparseValues[ i * itemSize ] );\n\t\t\t\t\tif ( itemSize >= 2 ) bufferAttribute.setY( index, sparseValues[ i * itemSize + 1 ] );\n\t\t\t\t\tif ( itemSize >= 3 ) bufferAttribute.setZ( index, sparseValues[ i * itemSize + 2 ] );\n\t\t\t\t\tif ( itemSize >= 4 ) bufferAttribute.setW( index, sparseValues[ i * itemSize + 3 ] );\n\t\t\t\t\tif ( itemSize >= 5 ) throw new Error( 'THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.' );\n\n\t\t\t\t}\n\n\t\t\t\tbufferAttribute.normalized = normalized;\n\n\t\t\t}\n\n\t\t\treturn bufferAttribute;\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#textures\n\t *\n\t * @private\n\t * @param {number} textureIndex\n\t * @return {Promise<THREE.Texture|null>}\n\t */\n\tloadTexture( textureIndex ) {\n\n\t\tconst json = this.json;\n\t\tconst options = this.options;\n\t\tconst textureDef = json.textures[ textureIndex ];\n\t\tconst sourceIndex = textureDef.source;\n\t\tconst sourceDef = json.images[ sourceIndex ];\n\n\t\tlet loader = this.textureLoader;\n\n\t\tif ( sourceDef.uri ) {\n\n\t\t\tconst handler = options.manager.getHandler( sourceDef.uri );\n\t\t\tif ( handler !== null ) loader = handler;\n\n\t\t}\n\n\t\treturn this.loadTextureImage( textureIndex, sourceIndex, loader );\n\n\t}\n\n\tloadTextureImage( textureIndex, sourceIndex, loader ) {\n\n\t\tconst parser = this;\n\t\tconst json = this.json;\n\n\t\tconst textureDef = json.textures[ textureIndex ];\n\t\tconst sourceDef = json.images[ sourceIndex ];\n\n\t\tconst cacheKey = ( sourceDef.uri || sourceDef.bufferView ) + ':' + textureDef.sampler;\n\n\t\tif ( this.textureCache[ cacheKey ] ) {\n\n\t\t\t// See https://github.com/mrdoob/three.js/issues/21559.\n\t\t\treturn this.textureCache[ cacheKey ];\n\n\t\t}\n\n\t\tconst promise = this.loadImageSource( sourceIndex, loader ).then( function ( texture ) {\n\n\t\t\ttexture.flipY = false;\n\n\t\t\ttexture.name = textureDef.name || sourceDef.name || '';\n\n\t\t\tif ( texture.name === '' && typeof sourceDef.uri === 'string' && sourceDef.uri.startsWith( 'data:image/' ) === false ) {\n\n\t\t\t\ttexture.name = sourceDef.uri;\n\n\t\t\t}\n\n\t\t\tconst samplers = json.samplers || {};\n\t\t\tconst sampler = samplers[ textureDef.sampler ] || {};\n\n\t\t\ttexture.magFilter = WEBGL_FILTERS[ sampler.magFilter ] || LinearFilter;\n\t\t\ttexture.minFilter = WEBGL_FILTERS[ sampler.minFilter ] || LinearMipmapLinearFilter;\n\t\t\ttexture.wrapS = WEBGL_WRAPPINGS[ sampler.wrapS ] || RepeatWrapping;\n\t\t\ttexture.wrapT = WEBGL_WRAPPINGS[ sampler.wrapT ] || RepeatWrapping;\n\t\t\ttexture.generateMipmaps = ! texture.isCompressedTexture && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\n\t\t\tparser.associations.set( texture, { textures: textureIndex } );\n\n\t\t\treturn texture;\n\n\t\t} ).catch( function () {\n\n\t\t\treturn null;\n\n\t\t} );\n\n\t\tthis.textureCache[ cacheKey ] = promise;\n\n\t\treturn promise;\n\n\t}\n\n\tloadImageSource( sourceIndex, loader ) {\n\n\t\tconst parser = this;\n\t\tconst json = this.json;\n\t\tconst options = this.options;\n\n\t\tif ( this.sourceCache[ sourceIndex ] !== undefined ) {\n\n\t\t\treturn this.sourceCache[ sourceIndex ].then( ( texture ) => texture.clone() );\n\n\t\t}\n\n\t\tconst sourceDef = json.images[ sourceIndex ];\n\n\t\tconst URL = self.URL || self.webkitURL;\n\n\t\tlet sourceURI = sourceDef.uri || '';\n\t\tlet isObjectURL = false;\n\n\t\tif ( sourceDef.bufferView !== undefined ) {\n\n\t\t\t// Load binary image data from bufferView, if provided.\n\n\t\t\tsourceURI = parser.getDependency( 'bufferView', sourceDef.bufferView ).then( function ( bufferView ) {\n\n\t\t\t\tisObjectURL = true;\n\t\t\t\tconst blob = new Blob( [ bufferView ], { type: sourceDef.mimeType } );\n\t\t\t\tsourceURI = URL.createObjectURL( blob );\n\t\t\t\treturn sourceURI;\n\n\t\t\t} );\n\n\t\t} else if ( sourceDef.uri === undefined ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: Image ' + sourceIndex + ' is missing URI and bufferView' );\n\n\t\t}\n\n\t\tconst promise = Promise.resolve( sourceURI ).then( function ( sourceURI ) {\n\n\t\t\treturn new Promise( function ( resolve, reject ) {\n\n\t\t\t\tlet onLoad = resolve;\n\n\t\t\t\tif ( loader.isImageBitmapLoader === true ) {\n\n\t\t\t\t\tonLoad = function ( imageBitmap ) {\n\n\t\t\t\t\t\tconst texture = new Texture( imageBitmap );\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\t\tresolve( texture );\n\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tloader.load( LoaderUtils.resolveURL( sourceURI, options.path ), onLoad, undefined, reject );\n\n\t\t\t} );\n\n\t\t} ).then( function ( texture ) {\n\n\t\t\t// Clean up resources and configure Texture.\n\n\t\t\tif ( isObjectURL === true ) {\n\n\t\t\t\tURL.revokeObjectURL( sourceURI );\n\n\t\t\t}\n\n\t\t\tassignExtrasToUserData( texture, sourceDef );\n\n\t\t\ttexture.userData.mimeType = sourceDef.mimeType || getImageURIMimeType( sourceDef.uri );\n\n\t\t\treturn texture;\n\n\t\t} ).catch( function ( error ) {\n\n\t\t\tconsole.error( 'THREE.GLTFLoader: Couldn\\'t load texture', sourceURI );\n\t\t\tthrow error;\n\n\t\t} );\n\n\t\tthis.sourceCache[ sourceIndex ] = promise;\n\t\treturn promise;\n\n\t}\n\n\t/**\n\t * Asynchronously assigns a texture to the given material parameters.\n\t *\n\t * @private\n\t * @param {Object} materialParams\n\t * @param {string} mapName\n\t * @param {Object} mapDef\n\t * @param {string} [colorSpace]\n\t * @return {Promise<Texture>}\n\t */\n\tassignTexture( materialParams, mapName, mapDef, colorSpace ) {\n\n\t\tconst parser = this;\n\n\t\treturn this.getDependency( 'texture', mapDef.index ).then( function ( texture ) {\n\n\t\t\tif ( ! texture ) return null;\n\n\t\t\tif ( mapDef.texCoord !== undefined && mapDef.texCoord > 0 ) {\n\n\t\t\t\ttexture = texture.clone();\n\t\t\t\ttexture.channel = mapDef.texCoord;\n\n\t\t\t}\n\n\t\t\tif ( parser.extensions[ EXTENSIONS.KHR_TEXTURE_TRANSFORM ] ) {\n\n\t\t\t\tconst transform = mapDef.extensions !== undefined ? mapDef.extensions[ EXTENSIONS.KHR_TEXTURE_TRANSFORM ] : undefined;\n\n\t\t\t\tif ( transform ) {\n\n\t\t\t\t\tconst gltfReference = parser.associations.get( texture );\n\t\t\t\t\ttexture = parser.extensions[ EXTENSIONS.KHR_TEXTURE_TRANSFORM ].extendTexture( texture, transform );\n\t\t\t\t\tparser.associations.set( texture, gltfReference );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( colorSpace !== undefined ) {\n\n\t\t\t\ttexture.colorSpace = colorSpace;\n\n\t\t\t}\n\n\t\t\tmaterialParams[ mapName ] = texture;\n\n\t\t\treturn texture;\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Assigns final material to a Mesh, Line, or Points instance. The instance\n\t * already has a material (generated from the glTF material options alone)\n\t * but reuse of the same glTF material may require multiple threejs materials\n\t * to accommodate different primitive types, defines, etc. New materials will\n\t * be created if necessary, and reused from a cache.\n\t *\n\t * @private\n\t * @param {Object3D} mesh Mesh, Line, or Points instance.\n\t */\n\tassignFinalMaterial( mesh ) {\n\n\t\tconst geometry = mesh.geometry;\n\t\tlet material = mesh.material;\n\n\t\tconst useDerivativeTangents = geometry.attributes.tangent === undefined;\n\t\tconst useVertexColors = geometry.attributes.color !== undefined;\n\t\tconst useFlatShading = geometry.attributes.normal === undefined;\n\n\t\tif ( mesh.isPoints ) {\n\n\t\t\tconst cacheKey = 'PointsMaterial:' + material.uuid;\n\n\t\t\tlet pointsMaterial = this.cache.get( cacheKey );\n\n\t\t\tif ( ! pointsMaterial ) {\n\n\t\t\t\tpointsMaterial = new PointsMaterial();\n\t\t\t\tMaterial.prototype.copy.call( pointsMaterial, material );\n\t\t\t\tpointsMaterial.color.copy( material.color );\n\t\t\t\tpointsMaterial.map = material.map;\n\t\t\t\tpointsMaterial.sizeAttenuation = false; // glTF spec says points should be 1px\n\n\t\t\t\tthis.cache.add( cacheKey, pointsMaterial );\n\n\t\t\t}\n\n\t\t\tmaterial = pointsMaterial;\n\n\t\t} else if ( mesh.isLine ) {\n\n\t\t\tconst cacheKey = 'LineBasicMaterial:' + material.uuid;\n\n\t\t\tlet lineMaterial = this.cache.get( cacheKey );\n\n\t\t\tif ( ! lineMaterial ) {\n\n\t\t\t\tlineMaterial = new LineBasicMaterial();\n\t\t\t\tMaterial.prototype.copy.call( lineMaterial, material );\n\t\t\t\tlineMaterial.color.copy( material.color );\n\t\t\t\tlineMaterial.map = material.map;\n\n\t\t\t\tthis.cache.add( cacheKey, lineMaterial );\n\n\t\t\t}\n\n\t\t\tmaterial = lineMaterial;\n\n\t\t}\n\n\t\t// Clone the material if it will be modified\n\t\tif ( useDerivativeTangents || useVertexColors || useFlatShading ) {\n\n\t\t\tlet cacheKey = 'ClonedMaterial:' + material.uuid + ':';\n\n\t\t\tif ( useDerivativeTangents ) cacheKey += 'derivative-tangents:';\n\t\t\tif ( useVertexColors ) cacheKey += 'vertex-colors:';\n\t\t\tif ( useFlatShading ) cacheKey += 'flat-shading:';\n\n\t\t\tlet cachedMaterial = this.cache.get( cacheKey );\n\n\t\t\tif ( ! cachedMaterial ) {\n\n\t\t\t\tcachedMaterial = material.clone();\n\n\t\t\t\tif ( useVertexColors ) cachedMaterial.vertexColors = true;\n\t\t\t\tif ( useFlatShading ) cachedMaterial.flatShading = true;\n\n\t\t\t\tif ( useDerivativeTangents ) {\n\n\t\t\t\t\t// https://github.com/mrdoob/three.js/issues/11438#issuecomment-507003995\n\t\t\t\t\tif ( cachedMaterial.normalScale ) cachedMaterial.normalScale.y *= - 1;\n\t\t\t\t\tif ( cachedMaterial.clearcoatNormalScale ) cachedMaterial.clearcoatNormalScale.y *= - 1;\n\n\t\t\t\t}\n\n\t\t\t\tthis.cache.add( cacheKey, cachedMaterial );\n\n\t\t\t\tthis.associations.set( cachedMaterial, this.associations.get( material ) );\n\n\t\t\t}\n\n\t\t\tmaterial = cachedMaterial;\n\n\t\t}\n\n\t\tmesh.material = material;\n\n\t}\n\n\tgetMaterialType( /* materialIndex */ ) {\n\n\t\treturn MeshStandardMaterial;\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#materials\n\t *\n\t * @private\n\t * @param {number} materialIndex\n\t * @return {Promise<Material>}\n\t */\n\tloadMaterial( materialIndex ) {\n\n\t\tconst parser = this;\n\t\tconst json = this.json;\n\t\tconst extensions = this.extensions;\n\t\tconst materialDef = json.materials[ materialIndex ];\n\n\t\tlet materialType;\n\t\tconst materialParams = {};\n\t\tconst materialExtensions = materialDef.extensions || {};\n\n\t\tconst pending = [];\n\n\t\tif ( materialExtensions[ EXTENSIONS.KHR_MATERIALS_UNLIT ] ) {\n\n\t\t\tconst kmuExtension = extensions[ EXTENSIONS.KHR_MATERIALS_UNLIT ];\n\t\t\tmaterialType = kmuExtension.getMaterialType();\n\t\t\tpending.push( kmuExtension.extendParams( materialParams, materialDef, parser ) );\n\n\t\t} else {\n\n\t\t\t// Specification:\n\t\t\t// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#metallic-roughness-material\n\n\t\t\tconst metallicRoughness = materialDef.pbrMetallicRoughness || {};\n\n\t\t\tmaterialParams.color = new Color( 1.0, 1.0, 1.0 );\n\t\t\tmaterialParams.opacity = 1.0;\n\n\t\t\tif ( Array.isArray( metallicRoughness.baseColorFactor ) ) {\n\n\t\t\t\tconst array = metallicRoughness.baseColorFactor;\n\n\t\t\t\tmaterialParams.color.setRGB( array[ 0 ], array[ 1 ], array[ 2 ], LinearSRGBColorSpace );\n\t\t\t\tmaterialParams.opacity = array[ 3 ];\n\n\t\t\t}\n\n\t\t\tif ( metallicRoughness.baseColorTexture !== undefined ) {\n\n\t\t\t\tpending.push( parser.assignTexture( materialParams, 'map', metallicRoughness.baseColorTexture, SRGBColorSpace ) );\n\n\t\t\t}\n\n\t\t\tmaterialParams.metalness = metallicRoughness.metallicFactor !== undefined ? metallicRoughness.metallicFactor : 1.0;\n\t\t\tmaterialParams.roughness = metallicRoughness.roughnessFactor !== undefined ? metallicRoughness.roughnessFactor : 1.0;\n\n\t\t\tif ( metallicRoughness.metallicRoughnessTexture !== undefined ) {\n\n\t\t\t\tpending.push( parser.assignTexture( materialParams, 'metalnessMap', metallicRoughness.metallicRoughnessTexture ) );\n\t\t\t\tpending.push( parser.assignTexture( materialParams, 'roughnessMap', metallicRoughness.metallicRoughnessTexture ) );\n\n\t\t\t}\n\n\t\t\tmaterialType = this._invokeOne( function ( ext ) {\n\n\t\t\t\treturn ext.getMaterialType && ext.getMaterialType( materialIndex );\n\n\t\t\t} );\n\n\t\t\tpending.push( Promise.all( this._invokeAll( function ( ext ) {\n\n\t\t\t\treturn ext.extendMaterialParams && ext.extendMaterialParams( materialIndex, materialParams );\n\n\t\t\t} ) ) );\n\n\t\t}\n\n\t\tif ( materialDef.doubleSided === true ) {\n\n\t\t\tmaterialParams.side = DoubleSide;\n\n\t\t}\n\n\t\tconst alphaMode = materialDef.alphaMode || ALPHA_MODES.OPAQUE;\n\n\t\tif ( alphaMode === ALPHA_MODES.BLEND ) {\n\n\t\t\tmaterialParams.transparent = true;\n\n\t\t\t// See: https://github.com/mrdoob/three.js/issues/17706\n\t\t\tmaterialParams.depthWrite = false;\n\n\t\t} else {\n\n\t\t\tmaterialParams.transparent = false;\n\n\t\t\tif ( alphaMode === ALPHA_MODES.MASK ) {\n\n\t\t\t\tmaterialParams.alphaTest = materialDef.alphaCutoff !== undefined ? materialDef.alphaCutoff : 0.5;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( materialDef.normalTexture !== undefined && materialType !== MeshBasicMaterial ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'normalMap', materialDef.normalTexture ) );\n\n\t\t\tmaterialParams.normalScale = new Vector2( 1, 1 );\n\n\t\t\tif ( materialDef.normalTexture.scale !== undefined ) {\n\n\t\t\t\tconst scale = materialDef.normalTexture.scale;\n\n\t\t\t\tmaterialParams.normalScale.set( scale, scale );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( materialDef.occlusionTexture !== undefined && materialType !== MeshBasicMaterial ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'aoMap', materialDef.occlusionTexture ) );\n\n\t\t\tif ( materialDef.occlusionTexture.strength !== undefined ) {\n\n\t\t\t\tmaterialParams.aoMapIntensity = materialDef.occlusionTexture.strength;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( materialDef.emissiveFactor !== undefined && materialType !== MeshBasicMaterial ) {\n\n\t\t\tconst emissiveFactor = materialDef.emissiveFactor;\n\t\t\tmaterialParams.emissive = new Color().setRGB( emissiveFactor[ 0 ], emissiveFactor[ 1 ], emissiveFactor[ 2 ], LinearSRGBColorSpace );\n\n\t\t}\n\n\t\tif ( materialDef.emissiveTexture !== undefined && materialType !== MeshBasicMaterial ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'emissiveMap', materialDef.emissiveTexture, SRGBColorSpace ) );\n\n\t\t}\n\n\t\treturn Promise.all( pending ).then( function () {\n\n\t\t\tconst material = new materialType( materialParams );\n\n\t\t\tif ( materialDef.name ) material.name = materialDef.name;\n\n\t\t\tassignExtrasToUserData( material, materialDef );\n\n\t\t\tparser.associations.set( material, { materials: materialIndex } );\n\n\t\t\tif ( materialDef.extensions ) addUnknownExtensionsToUserData( extensions, material, materialDef );\n\n\t\t\treturn material;\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * When Object3D instances are targeted by animation, they need unique names.\n\t *\n\t * @private\n\t * @param {string} originalName\n\t * @return {string}\n\t */\n\tcreateUniqueName( originalName ) {\n\n\t\tconst sanitizedName = PropertyBinding.sanitizeNodeName( originalName || '' );\n\n\t\tif ( sanitizedName in this.nodeNamesUsed ) {\n\n\t\t\treturn sanitizedName + '_' + ( ++ this.nodeNamesUsed[ sanitizedName ] );\n\n\t\t} else {\n\n\t\t\tthis.nodeNamesUsed[ sanitizedName ] = 0;\n\n\t\t\treturn sanitizedName;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#geometry\n\t *\n\t * Creates BufferGeometries from primitives.\n\t *\n\t * @private\n\t * @param {Array<GLTF.Primitive>} primitives\n\t * @return {Promise<Array<BufferGeometry>>}\n\t */\n\tloadGeometries( primitives ) {\n\n\t\tconst parser = this;\n\t\tconst extensions = this.extensions;\n\t\tconst cache = this.primitiveCache;\n\n\t\tfunction createDracoPrimitive( primitive ) {\n\n\t\t\treturn extensions[ EXTENSIONS.KHR_DRACO_MESH_COMPRESSION ]\n\t\t\t\t.decodePrimitive( primitive, parser )\n\t\t\t\t.then( function ( geometry ) {\n\n\t\t\t\t\treturn addPrimitiveAttributes( geometry, primitive, parser );\n\n\t\t\t\t} );\n\n\t\t}\n\n\t\tconst pending = [];\n\n\t\tfor ( let i = 0, il = primitives.length; i < il; i ++ ) {\n\n\t\t\tconst primitive = primitives[ i ];\n\t\t\tconst cacheKey = createPrimitiveKey( primitive );\n\n\t\t\t// See if we've already created this geometry\n\t\t\tconst cached = cache[ cacheKey ];\n\n\t\t\tif ( cached ) {\n\n\t\t\t\t// Use the cached geometry if it exists\n\t\t\t\tpending.push( cached.promise );\n\n\t\t\t} else {\n\n\t\t\t\tlet geometryPromise;\n\n\t\t\t\tif ( primitive.extensions && primitive.extensions[ EXTENSIONS.KHR_DRACO_MESH_COMPRESSION ] ) {\n\n\t\t\t\t\t// Use DRACO geometry if available\n\t\t\t\t\tgeometryPromise = createDracoPrimitive( primitive );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Otherwise create a new geometry\n\t\t\t\t\tgeometryPromise = addPrimitiveAttributes( new BufferGeometry(), primitive, parser );\n\n\t\t\t\t}\n\n\t\t\t\t// Cache this geometry\n\t\t\t\tcache[ cacheKey ] = { primitive: primitive, promise: geometryPromise };\n\n\t\t\t\tpending.push( geometryPromise );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Promise.all( pending );\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#meshes\n\t *\n\t * @private\n\t * @param {number} meshIndex\n\t * @return {Promise<Group|Mesh|SkinnedMesh|Line|Points>}\n\t */\n\tloadMesh( meshIndex ) {\n\n\t\tconst parser = this;\n\t\tconst json = this.json;\n\t\tconst extensions = this.extensions;\n\n\t\tconst meshDef = json.meshes[ meshIndex ];\n\t\tconst primitives = meshDef.primitives;\n\n\t\tconst pending = [];\n\n\t\tfor ( let i = 0, il = primitives.length; i < il; i ++ ) {\n\n\t\t\tconst material = primitives[ i ].material === undefined\n\t\t\t\t? createDefaultMaterial( this.cache )\n\t\t\t\t: this.getDependency( 'material', primitives[ i ].material );\n\n\t\t\tpending.push( material );\n\n\t\t}\n\n\t\tpending.push( parser.loadGeometries( primitives ) );\n\n\t\treturn Promise.all( pending ).then( function ( results ) {\n\n\t\t\tconst materials = results.slice( 0, results.length - 1 );\n\t\t\tconst geometries = results[ results.length - 1 ];\n\n\t\t\tconst meshes = [];\n\n\t\t\tfor ( let i = 0, il = geometries.length; i < il; i ++ ) {\n\n\t\t\t\tconst geometry = geometries[ i ];\n\t\t\t\tconst primitive = primitives[ i ];\n\n\t\t\t\t// 1. create Mesh\n\n\t\t\t\tlet mesh;\n\n\t\t\t\tconst material = materials[ i ];\n\n\t\t\t\tif ( primitive.mode === WEBGL_CONSTANTS.TRIANGLES ||\n\t\t\t\t\t\tprimitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP ||\n\t\t\t\t\t\tprimitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN ||\n\t\t\t\t\t\tprimitive.mode === undefined ) {\n\n\t\t\t\t\t// .isSkinnedMesh isn't in glTF spec. See ._markDefs()\n\t\t\t\t\tmesh = meshDef.isSkinnedMesh === true\n\t\t\t\t\t\t? new SkinnedMesh( geometry, material )\n\t\t\t\t\t\t: new Mesh( geometry, material );\n\n\t\t\t\t\tif ( mesh.isSkinnedMesh === true ) {\n\n\t\t\t\t\t\t// normalize skin weights to fix malformed assets (see #15319)\n\t\t\t\t\t\tmesh.normalizeSkinWeights();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP ) {\n\n\t\t\t\t\t\tmesh.geometry = toTrianglesDrawMode( mesh.geometry, TriangleStripDrawMode );\n\n\t\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN ) {\n\n\t\t\t\t\t\tmesh.geometry = toTrianglesDrawMode( mesh.geometry, TriangleFanDrawMode );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.LINES ) {\n\n\t\t\t\t\tmesh = new LineSegments( geometry, material );\n\n\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.LINE_STRIP ) {\n\n\t\t\t\t\tmesh = new Line( geometry, material );\n\n\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.LINE_LOOP ) {\n\n\t\t\t\t\tmesh = new LineLoop( geometry, material );\n\n\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.POINTS ) {\n\n\t\t\t\t\tmesh = new Points( geometry, material );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( 'THREE.GLTFLoader: Primitive mode unsupported: ' + primitive.mode );\n\n\t\t\t\t}\n\n\t\t\t\tif ( Object.keys( mesh.geometry.morphAttributes ).length > 0 ) {\n\n\t\t\t\t\tupdateMorphTargets( mesh, meshDef );\n\n\t\t\t\t}\n\n\t\t\t\tmesh.name = parser.createUniqueName( meshDef.name || ( 'mesh_' + meshIndex ) );\n\n\t\t\t\tassignExtrasToUserData( mesh, meshDef );\n\n\t\t\t\tif ( primitive.extensions ) addUnknownExtensionsToUserData( extensions, mesh, primitive );\n\n\t\t\t\tparser.assignFinalMaterial( mesh );\n\n\t\t\t\tmeshes.push( mesh );\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0, il = meshes.length; i < il; i ++ ) {\n\n\t\t\t\tparser.associations.set( meshes[ i ], {\n\t\t\t\t\tmeshes: meshIndex,\n\t\t\t\t\tprimitives: i\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tif ( meshes.length === 1 ) {\n\n\t\t\t\tif ( meshDef.extensions ) addUnknownExtensionsToUserData( extensions, meshes[ 0 ], meshDef );\n\n\t\t\t\treturn meshes[ 0 ];\n\n\t\t\t}\n\n\t\t\tconst group = new Group();\n\n\t\t\tif ( meshDef.extensions ) addUnknownExtensionsToUserData( extensions, group, meshDef );\n\n\t\t\tparser.associations.set( group, { meshes: meshIndex } );\n\n\t\t\tfor ( let i = 0, il = meshes.length; i < il; i ++ ) {\n\n\t\t\t\tgroup.add( meshes[ i ] );\n\n\t\t\t}\n\n\t\t\treturn group;\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#cameras\n\t *\n\t * @private\n\t * @param {number} cameraIndex\n\t * @return {Promise<THREE.Camera>}\n\t */\n\tloadCamera( cameraIndex ) {\n\n\t\tlet camera;\n\t\tconst cameraDef = this.json.cameras[ cameraIndex ];\n\t\tconst params = cameraDef[ cameraDef.type ];\n\n\t\tif ( ! params ) {\n\n\t\t\tconsole.warn( 'THREE.GLTFLoader: Missing camera parameters.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( cameraDef.type === 'perspective' ) {\n\n\t\t\tcamera = new PerspectiveCamera( MathUtils.radToDeg( params.yfov ), params.aspectRatio || 1, params.znear || 1, params.zfar || 2e6 );\n\n\t\t} else if ( cameraDef.type === 'orthographic' ) {\n\n\t\t\tcamera = new OrthographicCamera( - params.xmag, params.xmag, params.ymag, - params.ymag, params.znear, params.zfar );\n\n\t\t}\n\n\t\tif ( cameraDef.name ) camera.name = this.createUniqueName( cameraDef.name );\n\n\t\tassignExtrasToUserData( camera, cameraDef );\n\n\t\treturn Promise.resolve( camera );\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#skins\n\t *\n\t * @private\n\t * @param {number} skinIndex\n\t * @return {Promise<Skeleton>}\n\t */\n\tloadSkin( skinIndex ) {\n\n\t\tconst skinDef = this.json.skins[ skinIndex ];\n\n\t\tconst pending = [];\n\n\t\tfor ( let i = 0, il = skinDef.joints.length; i < il; i ++ ) {\n\n\t\t\tpending.push( this._loadNodeShallow( skinDef.joints[ i ] ) );\n\n\t\t}\n\n\t\tif ( skinDef.inverseBindMatrices !== undefined ) {\n\n\t\t\tpending.push( this.getDependency( 'accessor', skinDef.inverseBindMatrices ) );\n\n\t\t} else {\n\n\t\t\tpending.push( null );\n\n\t\t}\n\n\t\treturn Promise.all( pending ).then( function ( results ) {\n\n\t\t\tconst inverseBindMatrices = results.pop();\n\t\t\tconst jointNodes = results;\n\n\t\t\t// Note that bones (joint nodes) may or may not be in the\n\t\t\t// scene graph at this time.\n\n\t\t\tconst bones = [];\n\t\t\tconst boneInverses = [];\n\n\t\t\tfor ( let i = 0, il = jointNodes.length; i < il; i ++ ) {\n\n\t\t\t\tconst jointNode = jointNodes[ i ];\n\n\t\t\t\tif ( jointNode ) {\n\n\t\t\t\t\tbones.push( jointNode );\n\n\t\t\t\t\tconst mat = new Matrix4();\n\n\t\t\t\t\tif ( inverseBindMatrices !== null ) {\n\n\t\t\t\t\t\tmat.fromArray( inverseBindMatrices.array, i * 16 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tboneInverses.push( mat );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.GLTFLoader: Joint \"%s\" could not be found.', skinDef.joints[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new Skeleton( bones, boneInverses );\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#animations\n\t *\n\t * @private\n\t * @param {number} animationIndex\n\t * @return {Promise<AnimationClip>}\n\t */\n\tloadAnimation( animationIndex ) {\n\n\t\tconst json = this.json;\n\t\tconst parser = this;\n\n\t\tconst animationDef = json.animations[ animationIndex ];\n\t\tconst animationName = animationDef.name ? animationDef.name : 'animation_' + animationIndex;\n\n\t\tconst pendingNodes = [];\n\t\tconst pendingInputAccessors = [];\n\t\tconst pendingOutputAccessors = [];\n\t\tconst pendingSamplers = [];\n\t\tconst pendingTargets = [];\n\n\t\tfor ( let i = 0, il = animationDef.channels.length; i < il; i ++ ) {\n\n\t\t\tconst channel = animationDef.channels[ i ];\n\t\t\tconst sampler = animationDef.samplers[ channel.sampler ];\n\t\t\tconst target = channel.target;\n\t\t\tconst name = target.node;\n\t\t\tconst input = animationDef.parameters !== undefined ? animationDef.parameters[ sampler.input ] : sampler.input;\n\t\t\tconst output = animationDef.parameters !== undefined ? animationDef.parameters[ sampler.output ] : sampler.output;\n\n\t\t\tif ( target.node === undefined ) continue;\n\n\t\t\tpendingNodes.push( this.getDependency( 'node', name ) );\n\t\t\tpendingInputAccessors.push( this.getDependency( 'accessor', input ) );\n\t\t\tpendingOutputAccessors.push( this.getDependency( 'accessor', output ) );\n\t\t\tpendingSamplers.push( sampler );\n\t\t\tpendingTargets.push( target );\n\n\t\t}\n\n\t\treturn Promise.all( [\n\n\t\t\tPromise.all( pendingNodes ),\n\t\t\tPromise.all( pendingInputAccessors ),\n\t\t\tPromise.all( pendingOutputAccessors ),\n\t\t\tPromise.all( pendingSamplers ),\n\t\t\tPromise.all( pendingTargets )\n\n\t\t] ).then( function ( dependencies ) {\n\n\t\t\tconst nodes = dependencies[ 0 ];\n\t\t\tconst inputAccessors = dependencies[ 1 ];\n\t\t\tconst outputAccessors = dependencies[ 2 ];\n\t\t\tconst samplers = dependencies[ 3 ];\n\t\t\tconst targets = dependencies[ 4 ];\n\n\t\t\tconst tracks = [];\n\n\t\t\tfor ( let i = 0, il = nodes.length; i < il; i ++ ) {\n\n\t\t\t\tconst node = nodes[ i ];\n\t\t\t\tconst inputAccessor = inputAccessors[ i ];\n\t\t\t\tconst outputAccessor = outputAccessors[ i ];\n\t\t\t\tconst sampler = samplers[ i ];\n\t\t\t\tconst target = targets[ i ];\n\n\t\t\t\tif ( node === undefined ) continue;\n\n\t\t\t\tif ( node.updateMatrix ) {\n\n\t\t\t\t\tnode.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tconst createdTracks = parser._createAnimationTracks( node, inputAccessor, outputAccessor, sampler, target );\n\n\t\t\t\tif ( createdTracks ) {\n\n\t\t\t\t\tfor ( let k = 0; k < createdTracks.length; k ++ ) {\n\n\t\t\t\t\t\ttracks.push( createdTracks[ k ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( animationName, undefined, tracks );\n\n\t\t} );\n\n\t}\n\n\tcreateNodeMesh( nodeIndex ) {\n\n\t\tconst json = this.json;\n\t\tconst parser = this;\n\t\tconst nodeDef = json.nodes[ nodeIndex ];\n\n\t\tif ( nodeDef.mesh === undefined ) return null;\n\n\t\treturn parser.getDependency( 'mesh', nodeDef.mesh ).then( function ( mesh ) {\n\n\t\t\tconst node = parser._getNodeRef( parser.meshCache, nodeDef.mesh, mesh );\n\n\t\t\t// if weights are provided on the node, override weights on the mesh.\n\t\t\tif ( nodeDef.weights !== undefined ) {\n\n\t\t\t\tnode.traverse( function ( o ) {\n\n\t\t\t\t\tif ( ! o.isMesh ) return;\n\n\t\t\t\t\tfor ( let i = 0, il = nodeDef.weights.length; i < il; i ++ ) {\n\n\t\t\t\t\t\to.morphTargetInfluences[ i ] = nodeDef.weights[ i ];\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn node;\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#nodes-and-hierarchy\n\t *\n\t * @private\n\t * @param {number} nodeIndex\n\t * @return {Promise<Object3D>}\n\t */\n\tloadNode( nodeIndex ) {\n\n\t\tconst json = this.json;\n\t\tconst parser = this;\n\n\t\tconst nodeDef = json.nodes[ nodeIndex ];\n\n\t\tconst nodePending = parser._loadNodeShallow( nodeIndex );\n\n\t\tconst childPending = [];\n\t\tconst childrenDef = nodeDef.children || [];\n\n\t\tfor ( let i = 0, il = childrenDef.length; i < il; i ++ ) {\n\n\t\t\tchildPending.push( parser.getDependency( 'node', childrenDef[ i ] ) );\n\n\t\t}\n\n\t\tconst skeletonPending = nodeDef.skin === undefined\n\t\t\t? Promise.resolve( null )\n\t\t\t: parser.getDependency( 'skin', nodeDef.skin );\n\n\t\treturn Promise.all( [\n\t\t\tnodePending,\n\t\t\tPromise.all( childPending ),\n\t\t\tskeletonPending\n\t\t] ).then( function ( results ) {\n\n\t\t\tconst node = results[ 0 ];\n\t\t\tconst children = results[ 1 ];\n\t\t\tconst skeleton = results[ 2 ];\n\n\t\t\tif ( skeleton !== null ) {\n\n\t\t\t\t// This full traverse should be fine because\n\t\t\t\t// child glTF nodes have not been added to this node yet.\n\t\t\t\tnode.traverse( function ( mesh ) {\n\n\t\t\t\t\tif ( ! mesh.isSkinnedMesh ) return;\n\n\t\t\t\t\tmesh.bind( skeleton, _identityMatrix );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0, il = children.length; i < il; i ++ ) {\n\n\t\t\t\tnode.add( children[ i ] );\n\n\t\t\t}\n\n\t\t\treturn node;\n\n\t\t} );\n\n\t}\n\n\t// ._loadNodeShallow() parses a single node.\n\t// skin and child nodes are created and added in .loadNode() (no '_' prefix).\n\t_loadNodeShallow( nodeIndex ) {\n\n\t\tconst json = this.json;\n\t\tconst extensions = this.extensions;\n\t\tconst parser = this;\n\n\t\t// This method is called from .loadNode() and .loadSkin().\n\t\t// Cache a node to avoid duplication.\n\n\t\tif ( this.nodeCache[ nodeIndex ] !== undefined ) {\n\n\t\t\treturn this.nodeCache[ nodeIndex ];\n\n\t\t}\n\n\t\tconst nodeDef = json.nodes[ nodeIndex ];\n\n\t\t// reserve node's name before its dependencies, so the root has the intended name.\n\t\tconst nodeName = nodeDef.name ? parser.createUniqueName( nodeDef.name ) : '';\n\n\t\tconst pending = [];\n\n\t\tconst meshPromise = parser._invokeOne( function ( ext ) {\n\n\t\t\treturn ext.createNodeMesh && ext.createNodeMesh( nodeIndex );\n\n\t\t} );\n\n\t\tif ( meshPromise ) {\n\n\t\t\tpending.push( meshPromise );\n\n\t\t}\n\n\t\tif ( nodeDef.camera !== undefined ) {\n\n\t\t\tpending.push( parser.getDependency( 'camera', nodeDef.camera ).then( function ( camera ) {\n\n\t\t\t\treturn parser._getNodeRef( parser.cameraCache, nodeDef.camera, camera );\n\n\t\t\t} ) );\n\n\t\t}\n\n\t\tparser._invokeAll( function ( ext ) {\n\n\t\t\treturn ext.createNodeAttachment && ext.createNodeAttachment( nodeIndex );\n\n\t\t} ).forEach( function ( promise ) {\n\n\t\t\tpending.push( promise );\n\n\t\t} );\n\n\t\tthis.nodeCache[ nodeIndex ] = Promise.all( pending ).then( function ( objects ) {\n\n\t\t\tlet node;\n\n\t\t\t// .isBone isn't in glTF spec. See ._markDefs\n\t\t\tif ( nodeDef.isBone === true ) {\n\n\t\t\t\tnode = new Bone();\n\n\t\t\t} else if ( objects.length > 1 ) {\n\n\t\t\t\tnode = new Group();\n\n\t\t\t} else if ( objects.length === 1 ) {\n\n\t\t\t\tnode = objects[ 0 ];\n\n\t\t\t} else {\n\n\t\t\t\tnode = new Object3D();\n\n\t\t\t}\n\n\t\t\tif ( node !== objects[ 0 ] ) {\n\n\t\t\t\tfor ( let i = 0, il = objects.length; i < il; i ++ ) {\n\n\t\t\t\t\tnode.add( objects[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( nodeDef.name ) {\n\n\t\t\t\tnode.userData.name = nodeDef.name;\n\t\t\t\tnode.name = nodeName;\n\n\t\t\t}\n\n\t\t\tassignExtrasToUserData( node, nodeDef );\n\n\t\t\tif ( nodeDef.extensions ) addUnknownExtensionsToUserData( extensions, node, nodeDef );\n\n\t\t\tif ( nodeDef.matrix !== undefined ) {\n\n\t\t\t\tconst matrix = new Matrix4();\n\t\t\t\tmatrix.fromArray( nodeDef.matrix );\n\t\t\t\tnode.applyMatrix4( matrix );\n\n\t\t\t} else {\n\n\t\t\t\tif ( nodeDef.translation !== undefined ) {\n\n\t\t\t\t\tnode.position.fromArray( nodeDef.translation );\n\n\t\t\t\t}\n\n\t\t\t\tif ( nodeDef.rotation !== undefined ) {\n\n\t\t\t\t\tnode.quaternion.fromArray( nodeDef.rotation );\n\n\t\t\t\t}\n\n\t\t\t\tif ( nodeDef.scale !== undefined ) {\n\n\t\t\t\t\tnode.scale.fromArray( nodeDef.scale );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( ! parser.associations.has( node ) ) {\n\n\t\t\t\tparser.associations.set( node, {} );\n\n\t\t\t} else if ( nodeDef.mesh !== undefined && parser.meshCache.refs[ nodeDef.mesh ] > 1 ) {\n\n\t\t\t\tconst mapping = parser.associations.get( node );\n\t\t\t\tparser.associations.set( node, { ...mapping } );\n\n\t\t\t}\n\n\t\t\tparser.associations.get( node ).nodes = nodeIndex;\n\n\t\t\treturn node;\n\n\t\t} );\n\n\t\treturn this.nodeCache[ nodeIndex ];\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#scenes\n\t *\n\t * @private\n\t * @param {number} sceneIndex\n\t * @return {Promise<Group>}\n\t */\n\tloadScene( sceneIndex ) {\n\n\t\tconst extensions = this.extensions;\n\t\tconst sceneDef = this.json.scenes[ sceneIndex ];\n\t\tconst parser = this;\n\n\t\t// Loader returns Group, not Scene.\n\t\t// See: https://github.com/mrdoob/three.js/issues/18342#issuecomment-578981172\n\t\tconst scene = new Group();\n\t\tif ( sceneDef.name ) scene.name = parser.createUniqueName( sceneDef.name );\n\n\t\tassignExtrasToUserData( scene, sceneDef );\n\n\t\tif ( sceneDef.extensions ) addUnknownExtensionsToUserData( extensions, scene, sceneDef );\n\n\t\tconst nodeIds = sceneDef.nodes || [];\n\n\t\tconst pending = [];\n\n\t\tfor ( let i = 0, il = nodeIds.length; i < il; i ++ ) {\n\n\t\t\tpending.push( parser.getDependency( 'node', nodeIds[ i ] ) );\n\n\t\t}\n\n\t\treturn Promise.all( pending ).then( function ( nodes ) {\n\n\t\t\tfor ( let i = 0, il = nodes.length; i < il; i ++ ) {\n\n\t\t\t\tscene.add( nodes[ i ] );\n\n\t\t\t}\n\n\t\t\t// Removes dangling associations, associations that reference a node that\n\t\t\t// didn't make it into the scene.\n\t\t\tconst reduceAssociations = ( node ) => {\n\n\t\t\t\tconst reducedAssociations = new Map();\n\n\t\t\t\tfor ( const [ key, value ] of parser.associations ) {\n\n\t\t\t\t\tif ( key instanceof Material || key instanceof Texture ) {\n\n\t\t\t\t\t\treducedAssociations.set( key, value );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tnode.traverse( ( node ) => {\n\n\t\t\t\t\tconst mappings = parser.associations.get( node );\n\n\t\t\t\t\tif ( mappings != null ) {\n\n\t\t\t\t\t\treducedAssociations.set( node, mappings );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\treturn reducedAssociations;\n\n\t\t\t};\n\n\t\t\tparser.associations = reduceAssociations( scene );\n\n\t\t\treturn scene;\n\n\t\t} );\n\n\t}\n\n\t_createAnimationTracks( node, inputAccessor, outputAccessor, sampler, target ) {\n\n\t\tconst tracks = [];\n\n\t\tconst targetName = node.name ? node.name : node.uuid;\n\t\tconst targetNames = [];\n\n\t\tif ( PATH_PROPERTIES[ target.path ] === PATH_PROPERTIES.weights ) {\n\n\t\t\tnode.traverse( function ( object ) {\n\n\t\t\t\tif ( object.morphTargetInfluences ) {\n\n\t\t\t\t\ttargetNames.push( object.name ? object.name : object.uuid );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t} else {\n\n\t\t\ttargetNames.push( targetName );\n\n\t\t}\n\n\t\tlet TypedKeyframeTrack;\n\n\t\tswitch ( PATH_PROPERTIES[ target.path ] ) {\n\n\t\t\tcase PATH_PROPERTIES.weights:\n\n\t\t\t\tTypedKeyframeTrack = NumberKeyframeTrack;\n\t\t\t\tbreak;\n\n\t\t\tcase PATH_PROPERTIES.rotation:\n\n\t\t\t\tTypedKeyframeTrack = QuaternionKeyframeTrack;\n\t\t\t\tbreak;\n\n\t\t\tcase PATH_PROPERTIES.translation:\n\t\t\tcase PATH_PROPERTIES.scale:\n\n\t\t\t\tTypedKeyframeTrack = VectorKeyframeTrack;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tswitch ( outputAccessor.itemSize ) {\n\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tTypedKeyframeTrack = NumberKeyframeTrack;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\tcase 3:\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tTypedKeyframeTrack = VectorKeyframeTrack;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tconst interpolation = sampler.interpolation !== undefined ? INTERPOLATION[ sampler.interpolation ] : InterpolateLinear;\n\n\n\t\tconst outputArray = this._getArrayFromAccessor( outputAccessor );\n\n\t\tfor ( let j = 0, jl = targetNames.length; j < jl; j ++ ) {\n\n\t\t\tconst track = new TypedKeyframeTrack(\n\t\t\t\ttargetNames[ j ] + '.' + PATH_PROPERTIES[ target.path ],\n\t\t\t\tinputAccessor.array,\n\t\t\t\toutputArray,\n\t\t\t\tinterpolation\n\t\t\t);\n\n\t\t\t// Override interpolation with custom factory method.\n\t\t\tif ( sampler.interpolation === 'CUBICSPLINE' ) {\n\n\t\t\t\tthis._createCubicSplineTrackInterpolant( track );\n\n\t\t\t}\n\n\t\t\ttracks.push( track );\n\n\t\t}\n\n\t\treturn tracks;\n\n\t}\n\n\t_getArrayFromAccessor( accessor ) {\n\n\t\tlet outputArray = accessor.array;\n\n\t\tif ( accessor.normalized ) {\n\n\t\t\tconst scale = getNormalizedComponentScale( outputArray.constructor );\n\t\t\tconst scaled = new Float32Array( outputArray.length );\n\n\t\t\tfor ( let j = 0, jl = outputArray.length; j < jl; j ++ ) {\n\n\t\t\t\tscaled[ j ] = outputArray[ j ] * scale;\n\n\t\t\t}\n\n\t\t\toutputArray = scaled;\n\n\t\t}\n\n\t\treturn outputArray;\n\n\t}\n\n\t_createCubicSplineTrackInterpolant( track ) {\n\n\t\ttrack.createInterpolant = function InterpolantFactoryMethodGLTFCubicSpline( result ) {\n\n\t\t\t// A CUBICSPLINE keyframe in glTF has three output values for each input value,\n\t\t\t// representing inTangent, splineVertex, and outTangent. As a result, track.getValueSize()\n\t\t\t// must be divided by three to get the interpolant's sampleSize argument.\n\n\t\t\tconst interpolantType = ( this instanceof QuaternionKeyframeTrack ) ? GLTFCubicSplineQuaternionInterpolant : GLTFCubicSplineInterpolant;\n\n\t\t\treturn new interpolantType( this.times, this.values, this.getValueSize() / 3, result );\n\n\t\t};\n\n\t\t// Mark as CUBICSPLINE. `track.getInterpolation()` doesn't support custom interpolants.\n\t\ttrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline = true;\n\n\t}\n\n}\n\n/**\n *\n * @private\n * @param {BufferGeometry} geometry\n * @param {GLTF.Primitive} primitiveDef\n * @param {GLTFParser} parser\n */\nfunction computeBounds( geometry, primitiveDef, parser ) {\n\n\tconst attributes = primitiveDef.attributes;\n\n\tconst box = new Box3();\n\n\tif ( attributes.POSITION !== undefined ) {\n\n\t\tconst accessor = parser.json.accessors[ attributes.POSITION ];\n\n\t\tconst min = accessor.min;\n\t\tconst max = accessor.max;\n\n\t\t// glTF requires 'min' and 'max', but VRM (which extends glTF) currently ignores that requirement.\n\n\t\tif ( min !== undefined && max !== undefined ) {\n\n\t\t\tbox.set(\n\t\t\t\tnew Vector3( min[ 0 ], min[ 1 ], min[ 2 ] ),\n\t\t\t\tnew Vector3( max[ 0 ], max[ 1 ], max[ 2 ] )\n\t\t\t);\n\n\t\t\tif ( accessor.normalized ) {\n\n\t\t\t\tconst boxScale = getNormalizedComponentScale( WEBGL_COMPONENT_TYPES[ accessor.componentType ] );\n\t\t\t\tbox.min.multiplyScalar( boxScale );\n\t\t\t\tbox.max.multiplyScalar( boxScale );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.GLTFLoader: Missing min/max properties for accessor POSITION.' );\n\n\t\t\treturn;\n\n\t\t}\n\n\t} else {\n\n\t\treturn;\n\n\t}\n\n\tconst targets = primitiveDef.targets;\n\n\tif ( targets !== undefined ) {\n\n\t\tconst maxDisplacement = new Vector3();\n\t\tconst vector = new Vector3();\n\n\t\tfor ( let i = 0, il = targets.length; i < il; i ++ ) {\n\n\t\t\tconst target = targets[ i ];\n\n\t\t\tif ( target.POSITION !== undefined ) {\n\n\t\t\t\tconst accessor = parser.json.accessors[ target.POSITION ];\n\t\t\t\tconst min = accessor.min;\n\t\t\t\tconst max = accessor.max;\n\n\t\t\t\t// glTF requires 'min' and 'max', but VRM (which extends glTF) currently ignores that requirement.\n\n\t\t\t\tif ( min !== undefined && max !== undefined ) {\n\n\t\t\t\t\t// we need to get max of absolute components because target weight is [-1,1]\n\t\t\t\t\tvector.setX( Math.max( Math.abs( min[ 0 ] ), Math.abs( max[ 0 ] ) ) );\n\t\t\t\t\tvector.setY( Math.max( Math.abs( min[ 1 ] ), Math.abs( max[ 1 ] ) ) );\n\t\t\t\t\tvector.setZ( Math.max( Math.abs( min[ 2 ] ), Math.abs( max[ 2 ] ) ) );\n\n\n\t\t\t\t\tif ( accessor.normalized ) {\n\n\t\t\t\t\t\tconst boxScale = getNormalizedComponentScale( WEBGL_COMPONENT_TYPES[ accessor.componentType ] );\n\t\t\t\t\t\tvector.multiplyScalar( boxScale );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Note: this assumes that the sum of all weights is at most 1. This isn't quite correct - it's more conservative\n\t\t\t\t\t// to assume that each target can have a max weight of 1. However, for some use cases - notably, when morph targets\n\t\t\t\t\t// are used to implement key-frame animations and as such only two are active at a time - this results in very large\n\t\t\t\t\t// boxes. So for now we make a box that's sometimes a touch too small but is hopefully mostly of reasonable size.\n\t\t\t\t\tmaxDisplacement.max( vector );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.GLTFLoader: Missing min/max properties for accessor POSITION.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// As per comment above this box isn't conservative, but has a reasonable size for a very large number of morph targets.\n\t\tbox.expandByVector( maxDisplacement );\n\n\t}\n\n\tgeometry.boundingBox = box;\n\n\tconst sphere = new Sphere();\n\n\tbox.getCenter( sphere.center );\n\tsphere.radius = box.min.distanceTo( box.max ) / 2;\n\n\tgeometry.boundingSphere = sphere;\n\n}\n\n/**\n *\n * @private\n * @param {BufferGeometry} geometry\n * @param {GLTF.Primitive} primitiveDef\n * @param {GLTFParser} parser\n * @return {Promise<BufferGeometry>}\n */\nfunction addPrimitiveAttributes( geometry, primitiveDef, parser ) {\n\n\tconst attributes = primitiveDef.attributes;\n\n\tconst pending = [];\n\n\tfunction assignAttributeAccessor( accessorIndex, attributeName ) {\n\n\t\treturn parser.getDependency( 'accessor', accessorIndex )\n\t\t\t.then( function ( accessor ) {\n\n\t\t\t\tgeometry.setAttribute( attributeName, accessor );\n\n\t\t\t} );\n\n\t}\n\n\tfor ( const gltfAttributeName in attributes ) {\n\n\t\tconst threeAttributeName = ATTRIBUTES[ gltfAttributeName ] || gltfAttributeName.toLowerCase();\n\n\t\t// Skip attributes already provided by e.g. Draco extension.\n\t\tif ( threeAttributeName in geometry.attributes ) continue;\n\n\t\tpending.push( assignAttributeAccessor( attributes[ gltfAttributeName ], threeAttributeName ) );\n\n\t}\n\n\tif ( primitiveDef.indices !== undefined && ! geometry.index ) {\n\n\t\tconst accessor = parser.getDependency( 'accessor', primitiveDef.indices ).then( function ( accessor ) {\n\n\t\t\tgeometry.setIndex( accessor );\n\n\t\t} );\n\n\t\tpending.push( accessor );\n\n\t}\n\n\tif ( ColorManagement.workingColorSpace !== LinearSRGBColorSpace && 'COLOR_0' in attributes ) {\n\n\t\tconsole.warn( `THREE.GLTFLoader: Converting vertex colors from \"srgb-linear\" to \"${ColorManagement.workingColorSpace}\" not supported.` );\n\n\t}\n\n\tassignExtrasToUserData( geometry, primitiveDef );\n\n\tcomputeBounds( geometry, primitiveDef, parser );\n\n\treturn Promise.all( pending ).then( function () {\n\n\t\treturn primitiveDef.targets !== undefined\n\t\t\t? addMorphTargets( geometry, primitiveDef.targets, parser )\n\t\t\t: geometry;\n\n\t} );\n\n}\n\n/**\n * Loader result of `GLTFLoader`.\n *\n * @typedef {Object} GLTFLoader~LoadObject\n * @property {Array<AnimationClip>} animations - An array of animation clips.\n * @property {Object} asset - Meta data about the loaded asset.\n * @property {Array<Camera>} cameras - An array of cameras.\n * @property {GLTFParser} parser - A reference to the internal parser.\n * @property {Group} scene - The default scene.\n * @property {Array<Group>} scenes - glTF assets might define multiple scenes.\n * @property {Object} userData - Additional data.\n **/\n\nexport { GLTFLoader };\n","import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tColor,\n\tColorManagement,\n\tFileLoader,\n\tLoader,\n\tLinearSRGBColorSpace,\n\tSRGBColorSpace\n} from 'three';\n\nconst _taskCache = new WeakMap();\n\n/**\n * A loader for the Draco format.\n *\n * [Draco]{@link https://google.github.io/draco/} is an open source library for compressing\n * and decompressing 3D meshes and point clouds. Compressed geometry can be significantly smaller,\n * at the cost of additional decoding time on the client device.\n *\n * Standalone Draco files have a `.drc` extension, and contain vertex positions, normals, colors,\n * and other attributes. Draco files do not contain materials, textures, animation, or node hierarchies –\n * to use these features, embed Draco geometry inside of a glTF file. A normal glTF file can be converted\n * to a Draco-compressed glTF file using [glTF-Pipeline]{@link https://github.com/CesiumGS/gltf-pipeline}.\n * When using Draco with glTF, an instance of `DRACOLoader` will be used internally by {@link GLTFLoader}.\n *\n * It is recommended to create one DRACOLoader instance and reuse it to avoid loading and creating\n * multiple decoder instances.\n *\n * `DRACOLoader` will automatically use either the JS or the WASM decoding library, based on\n * browser capabilities.\n *\n * ```js\n * const loader = new DRACOLoader();\n * loader.setDecoderPath( '/examples/jsm/libs/draco/' );\n *\n * const geometry = await dracoLoader.loadAsync( 'models/draco/bunny.drc' );\n * geometry.computeVertexNormals(); // optional\n *\n * dracoLoader.dispose();\n * ```\n *\n * @augments Loader\n * @three_import import { DRACOLoader } from 'three/addons/loaders/DRACOLoader.js';\n */\nclass DRACOLoader extends Loader {\n\n\t/**\n\t * Constructs a new Draco loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.decoderPath = '';\n\t\tthis.decoderConfig = {};\n\t\tthis.decoderBinary = null;\n\t\tthis.decoderPending = null;\n\n\t\tthis.workerLimit = 4;\n\t\tthis.workerPool = [];\n\t\tthis.workerNextTaskID = 1;\n\t\tthis.workerSourceURL = '';\n\n\t\tthis.defaultAttributeIDs = {\n\t\t\tposition: 'POSITION',\n\t\t\tnormal: 'NORMAL',\n\t\t\tcolor: 'COLOR',\n\t\t\tuv: 'TEX_COORD'\n\t\t};\n\t\tthis.defaultAttributeTypes = {\n\t\t\tposition: 'Float32Array',\n\t\t\tnormal: 'Float32Array',\n\t\t\tcolor: 'Float32Array',\n\t\t\tuv: 'Float32Array'\n\t\t};\n\n\t}\n\n\t/**\n\t * Provides configuration for the decoder libraries. Configuration cannot be changed after decoding begins.\n\t *\n\t * @param {string} path - The decoder path.\n\t * @return {DRACOLoader} A reference to this loader.\n\t */\n\tsetDecoderPath( path ) {\n\n\t\tthis.decoderPath = path;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Provides configuration for the decoder libraries. Configuration cannot be changed after decoding begins.\n\t *\n\t * @param {{type:('js'|'wasm')}} config - The decoder config.\n\t * @return {DRACOLoader} A reference to this loader.\n\t */\n\tsetDecoderConfig( config ) {\n\n\t\tthis.decoderConfig = config;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the maximum number of Web Workers to be used during decoding.\n\t * A lower limit may be preferable if workers are also for other tasks in the application.\n\t *\n\t * @param {number} workerLimit - The worker limit.\n\t * @return {DRACOLoader} A reference to this loader.\n\t */\n\tsetWorkerLimit( workerLimit ) {\n\n\t\tthis.workerLimit = workerLimit;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded Draco asset\n\t * to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(BufferGeometry)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst loader = new FileLoader( this.manager );\n\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\tloader.load( url, ( buffer ) => {\n\n\t\t\tthis.parse( buffer, onLoad, onError );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t/**\n\t * Parses the given Draco data.\n\t *\n\t * @param {ArrayBuffer} buffer - The raw Draco data as an array buffer.\n\t * @param {function(BufferGeometry)} onLoad - Executed when the loading/parsing process has been finished.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tparse( buffer, onLoad, onError = ()=>{} ) {\n\n\t\tthis.decodeDracoFile( buffer, onLoad, null, null, SRGBColorSpace, onError ).catch( onError );\n\n\t}\n\n\t//\n\n\tdecodeDracoFile( buffer, callback, attributeIDs, attributeTypes, vertexColorSpace = LinearSRGBColorSpace, onError = () => {} ) {\n\n\t\tconst taskConfig = {\n\t\t\tattributeIDs: attributeIDs || this.defaultAttributeIDs,\n\t\t\tattributeTypes: attributeTypes || this.defaultAttributeTypes,\n\t\t\tuseUniqueIDs: !! attributeIDs,\n\t\t\tvertexColorSpace: vertexColorSpace,\n\t\t};\n\n\t\treturn this.decodeGeometry( buffer, taskConfig ).then( callback ).catch( onError );\n\n\t}\n\n\tdecodeGeometry( buffer, taskConfig ) {\n\n\t\tconst taskKey = JSON.stringify( taskConfig );\n\n\t\t// Check for an existing task using this buffer. A transferred buffer cannot be transferred\n\t\t// again from this thread.\n\t\tif ( _taskCache.has( buffer ) ) {\n\n\t\t\tconst cachedTask = _taskCache.get( buffer );\n\n\t\t\tif ( cachedTask.key === taskKey ) {\n\n\t\t\t\treturn cachedTask.promise;\n\n\t\t\t} else if ( buffer.byteLength === 0 ) {\n\n\t\t\t\t// Technically, it would be possible to wait for the previous task to complete,\n\t\t\t\t// transfer the buffer back, and decode again with the second configuration. That\n\t\t\t\t// is complex, and I don't know of any reason to decode a Draco buffer twice in\n\t\t\t\t// different ways, so this is left unimplemented.\n\t\t\t\tthrow new Error(\n\n\t\t\t\t\t'THREE.DRACOLoader: Unable to re-decode a buffer with different ' +\n\t\t\t\t\t'settings. Buffer has already been transferred.'\n\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tlet worker;\n\t\tconst taskID = this.workerNextTaskID ++;\n\t\tconst taskCost = buffer.byteLength;\n\n\t\t// Obtain a worker and assign a task, and construct a geometry instance\n\t\t// when the task completes.\n\t\tconst geometryPending = this._getWorker( taskID, taskCost )\n\t\t\t.then( ( _worker ) => {\n\n\t\t\t\tworker = _worker;\n\n\t\t\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\t\t\tworker._callbacks[ taskID ] = { resolve, reject };\n\n\t\t\t\t\tworker.postMessage( { type: 'decode', id: taskID, taskConfig, buffer }, [ buffer ] );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t} );\n\n\t\t\t} )\n\t\t\t.then( ( message ) => this._createGeometry( message.geometry ) );\n\n\t\t// Remove task from the task list.\n\t\t// Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\t\tgeometryPending\n\t\t\t.catch( () => true )\n\t\t\t.then( () => {\n\n\t\t\t\tif ( worker && taskID ) {\n\n\t\t\t\t\tthis._releaseTask( worker, taskID );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t// Cache the task result.\n\t\t_taskCache.set( buffer, {\n\n\t\t\tkey: taskKey,\n\t\t\tpromise: geometryPending\n\n\t\t} );\n\n\t\treturn geometryPending;\n\n\t}\n\n\t_createGeometry( geometryData ) {\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tif ( geometryData.index ) {\n\n\t\t\tgeometry.setIndex( new BufferAttribute( geometryData.index.array, 1 ) );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < geometryData.attributes.length; i ++ ) {\n\n\t\t\tconst result = geometryData.attributes[ i ];\n\t\t\tconst name = result.name;\n\t\t\tconst array = result.array;\n\t\t\tconst itemSize = result.itemSize;\n\n\t\t\tconst attribute = new BufferAttribute( array, itemSize );\n\n\t\t\tif ( name === 'color' ) {\n\n\t\t\t\tthis._assignVertexColorSpace( attribute, result.vertexColorSpace );\n\n\t\t\t\tattribute.normalized = ( array instanceof Float32Array ) === false;\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( name, attribute );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t}\n\n\t_assignVertexColorSpace( attribute, inputColorSpace ) {\n\n\t\t// While .drc files do not specify colorspace, the only 'official' tooling\n\t\t// is PLY and OBJ converters, which use sRGB. We'll assume sRGB when a .drc\n\t\t// file is passed into .load() or .parse(). GLTFLoader uses internal APIs\n\t\t// to decode geometry, and vertex colors are already Linear-sRGB in there.\n\n\t\tif ( inputColorSpace !== SRGBColorSpace ) return;\n\n\t\tconst _color = new Color();\n\n\t\tfor ( let i = 0, il = attribute.count; i < il; i ++ ) {\n\n\t\t\t_color.fromBufferAttribute( attribute, i );\n\t\t\tColorManagement.colorSpaceToWorking( _color, SRGBColorSpace );\n\t\t\tattribute.setXYZ( i, _color.r, _color.g, _color.b );\n\n\t\t}\n\n\t}\n\n\t_loadLibrary( url, responseType ) {\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.decoderPath );\n\t\tloader.setResponseType( responseType );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\tloader.load( url, resolve, undefined, reject );\n\n\t\t} );\n\n\t}\n\n\tpreload() {\n\n\t\tthis._initDecoder();\n\n\t\treturn this;\n\n\t}\n\n\t_initDecoder() {\n\n\t\tif ( this.decoderPending ) return this.decoderPending;\n\n\t\tconst useJS = typeof WebAssembly !== 'object' || this.decoderConfig.type === 'js';\n\t\tconst librariesPending = [];\n\n\t\tif ( useJS ) {\n\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.js', 'text' ) );\n\n\t\t} else {\n\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_wasm_wrapper.js', 'text' ) );\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.wasm', 'arraybuffer' ) );\n\n\t\t}\n\n\t\tthis.decoderPending = Promise.all( librariesPending )\n\t\t\t.then( ( libraries ) => {\n\n\t\t\t\tconst jsContent = libraries[ 0 ];\n\n\t\t\t\tif ( ! useJS ) {\n\n\t\t\t\t\tthis.decoderConfig.wasmBinary = libraries[ 1 ];\n\n\t\t\t\t}\n\n\t\t\t\tconst fn = DRACOWorker.toString();\n\n\t\t\t\tconst body = [\n\t\t\t\t\t'/* draco decoder */',\n\t\t\t\t\tjsContent,\n\t\t\t\t\t'',\n\t\t\t\t\t'/* worker */',\n\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\n\t\t\t\t].join( '\\n' );\n\n\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\n\n\t\t\t} );\n\n\t\treturn this.decoderPending;\n\n\t}\n\n\t_getWorker( taskID, taskCost ) {\n\n\t\treturn this._initDecoder().then( () => {\n\n\t\t\tif ( this.workerPool.length < this.workerLimit ) {\n\n\t\t\t\tconst worker = new Worker( this.workerSourceURL );\n\n\t\t\t\tworker._callbacks = {};\n\t\t\t\tworker._taskCosts = {};\n\t\t\t\tworker._taskLoad = 0;\n\n\t\t\t\tworker.postMessage( { type: 'init', decoderConfig: this.decoderConfig } );\n\n\t\t\t\tworker.onmessage = function ( e ) {\n\n\t\t\t\t\tconst message = e.data;\n\n\t\t\t\t\tswitch ( message.type ) {\n\n\t\t\t\t\t\tcase 'decode':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].resolve( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'error':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].reject( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.DRACOLoader: Unexpected message, \"' + message.type + '\"' );\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t\tthis.workerPool.push( worker );\n\n\t\t\t} else {\n\n\t\t\t\tthis.workerPool.sort( function ( a, b ) {\n\n\t\t\t\t\treturn a._taskLoad > b._taskLoad ? - 1 : 1;\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tconst worker = this.workerPool[ this.workerPool.length - 1 ];\n\t\t\tworker._taskCosts[ taskID ] = taskCost;\n\t\t\tworker._taskLoad += taskCost;\n\t\t\treturn worker;\n\n\t\t} );\n\n\t}\n\n\t_releaseTask( worker, taskID ) {\n\n\t\tworker._taskLoad -= worker._taskCosts[ taskID ];\n\t\tdelete worker._callbacks[ taskID ];\n\t\tdelete worker._taskCosts[ taskID ];\n\n\t}\n\n\tdebug() {\n\n\t\tconsole.log( 'Task load: ', this.workerPool.map( ( worker ) => worker._taskLoad ) );\n\n\t}\n\n\tdispose() {\n\n\t\tfor ( let i = 0; i < this.workerPool.length; ++ i ) {\n\n\t\t\tthis.workerPool[ i ].terminate();\n\n\t\t}\n\n\t\tthis.workerPool.length = 0;\n\n\t\tif ( this.workerSourceURL !== '' ) {\n\n\t\t\tURL.revokeObjectURL( this.workerSourceURL );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\n/* WEB WORKER */\n\nfunction DRACOWorker() {\n\n\tlet decoderConfig;\n\tlet decoderPending;\n\n\tonmessage = function ( e ) {\n\n\t\tconst message = e.data;\n\n\t\tswitch ( message.type ) {\n\n\t\t\tcase 'init':\n\t\t\t\tdecoderConfig = message.decoderConfig;\n\t\t\t\tdecoderPending = new Promise( function ( resolve/*, reject*/ ) {\n\n\t\t\t\t\tdecoderConfig.onModuleLoaded = function ( draco ) {\n\n\t\t\t\t\t\t// Module is Promise-like. Wrap before resolving to avoid loop.\n\t\t\t\t\t\tresolve( { draco: draco } );\n\n\t\t\t\t\t};\n\n\t\t\t\t\tDracoDecoderModule( decoderConfig ); // eslint-disable-line no-undef\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t\tcase 'decode':\n\t\t\t\tconst buffer = message.buffer;\n\t\t\t\tconst taskConfig = message.taskConfig;\n\t\t\t\tdecoderPending.then( ( module ) => {\n\n\t\t\t\t\tconst draco = module.draco;\n\t\t\t\t\tconst decoder = new draco.Decoder();\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tconst geometry = decodeGeometry( draco, decoder, new Int8Array( buffer ), taskConfig );\n\n\t\t\t\t\t\tconst buffers = geometry.attributes.map( ( attr ) => attr.array.buffer );\n\n\t\t\t\t\t\tif ( geometry.index ) buffers.push( geometry.index.array.buffer );\n\n\t\t\t\t\t\tself.postMessage( { type: 'decode', id: message.id, geometry }, buffers );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tconsole.error( error );\n\n\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error: error.message } );\n\n\t\t\t\t\t} finally {\n\n\t\t\t\t\t\tdraco.destroy( decoder );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t};\n\n\tfunction decodeGeometry( draco, decoder, array, taskConfig ) {\n\n\t\tconst attributeIDs = taskConfig.attributeIDs;\n\t\tconst attributeTypes = taskConfig.attributeTypes;\n\n\t\tlet dracoGeometry;\n\t\tlet decodingStatus;\n\n\t\tconst geometryType = decoder.GetEncodedGeometryType( array );\n\n\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\tdracoGeometry = new draco.Mesh();\n\t\t\tdecodingStatus = decoder.DecodeArrayToMesh( array, array.byteLength, dracoGeometry );\n\n\t\t} else if ( geometryType === draco.POINT_CLOUD ) {\n\n\t\t\tdracoGeometry = new draco.PointCloud();\n\t\t\tdecodingStatus = decoder.DecodeArrayToPointCloud( array, array.byteLength, dracoGeometry );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.DRACOLoader: Unexpected geometry type.' );\n\n\t\t}\n\n\t\tif ( ! decodingStatus.ok() || dracoGeometry.ptr === 0 ) {\n\n\t\t\tthrow new Error( 'THREE.DRACOLoader: Decoding failed: ' + decodingStatus.error_msg() );\n\n\t\t}\n\n\t\tconst geometry = { index: null, attributes: [] };\n\n\t\t// Gather all vertex attributes.\n\t\tfor ( const attributeName in attributeIDs ) {\n\n\t\t\tconst attributeType = self[ attributeTypes[ attributeName ] ];\n\n\t\t\tlet attribute;\n\t\t\tlet attributeID;\n\n\t\t\t// A Draco file may be created with default vertex attributes, whose attribute IDs\n\t\t\t// are mapped 1:1 from their semantic name (POSITION, NORMAL, ...). Alternatively,\n\t\t\t// a Draco file may contain a custom set of attributes, identified by known unique\n\t\t\t// IDs. glTF files always do the latter, and `.drc` files typically do the former.\n\t\t\tif ( taskConfig.useUniqueIDs ) {\n\n\t\t\t\tattributeID = attributeIDs[ attributeName ];\n\t\t\t\tattribute = decoder.GetAttributeByUniqueId( dracoGeometry, attributeID );\n\n\t\t\t} else {\n\n\t\t\t\tattributeID = decoder.GetAttributeId( dracoGeometry, draco[ attributeIDs[ attributeName ] ] );\n\n\t\t\t\tif ( attributeID === - 1 ) continue;\n\n\t\t\t\tattribute = decoder.GetAttribute( dracoGeometry, attributeID );\n\n\t\t\t}\n\n\t\t\tconst attributeResult = decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute );\n\n\t\t\tif ( attributeName === 'color' ) {\n\n\t\t\t\tattributeResult.vertexColorSpace = taskConfig.vertexColorSpace;\n\n\t\t\t}\n\n\t\t\tgeometry.attributes.push( attributeResult );\n\n\t\t}\n\n\t\t// Add index.\n\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\tgeometry.index = decodeIndex( draco, decoder, dracoGeometry );\n\n\t\t}\n\n\t\tdraco.destroy( dracoGeometry );\n\n\t\treturn geometry;\n\n\t}\n\n\tfunction decodeIndex( draco, decoder, dracoGeometry ) {\n\n\t\tconst numFaces = dracoGeometry.num_faces();\n\t\tconst numIndices = numFaces * 3;\n\t\tconst byteLength = numIndices * 4;\n\n\t\tconst ptr = draco._malloc( byteLength );\n\t\tdecoder.GetTrianglesUInt32Array( dracoGeometry, byteLength, ptr );\n\t\tconst index = new Uint32Array( draco.HEAPF32.buffer, ptr, numIndices ).slice();\n\t\tdraco._free( ptr );\n\n\t\treturn { array: index, itemSize: 1 };\n\n\t}\n\n\tfunction decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute ) {\n\n\t\tconst numComponents = attribute.num_components();\n\t\tconst numPoints = dracoGeometry.num_points();\n\t\tconst numValues = numPoints * numComponents;\n\t\tconst byteLength = numValues * attributeType.BYTES_PER_ELEMENT;\n\t\tconst dataType = getDracoDataType( draco, attributeType );\n\n\t\tconst ptr = draco._malloc( byteLength );\n\t\tdecoder.GetAttributeDataArrayForAllPoints( dracoGeometry, attribute, dataType, byteLength, ptr );\n\t\tconst array = new attributeType( draco.HEAPF32.buffer, ptr, numValues ).slice();\n\t\tdraco._free( ptr );\n\n\t\treturn {\n\t\t\tname: attributeName,\n\t\t\tarray: array,\n\t\t\titemSize: numComponents\n\t\t};\n\n\t}\n\n\tfunction getDracoDataType( draco, attributeType ) {\n\n\t\tswitch ( attributeType ) {\n\n\t\t\tcase Float32Array: return draco.DT_FLOAT32;\n\t\t\tcase Int8Array: return draco.DT_INT8;\n\t\t\tcase Int16Array: return draco.DT_INT16;\n\t\t\tcase Int32Array: return draco.DT_INT32;\n\t\t\tcase Uint8Array: return draco.DT_UINT8;\n\t\t\tcase Uint16Array: return draco.DT_UINT16;\n\t\t\tcase Uint32Array: return draco.DT_UINT32;\n\n\t\t}\n\n\t}\n\n}\n\nexport { DRACOLoader };\n","import { ScriptBase } from \"../core/ScriptBase\";\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\r\nimport { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader.js';\r\nimport {THREE} from \"../core/global.ts\";\r\nimport { ObjectPool } from \"../core/PerformanceUtils\";\r\n/**\r\n * GLB加载器配置接口\r\n * 定义GLB文件加载的所有可配置参数\r\n */\r\nexport interface GLBLoaderConfig {\r\n    /** 是否启用Draco压缩支持 */\r\n    enableDraco?: boolean;\r\n    /** Draco解码器路径 */\r\n    dracoDecoderPath?: string;\r\n    /** 是否自动优化模型 */\r\n    autoOptimize?: boolean;\r\n    /** 是否自动添加到场景 */\r\n    autoAddToScene?: boolean;\r\n    /** 默认材质设置 */\r\n    defaultMaterial?: {\r\n        roughness?: number;\r\n        metalness?: number;\r\n        envMapIntensity?: number;\r\n    };\r\n    /** 覆盖材质 - 如果设置，将使用此材质替换所有模型材质 */\r\n    overrideMaterial?: THREE.Material | null;\r\n    /** 材质 */\r\n    materials?: { [name: string]: THREE.Material } | null;\r\n    /** 模型缩放 */\r\n    scale?: THREE.Vector3;\r\n    /** 模型位置 */\r\n    position?: THREE.Vector3;\r\n    /** 模型旋转 */\r\n    rotation?: THREE.Euler;\r\n}\r\n\r\n/**\r\n * 加载进度信息\r\n */\r\nexport interface LoadProgress {\r\n    loaded: number;\r\n    total: number;\r\n    percentage: number;\r\n    url: string;\r\n}\r\n\r\n/**\r\n * GLB模型加载结果\r\n */\r\nexport interface GLBLoadResult {\r\n    scene: THREE.Group;\r\n    animations: THREE.AnimationClip[];\r\n    cameras: THREE.Camera[];\r\n    materials: THREE.Material[];\r\n    parser: any;\r\n    userData: any;\r\n    mixer?: THREE.AnimationMixer;\r\n    actions?: { [name: string]: THREE.AnimationAction };\r\n}\r\n\r\nexport class GLBLoaderScript extends ScriptBase {\r\n    name = 'GLBLoaderScript';\r\n\r\n    /** GLB加载器配置参数 */\r\n    private config: {\r\n        autoOptimize: boolean;\r\n        autoAddToScene: boolean;\r\n        defaultMaterial: { roughness?: number; metalness?: number; envMapIntensity?: number };\r\n        enableDraco: boolean;\r\n        materials: { [name: string]: THREE.Material } | null;\r\n        rotation: THREE.Euler;\r\n        dracoDecoderPath: string;\r\n        scale: THREE.Vector3;\r\n        position: THREE.Vector3;\r\n        overrideMaterial: THREE.Material | null;\r\n    };\r\n\r\n    /** GLTF加载器实例 */\r\n    private gltfLoader: GLTFLoader;\r\n\r\n    /** Draco加载器实例（可选） */\r\n    private dracoLoader: DRACOLoader | null = null;\r\n\r\n    /** 已加载的模型集合，使用URL作为键 */\r\n    private loadedModels = new Map<string, GLBLoadResult>();\r\n\r\n    /** 当前正在加载的模型集合 */\r\n    private loadingModels = new Map<string, Promise<GLBLoadResult>>();\r\n\r\n    /** 动画混合器集合 */\r\n    private mixers = new Map<string, THREE.AnimationMixer>();\r\n\r\n    private materials:THREE.Material | null = null;\r\n\r\n    // 性能优化：添加对象池\r\n    private vector3Pool: ObjectPool<THREE.Vector3>;\r\n    private eulerPool: ObjectPool<THREE.Euler>;\r\n\r\n    /**\r\n     * 构造函数 - 初始化GLB加载器脚本\r\n     *\r\n     * @param options - 可选的配置参数\r\n     */\r\n    constructor(options?: GLBLoaderConfig) {\r\n        super();\r\n\r\n        // 合并默认配置和用户配置\r\n        this.config = {\r\n            enableDraco: false,\r\n            dracoDecoderPath: '/draco/',\r\n            autoOptimize: true,\r\n            autoAddToScene: false,\r\n            defaultMaterial: {\r\n                roughness: 0.5,\r\n                metalness: 0.0,\r\n                envMapIntensity: 1.0\r\n            },\r\n            scale: new THREE.Vector3(1, 1, 1),\r\n            position: new THREE.Vector3(0, 0, 0),\r\n            rotation: new THREE.Euler(0, 0, 0),\r\n            materials: null,\r\n            overrideMaterial: null,\r\n            ...options\r\n        };\r\n\r\n        // 创建GLTF加载器\r\n        this.gltfLoader = new GLTFLoader();\r\n\r\n        // 设置Draco加载器\r\n        this.setupDracoLoader();\r\n\r\n        // 初始化对象池\r\n        this.vector3Pool = new ObjectPool<THREE.Vector3>(\r\n            () => new THREE.Vector3(),\r\n            (vec) => vec.set(0, 0, 0)\r\n        );\r\n\r\n        this.eulerPool = new ObjectPool<THREE.Euler>(\r\n            () => new THREE.Euler(),\r\n            (euler) => euler.set(0, 0, 0)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * 脚本唤醒 - IScript 生命周期的第一个阶段\r\n     */\r\n    public override awake(): void {\r\n        super.awake?.();\r\n    }\r\n\r\n    /**\r\n     * 脚本启用\r\n     */\r\n    public override onEnable(): void {\r\n        super.onEnable?.();\r\n    }\r\n\r\n    public override async start(): Promise<void> {\r\n        super.start?.();\r\n    }\r\n\r\n    public override update(deltaTime: number): void {\r\n        super.update?.(deltaTime);\r\n        for (const mixer of this.mixers.values()) {\r\n            mixer.update(deltaTime);\r\n        }\r\n    }\r\n\r\n    public override onResize(): void {\r\n        super.onResize();\r\n    }\r\n\r\n    public override onDisable(): void {\r\n        super.onDisable?.();\r\n    }\r\n\r\n    public override destroy(): void {\r\n        super.destroy?.();\r\n        this.mixers.clear();\r\n        this.loadedModels.clear();\r\n        this.loadingModels.clear();\r\n        if (this.dracoLoader) {\r\n            this.dracoLoader.dispose();\r\n            this.dracoLoader = null;\r\n        }\r\n    }\r\n\r\n    // ===========================================\r\n    // 私有方法\r\n    // ===========================================\r\n\r\n    /**\r\n     * 设置Draco加载器\r\n     */\r\n    private setupDracoLoader(): void {\r\n        if (this.config.enableDraco) {\r\n            try {\r\n                this.dracoLoader = new DRACOLoader();\r\n                this.dracoLoader.setDecoderPath(this.config.dracoDecoderPath);\r\n                this.gltfLoader.setDRACOLoader(this.dracoLoader);\r\n            } catch (error) {\r\n                console.warn('[GLBLoaderScript] Draco加载器设置失败，已禁用Draco支持:', error);\r\n                this.config.enableDraco = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 优化模型\r\n     */\r\n    private optimizeModel(result: GLBLoadResult): void {\r\n        if (!this.config.autoOptimize) return;\r\n\r\n        result.scene.traverse((child) => {\r\n            if (child instanceof THREE.Mesh) {\r\n                // 启用阴影\r\n                child.castShadow = true;\r\n                child.receiveShadow = true;\r\n\r\n                // 如果配置了覆盖材质且不为空，则使用覆盖材质\r\n                if (this.config.overrideMaterial) {\r\n                    child.material = this.config.overrideMaterial;\r\n                }\r\n                // 否则使用默认材质设置\r\n                else if (child.material instanceof THREE.MeshStandardMaterial) {\r\n                    const material = child.material;\r\n                    const defaultMat = this.config.defaultMaterial;\r\n\r\n                    // 应用默认材质设置\r\n                    if (defaultMat.roughness !== undefined) {\r\n                        material.roughness = defaultMat.roughness;\r\n                    }\r\n                    if (defaultMat.metalness !== undefined) {\r\n                        material.metalness = defaultMat.metalness;\r\n                    }\r\n                    if (defaultMat.envMapIntensity !== undefined) {\r\n                        material.envMapIntensity = defaultMat.envMapIntensity;\r\n                    }\r\n\r\n                    // 设置统一的材质颜色（使用选中代码中的颜色）\r\n                    material.color.setHex(0x151515); // #151515 颜色\r\n\r\n                    material.needsUpdate = true;\r\n                }\r\n\r\n                // 几何体优化\r\n                if (child.geometry) {\r\n                    // 性能优化：只在必要时计算边界框和包围球\r\n                    if (!child.geometry.boundingBox) {\r\n                        child.geometry.computeBoundingBox();\r\n                    }\r\n                    if (!child.geometry.boundingSphere) {\r\n                        child.geometry.computeBoundingSphere();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 应用模型变换\r\n     *\r\n     * @param model - 模型对象\r\n     */\r\n    private applyTransforms(model: THREE.Group): void {\r\n        // 从对象池获取Vector3和Euler对象\r\n        const scale = this.vector3Pool.acquire();\r\n        const position = this.vector3Pool.acquire();\r\n        const rotation = this.eulerPool.acquire();\r\n\r\n        scale.copy(this.config.scale);\r\n        position.copy(this.config.position);\r\n        rotation.copy(this.config.rotation);\r\n\r\n        model.scale.copy(scale);\r\n        model.position.copy(position);\r\n        model.rotation.copy(rotation);\r\n\r\n        // 释放对象回对象池\r\n        this.vector3Pool.release(scale);\r\n        this.vector3Pool.release(position);\r\n        this.eulerPool.release(rotation);\r\n    }\r\n\r\n    /**\r\n     * 创建动画混合器\r\n     *\r\n     * @param model - 模型对象\r\n     * @param animations - 动画剪辑数组\r\n     * @param url - 模型URL（用作混合器标识）\r\n     * @returns 动画控制对象\r\n     */\r\n    private createAnimationMixer(model: THREE.Object3D, animations: THREE.AnimationClip[], url: string) {\r\n        const mixer = new THREE.AnimationMixer(model);\r\n        const actions: { [name: string]: THREE.AnimationAction } = {};\r\n\r\n        // 创建动画动作\r\n        animations.forEach((clip) => {\r\n            const action = mixer.clipAction(clip);\r\n            actions[clip.name] = action;\r\n        });\r\n\r\n        // 保存混合器\r\n        this.mixers.set(url, mixer);\r\n\r\n        return {\r\n            mixer,\r\n            actions,\r\n            play: (animationName: string, loop = true) => {\r\n                const action = actions[animationName];\r\n                if (action) {\r\n                    if (loop) {\r\n                        action.setLoop(THREE.LoopRepeat, Infinity);\r\n                    }\r\n                    action.play();\r\n                }\r\n            },\r\n            stop: (animationName: string) => {\r\n                const action = actions[animationName];\r\n                if (action) {\r\n                    action.stop();\r\n                }\r\n            },\r\n            fadeIn: (animationName: string, duration = 0.5) => {\r\n                const action = actions[animationName];\r\n                if (action) {\r\n                    action.reset().fadeIn(duration).play();\r\n                }\r\n            },\r\n            fadeOut: (animationName: string, duration = 0.5) => {\r\n                const action = actions[animationName];\r\n                if (action) {\r\n                    action.fadeOut(duration);\r\n                }\r\n            },\r\n            crossFade: (fromAnimation: string, toAnimation: string, duration = 1.0) => {\r\n                const fromAction = actions[fromAnimation];\r\n                const toAction = actions[toAnimation];\r\n                if (fromAction && toAction) {\r\n                    fromAction.fadeOut(duration);\r\n                    toAction.reset().fadeIn(duration).play();\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    // ===========================================\r\n    // 公共API方法\r\n    // ===========================================\r\n\r\n    async loadModel(\r\n        url: string,\r\n        options: {\r\n            onProgress?: (progress: LoadProgress) => void;\r\n            onError?: (error: any) => void;\r\n            addToScene?: boolean;\r\n            position?: THREE.Vector3;\r\n            scale?: THREE.Vector3;\r\n            rotation?: THREE.Euler;\r\n            material?: THREE.Material;\r\n        } = {}\r\n    ): Promise<GLBLoadResult> {\r\n        const cached = this.loadedModels.get(url);\r\n        if (cached) {\r\n            const clonedResult = this.cloneModel(cached);\r\n            if (options.position) {\r\n                // 从对象池获取Vector3对象\r\n                const pos = this.vector3Pool.acquire();\r\n                pos.copy(options.position);\r\n                clonedResult.scene.position.copy(pos);\r\n                // 释放对象回对象池\r\n                this.vector3Pool.release(pos);\r\n            }\r\n            if (options.scale) {\r\n                // 从对象池获取Vector3对象\r\n                const scale = this.vector3Pool.acquire();\r\n                scale.copy(options.scale);\r\n                clonedResult.scene.scale.copy(scale);\r\n                // 释放对象回对象池\r\n                this.vector3Pool.release(scale);\r\n            }\r\n            if (options.rotation) {\r\n                // 从对象池获取Euler对象\r\n                const rot = this.eulerPool.acquire();\r\n                rot.copy(options.rotation);\r\n                clonedResult.scene.rotation.copy(rot);\r\n                // 释放对象回对象池\r\n                this.eulerPool.release(rot);\r\n            }\r\n            if ((options.addToScene ?? this.config.autoAddToScene)) {\r\n                this.addObject(clonedResult.scene);\r\n            }\r\n            return clonedResult;\r\n        }\r\n\r\n        // 检查是否正在加载\r\n        const loading = this.loadingModels.get(url);\r\n        if (loading) {\r\n            return loading;\r\n        }\r\n\r\n        // 开始新的加载\r\n        const loadPromise = new Promise<GLBLoadResult>((resolve, reject) => {\r\n            this.gltfLoader.load(\r\n                url,\r\n                (gltf: any) => {\r\n                    // 创建加载结果\r\n                    const result: GLBLoadResult = {\r\n                        scene: gltf.scene,\r\n                        animations: gltf.animations || [],\r\n                        cameras: gltf.cameras || [],\r\n                        parser: gltf.parser,\r\n                        materials: gltf.materials || [],\r\n                        userData: gltf.userData || {}\r\n                    };\r\n\r\n                    // 优化模型\r\n                    this.optimizeModel(result);\r\n\r\n                    // 应用变换\r\n                    this.applyTransforms(result.scene);\r\n                    if (options.position) {\r\n                        // 从对象池获取Vector3对象\r\n                        const pos = this.vector3Pool.acquire();\r\n                        pos.copy(options.position);\r\n                        result.scene.position.copy(pos);\r\n                        // 释放对象回对象池\r\n                        this.vector3Pool.release(pos);\r\n                    }\r\n                    if (options.scale) {\r\n                        // 从对象池获取Vector3对象\r\n                        const scale = this.vector3Pool.acquire();\r\n                        scale.copy(options.scale);\r\n                        result.scene.scale.copy(scale);\r\n                        // 释放对象回对象池\r\n                        this.vector3Pool.release(scale);\r\n                    }\r\n                    if (options.rotation) {\r\n                        // 从对象池获取Euler对象\r\n                        const rot = this.eulerPool.acquire();\r\n                        rot.copy(options.rotation);\r\n                        result.scene.rotation.copy(rot);\r\n                        // 释放对象回对象池\r\n                        this.eulerPool.release(rot);\r\n                    }\r\n\r\n                    // 如果提供了material选项，则使用它替换所有材质\r\n                    if (options.material) {\r\n                        result.scene.traverse((child) => {\r\n                            if (child instanceof THREE.Mesh) {\r\n                                child.material = options.material!;\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    // 创建动画混合器\r\n                    if (result.animations.length > 0) {\r\n                        const animationController = this.createAnimationMixer(result.scene, result.animations, url);\r\n                        result.mixer = animationController.mixer;\r\n                        result.actions = animationController.actions;\r\n\r\n                        // 添加动画控制方法\r\n                        (result as any).playAnimation = animationController.play;\r\n                        (result as any).stopAnimation = animationController.stop;\r\n                        (result as any).fadeInAnimation = animationController.fadeIn;\r\n                        (result as any).fadeOutAnimation = animationController.fadeOut;\r\n                        (result as any).crossFadeAnimation = animationController.crossFade;\r\n                    }\r\n\r\n                    // 添加到场景\r\n                    if ((options.addToScene ?? this.config.autoAddToScene)) {\r\n                        this.addObject(result.scene);\r\n                    } else {\r\n                        console.log('[GLBLoaderScript] 模型未添加到场景中');\r\n                    }\r\n\r\n                    // 缓存结果\r\n                    this.loadedModels.set(url, result);\r\n                    this.loadingModels.delete(url);\r\n                    resolve(result);\r\n                },\r\n                (progress: ProgressEvent) => {\r\n                    const progressInfo: LoadProgress = {\r\n                        loaded: progress.loaded,\r\n                        total: progress.total,\r\n                        percentage: progress.total > 0 ? (progress.loaded / progress.total) * 100 : 0,\r\n                        url\r\n                    };\r\n\r\n                    if (options.onProgress) {\r\n                        options.onProgress(progressInfo);\r\n                    }\r\n                },\r\n                (error: unknown) => {\r\n                    console.error(`[GLBLoaderScript] 加载GLB模型失败: ${url}`, error);\r\n                    this.loadingModels.delete(url);\r\n\r\n                    if (options.onError) {\r\n                        options.onError(error);\r\n                    }\r\n\r\n                    reject(error);\r\n                }\r\n            );\r\n        });\r\n\r\n        // 记录正在加载的Promise\r\n        this.loadingModels.set(url, loadPromise);\r\n\r\n        return loadPromise;\r\n    }\r\n\r\n    /**\r\n     * 克隆模型以支持多次使用\r\n     *\r\n     * @param original - 原始模型结果\r\n     * @returns 克隆的模型结果\r\n     */\r\n    private cloneModel(original: GLBLoadResult): GLBLoadResult {\r\n        return {\r\n            scene: original.scene.clone(),\r\n            animations: [...original.animations],\r\n            cameras: [...original.cameras],\r\n            materials: [...original.materials],\r\n            parser: original.parser,\r\n            userData: {...original.userData}\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 移除模型\r\n     *\r\n     * @param url - 模型URL\r\n     * @param removeFromScene - 是否从场景中移除\r\n     */\r\n    removeModel(url: string, removeFromScene: boolean = true): void {\r\n        const model = this.loadedModels.get(url);\r\n        if (model && removeFromScene) {\r\n            this.removeObject(model.scene);\r\n        }\r\n\r\n        // 清理动画混合器\r\n        const mixer = this.mixers.get(url);\r\n        if (mixer) {\r\n            mixer.stopAllAction();\r\n            this.mixers.delete(url);\r\n        }\r\n\r\n        // 从缓存中移除\r\n        this.loadedModels.delete(url);\r\n    }\r\n\r\n    /**\r\n     * 获取已加载的模型\r\n     *\r\n     * @param url - 模型URL\r\n     * @returns 模型结果或undefined\r\n     */\r\n    getModel(url: string): GLBLoadResult | undefined {\r\n        return this.loadedModels.get(url);\r\n    }\r\n\r\n    /**\r\n     * 获取所有已加载的模型\r\n     *\r\n     * @returns 所有模型的数组\r\n     */\r\n    getAllModels(): { url: string; model: GLBLoadResult }[] {\r\n        return Array.from(this.loadedModels.entries()).map(([url, model]) => ({url, model}));\r\n    }\r\n\r\n    clearScene(clearCache: boolean = false): void {\r\n        for (const [url, model] of this.loadedModels.entries()) {\r\n            this.removeObject(model.scene);\r\n            const mixer = this.mixers.get(url);\r\n            if (mixer) {\r\n                mixer.stopAllAction();\r\n                if (clearCache) {\r\n                    this.mixers.delete(url);\r\n                }\r\n            }\r\n        }\r\n\r\n        // 如果需要清除缓存\r\n        if (clearCache) {\r\n            this.loadedModels.clear();\r\n            this.loadingModels.clear();\r\n            this.mixers.clear();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取场景中当前显示的模型数量\r\n     *\r\n     * @returns 场景中模型的数量\r\n     */\r\n    getSceneModelCount(): number {\r\n        return this.loadedModels.size;\r\n    }\r\n\r\n    /**\r\n     * 检查指定模型是否在场景中显示\r\n     *\r\n     * @param url - 模型URL\r\n     * @returns 模型是否在场景中显示\r\n     */\r\n    isModelInScene(url: string): boolean {\r\n        const model = this.loadedModels.get(url);\r\n        if (!model) return false;\r\n\r\n        // 检查模型是否在场景中\r\n        return this.scene.children.includes(model.scene);\r\n    }\r\n\r\n    /**\r\n     * 将已缓存的模型添加到场景中\r\n     *\r\n     * @param url - 模型URL\r\n     * @returns 是否成功添加到场景\r\n     */\r\n    addModelToScene(url: string): boolean {\r\n        const model = this.loadedModels.get(url);\r\n        if (!model) {\r\n            console.warn(`[GLBLoaderScript] 无法添加模型到场景: ${url}`);\r\n            return false;\r\n        }\r\n\r\n        if (this.scene.children.includes(model.scene)) {\r\n            return true;\r\n        }\r\n\r\n        this.addObject(model.scene);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 从场景中移除指定模型（不清除缓存）\r\n     *\r\n     * @param url - 模型URL\r\n     * @returns 是否成功从场景中移除\r\n     */\r\n    removeModelFromScene(url: string): boolean {\r\n        const model = this.loadedModels.get(url);\r\n        if (!model) {\r\n            console.warn(`[GLBLoaderScript] 无法从场景中移除模型: ${url}`);\r\n            return false;\r\n        }\r\n        this.removeObject(model.scene);\r\n        const mixer = this.mixers.get(url);\r\n        if (mixer) {\r\n            mixer.stopAllAction();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 更新配置\r\n     *\r\n     * @param newConfig - 新的配置参数\r\n     */\r\n    updateConfig(newConfig: Partial<GLBLoaderConfig>): void {\r\n        Object.assign(this.config, newConfig);\r\n        if (newConfig.enableDraco !== undefined || newConfig.dracoDecoderPath) {\r\n            this.setupDracoLoader();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取当前配置\r\n     *\r\n     * @returns 配置对象的副本\r\n     */\r\n    getConfig(): GLBLoaderConfig {\r\n        return { ...this.config };\r\n    }\r\n}\r\n","import { ScriptBase } from \"../core/ScriptBase\";\r\nimport { THREE } from \"../core/global\";\r\n\r\n/**\r\n * UV动画配置接口\r\n */\r\nexport interface UVAnimationConfig {\r\n    /** 动画目标对象名称 */\r\n    targetName: string;\r\n    /** UV滚动速度 X轴 */\r\n    scrollSpeedX?: number;\r\n    /** UV滚动速度 Y轴 */\r\n    scrollSpeedY?: number;\r\n    /** UV缩放速度 X轴 */\r\n    scaleSpeedX?: number;\r\n    /** UV缩放速度 Y轴 */\r\n    scaleSpeedY?: number;\r\n    /** UV旋转速度 */\r\n    rotationSpeed?: number;\r\n    /** 是否启用 */\r\n    enabled?: boolean;\r\n    /** 是否启用透明度 */\r\n    transparent?: boolean;\r\n    /** 透明度值 */\r\n    opacity?: number;\r\n    /** 是否使用双面材质 */\r\n    doubleSided?: boolean;\r\n}\r\n\r\n/**\r\n * 场景创建配置接口\r\n */\r\nexport interface SceneCreationConfig {\r\n    /** 纹理URL */\r\n    textureUrl: string;\r\n    /** 对象配置数组 */\r\n    objects: Array<{\r\n        /** 对象类型 ('plane' | 'cylinder' | 'box') */\r\n        type: 'plane' | 'cylinder' | 'box';\r\n        /** 对象名称 */\r\n        name: string;\r\n        /** 位置 */\r\n        position?: [number, number, number];\r\n        /** 旋转 */\r\n        rotation?: [number, number, number];\r\n        /** 尺寸参数 */\r\n        size?: number[];\r\n    }>;\r\n    /** 是否启用渐变透明效果 */\r\n    enableGradientAlpha?: boolean;\r\n    /** 渐变方向 ('bottomToTop' | 'topToBottom' | 'leftToRight' | 'rightToLeft') */\r\n    gradientDirection?: 'bottomToTop' | 'topToBottom' | 'leftToRight' | 'rightToLeft';\r\n    /** 外部alpha贴图URL（如果提供，将优先使用） */\r\n    alphaMapUrl?: string;\r\n    /** 灯光配置 */\r\n    lights?: Array<{\r\n        /** 灯光类型 ('ambient' | 'directional' | 'point' | 'spot') */\r\n        type: 'ambient' | 'directional' | 'point' | 'spot';\r\n        /** 灯光颜色 */\r\n        color?: number | string;\r\n        /** 灯光强度 */\r\n        intensity?: number;\r\n        /** 灯光位置（点光源和聚光灯） */\r\n        position?: [number, number, number];\r\n        /** 灯光方向（方向光） */\r\n        direction?: [number, number, number];\r\n    }>;\r\n    /** 雾配置 */\r\n    fog?: {\r\n        /** 雾颜色 */\r\n        color: number | string;\r\n        /** 雾近端 */\r\n        near: number;\r\n        /** 雾远端 */\r\n        far: number;\r\n    };\r\n}\r\n\r\n/**\r\n * UV动画脚本\r\n * 用于创建纹理UV动画效果，如滚动、缩放、旋转等\r\n */\r\nexport class UVAnimationScript extends ScriptBase {\r\n    private animations: Map<string, {\r\n        mesh: THREE.Mesh;\r\n        config: Required<UVAnimationConfig>;\r\n        offset: THREE.Vector2;\r\n        scale: THREE.Vector2;\r\n        rotation: number;\r\n    }> = new Map();\r\n\r\n    private defaultConfig: Required<UVAnimationConfig> = {\r\n        targetName: '',\r\n        scrollSpeedX: 0,\r\n        scrollSpeedY: 0,\r\n        scaleSpeedX: 0,\r\n        scaleSpeedY: 0,\r\n        rotationSpeed: 0,\r\n        enabled: true,\r\n        transparent: false,\r\n        opacity: 1.0,\r\n        doubleSided: false\r\n    };\r\n\r\n    private sceneCreationConfig: SceneCreationConfig | null = null;\r\n    private sharedTexture: THREE.Texture | null = null;\r\n    private alphaMap: THREE.Texture | null = null;\r\n\r\n    constructor(configs?: UVAnimationConfig | UVAnimationConfig[]) {\r\n        super();\r\n        this.name = \"UVAnimationScript\";\r\n\r\n        if (configs) {\r\n            if (Array.isArray(configs)) {\r\n                configs.forEach(config => this.addAnimation(config));\r\n            } else {\r\n                this.addAnimation(configs);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置场景创建配置\r\n     * @param config 场景创建配置\r\n     */\r\n    public setSceneCreationConfig(config: SceneCreationConfig): void {\r\n        this.sceneCreationConfig = config;\r\n    }\r\n\r\n    /**\r\n     * 加载纹理的辅助函数\r\n     * @param url 纹理文件路径\r\n     * @returns Promise<THREE.Texture>\r\n     */\r\n    private loadTexture(url: string): Promise<THREE.Texture> {\r\n        return new Promise((resolve, reject) => {\r\n            const loader = new THREE.TextureLoader();\r\n            loader.load(\r\n                url,\r\n                (texture) => {\r\n                    texture.wrapS = THREE.RepeatWrapping;\r\n                    texture.wrapT = THREE.RepeatWrapping;\r\n                    texture.format = THREE.RGBAFormat;                    // 启用透明贴图支持\r\n                    resolve(texture);\r\n                },\r\n                undefined,\r\n                (error) => {\r\n                    console.error('[UVAnimationScript] 纹理加载失败:', error);\r\n                    reject(error);\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 创建渐变透明贴图\r\n     * @param direction 渐变方向\r\n     * @returns Canvas纹理\r\n     */\r\n    private createGradientAlphaMap(direction: 'bottomToTop' | 'topToBottom' | 'leftToRight' | 'rightToLeft' = 'bottomToTop'): THREE.CanvasTexture {\r\n        const gradientCanvas = document.createElement('canvas');\r\n        gradientCanvas.width = 256;\r\n        gradientCanvas.height = 256;\r\n        const ctx = gradientCanvas.getContext('2d')!;\r\n\r\n        let gradient;\r\n        switch (direction) {\r\n            case 'bottomToTop':\r\n                gradient = ctx.createLinearGradient(0, gradientCanvas.height, 0, 0);\r\n                break;\r\n            case 'topToBottom':\r\n                gradient = ctx.createLinearGradient(0, 0, 0, gradientCanvas.height);\r\n                break;\r\n            case 'leftToRight':\r\n                gradient = ctx.createLinearGradient(0, 0, gradientCanvas.width, 0);\r\n                break;\r\n            case 'rightToLeft':\r\n                gradient = ctx.createLinearGradient(gradientCanvas.width, 0, 0, 0);\r\n                break;\r\n            default:\r\n                gradient = ctx.createLinearGradient(0, gradientCanvas.height, 0, 0);\r\n        }\r\n\r\n        // 创建渐变（从透明到不透明）\r\n        gradient.addColorStop(0, 'rgba(0, 0, 0, 0)');   // 完全透明\r\n        gradient.addColorStop(1, 'rgba(255, 255, 255, 1)'); // 完全不透明\r\n\r\n        ctx.fillStyle = gradient;\r\n        ctx.fillRect(0, 0, gradientCanvas.width, gradientCanvas.height);\r\n\r\n        const alphaMap = new THREE.CanvasTexture(gradientCanvas);\r\n        alphaMap.wrapS = THREE.RepeatWrapping;\r\n        alphaMap.wrapT = THREE.RepeatWrapping;\r\n\r\n        return alphaMap;\r\n    }\r\n\r\n    /**\r\n     * 加载外部alpha贴图\r\n     * @param url 贴图URL\r\n     * @returns Promise<THREE.Texture>\r\n     */\r\n    private loadAlphaMap(url: string): Promise<THREE.Texture | null> {\r\n        return new Promise((resolve) => {\r\n            const loader = new THREE.TextureLoader();\r\n            loader.load(\r\n                url,\r\n                (texture) => {\r\n                    texture.wrapS = THREE.RepeatWrapping;\r\n                    texture.wrapT = THREE.RepeatWrapping;\r\n                    texture.format = THREE.RedFormat; // Alpha贴图通常只需要红色通道\r\n                    resolve(texture);\r\n                },\r\n                undefined,\r\n                (error) => {\r\n                    console.error('[UVAnimationScript] Alpha贴图加载失败:', error);\r\n                    // 如果外部贴图加载失败，返回null，后续会使用程序生成的渐变贴图\r\n                    resolve(null);\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 创建场景对象\r\n     */\r\n    private async createSceneObjects(): Promise<void> {\r\n        if (!this.sceneCreationConfig || !this.renderer) return;\r\n\r\n        try {\r\n            // 加载纹理\r\n            this.sharedTexture = await this.loadTexture(this.sceneCreationConfig.textureUrl);\r\n\r\n            // 创建或加载alpha贴图\r\n            if (this.sceneCreationConfig.alphaMapUrl) {\r\n                // 如果提供了外部alpha贴图URL，尝试加载外部贴图\r\n                try {\r\n                    this.alphaMap = await this.loadAlphaMap(this.sceneCreationConfig.alphaMapUrl);\r\n                    if (!this.alphaMap) {\r\n                        // 如果加载失败且启用了渐变透明效果，创建程序化渐变贴图\r\n                        if (this.sceneCreationConfig.enableGradientAlpha) {\r\n                            console.warn('[UVAnimationScript] 外部alpha贴图加载失败，使用程序生成的渐变贴图');\r\n                            this.alphaMap = this.createGradientAlphaMap(this.sceneCreationConfig.gradientDirection);\r\n                        }\r\n                    } else {\r\n                        console.log('[UVAnimationScript] 成功加载外部alpha贴图');\r\n                    }\r\n                } catch (error) {\r\n                    // 如果加载失败且启用了渐变透明效果，创建程序化渐变贴图\r\n                    if (this.sceneCreationConfig.enableGradientAlpha) {\r\n                        console.warn('[UVAnimationScript] 外部alpha贴图加载失败，使用程序生成的渐变贴图:', error);\r\n                        this.alphaMap = this.createGradientAlphaMap(this.sceneCreationConfig.gradientDirection);\r\n                    }\r\n                }\r\n            } else if (this.sceneCreationConfig.enableGradientAlpha) {\r\n                // 如果启用渐变透明效果，创建程序化渐变贴图\r\n                this.alphaMap = this.createGradientAlphaMap(this.sceneCreationConfig.gradientDirection);\r\n            }\r\n\r\n            // 创建材质\r\n            const material = new THREE.MeshStandardMaterial({\r\n                color: '#ffffff',         // 材质基础颜色\r\n                transparent: true,        // 开启透明混合\r\n                map: this.sharedTexture,  // 绑定基础纹理\r\n                alphaMap: this.alphaMap || undefined, // 绑定alpha贴图\r\n                opacity: 1,               // 全局透明度\r\n                depthWrite: true,        // 透明物体关闭深度写入\r\n                blending: THREE.AdditiveBlending // 发光效果混合\r\n            });\r\n\r\n            // 创建对象\r\n            for (const objConfig of this.sceneCreationConfig.objects) {\r\n                let geometry: THREE.BufferGeometry;\r\n                let mesh: THREE.Mesh;\r\n\r\n                switch (objConfig.type) {\r\n                    case 'plane':\r\n                        geometry = new THREE.PlaneGeometry(\r\n                            objConfig.size?.[0] || 2,\r\n                            objConfig.size?.[1] || 2,\r\n                            objConfig.size?.[2] || 1\r\n                        );\r\n                        mesh = new THREE.Mesh(geometry, material);\r\n                        if (objConfig.rotation) {\r\n                            mesh.rotation.set(...objConfig.rotation);\r\n                        }\r\n                        break;\r\n\r\n                    case 'cylinder':\r\n                        geometry = new THREE.CylinderGeometry(\r\n                            objConfig.size?.[0] || 0.5,  // topRadius\r\n                            objConfig.size?.[1] || 0.5,  // bottomRadius\r\n                            objConfig.size?.[2] || 1,    // height\r\n                            objConfig.size?.[3] || 32    // radialSegments\r\n                        );\r\n                        mesh = new THREE.Mesh(geometry, material);\r\n                        break;\r\n\r\n                    case 'box':\r\n                        geometry = new THREE.BoxGeometry(\r\n                            objConfig.size?.[0] || 1,\r\n                            objConfig.size?.[1] || 1,\r\n                            objConfig.size?.[2] || 1\r\n                        );\r\n                        mesh = new THREE.Mesh(geometry, material);\r\n                        break;\r\n\r\n                    default:\r\n                        console.warn(`[UVAnimationScript] Unsupported object type: ${objConfig.type}`);\r\n                        continue;\r\n                }\r\n\r\n                // 设置位置\r\n                if (objConfig.position) {\r\n                    mesh.position.set(...objConfig.position);\r\n                }\r\n\r\n                // 设置名称\r\n                mesh.name = objConfig.name;\r\n\r\n                // 添加到场景\r\n                this.addObject(mesh);\r\n\r\n                // 如果这个对象需要UV动画，添加到动画列表\r\n                if (this.animations.has(objConfig.name)) {\r\n                    const animation = this.animations.get(objConfig.name)!;\r\n                    animation.mesh = mesh;\r\n                    this.applyMaterialConfig(animation);\r\n                }\r\n\r\n                console.log(`[UVAnimationScript] Created object: ${objConfig.name}`);\r\n            }\r\n\r\n            // 创建灯光\r\n            if (this.sceneCreationConfig.lights) {\r\n                for (const lightConfig of this.sceneCreationConfig.lights) {\r\n                    let light: THREE.Light;\r\n\r\n                    switch (lightConfig.type) {\r\n                        case 'ambient':\r\n                            light = new THREE.AmbientLight(\r\n                                lightConfig.color || 0x404040,\r\n                                lightConfig.intensity || 0.5\r\n                            );\r\n                            break;\r\n\r\n                        case 'directional':\r\n                            light = new THREE.DirectionalLight(\r\n                                lightConfig.color || 0xffffff,\r\n                                lightConfig.intensity || 1\r\n                            );\r\n                            if (lightConfig.direction) {\r\n                                light.position.set(...lightConfig.direction);\r\n                            } else {\r\n                                light.position.set(5, 10, 7); // 默认方向\r\n                            }\r\n                            light.castShadow = true;\r\n                            break;\r\n\r\n                        case 'point':\r\n                            light = new THREE.PointLight(\r\n                                lightConfig.color || 0xffffff,\r\n                                lightConfig.intensity || 1,\r\n                                100, // 距离\r\n                                1    // 衰减\r\n                            );\r\n                            if (lightConfig.position) {\r\n                                light.position.set(...lightConfig.position);\r\n                            } else {\r\n                                light.position.set(0, 5, 0); // 默认位置\r\n                            }\r\n                            light.castShadow = true;\r\n                            break;\r\n\r\n                        case 'spot':\r\n                            light = new THREE.SpotLight(\r\n                                lightConfig.color || 0xffffff,\r\n                                lightConfig.intensity || 1,\r\n                                100,  // 距离\r\n                                Math.PI / 4, // 角度\r\n                                0.5,  // 衰减\r\n                                1     // 聚光灯指数\r\n                            );\r\n                            if (lightConfig.position) {\r\n                                light.position.set(...lightConfig.position);\r\n                            } else {\r\n                                light.position.set(0, 10, 0); // 默认位置\r\n                            }\r\n                            // 修复SpotLight target设置问题\r\n                            if (lightConfig.direction) {\r\n                                // 创建一个新的Object3D作为target\r\n                                const targetObject = new THREE.Object3D();\r\n                                targetObject.position.set(...lightConfig.direction);\r\n                                this.addObject(targetObject);\r\n                                (light as THREE.SpotLight).target = targetObject;\r\n                            }\r\n                            light.castShadow = true;\r\n                            break;\r\n\r\n                        default:\r\n                            console.warn(`[UVAnimationScript] Unsupported light type: ${lightConfig.type}`);\r\n                            continue;\r\n                    }\r\n\r\n                    light.name = `${lightConfig.type}Light`;\r\n                    this.addObject(light);\r\n                    console.log(`[UVAnimationScript] Created light: ${lightConfig.type}`);\r\n                }\r\n            }\r\n\r\n            // 添加标题文字（如果在主场景中）\r\n            if (this.scene.name === 'main') {\r\n                this.addTitleElement();\r\n            }\r\n        } catch (error) {\r\n            console.error('[UVAnimationScript] Failed to create scene objects:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 添加标题元素\r\n     */\r\n    private addTitleElement(): void {\r\n        const title = document.createElement('div');\r\n        title.innerHTML = `\r\n            <h1 style=\"color: white; text-align: center; margin-top: 20px;\">UV动画测试 - 镂空贴图效果</h1>\r\n            <p style=\"color: #ccc; text-align: center;\">黑色部分形成镂空效果，可以透过看到背景</p>\r\n            <p style=\"color: #ccc; text-align: center;\">常用于制作树叶、栅栏、装饰图案等</p>\r\n            <p style=\"color: #ccc; text-align: center;\">使用鼠标拖拽旋转视角，滚动缩放</p>\r\n        `;\r\n        title.style.position = 'absolute';\r\n        title.style.top = '0';\r\n        title.style.width = '100%';\r\n        title.style.zIndex = '100';\r\n        title.style.pointerEvents = 'none'; // 不拦截鼠标事件\r\n        document.body.appendChild(title);\r\n    }\r\n\r\n    /**\r\n     * 添加UV动画\r\n     * @param config 动画配置\r\n     */\r\n    public addAnimation(config: UVAnimationConfig): void {\r\n        const fullConfig = { ...this.defaultConfig, ...config };\r\n\r\n        // 检查是否已存在同名动画\r\n        if (this.animations.has(fullConfig.targetName)) {\r\n            console.warn(`[UVAnimationScript] Animation for target \"${fullConfig.targetName}\" already exists`);\r\n            return;\r\n        }\r\n\r\n        this.animations.set(fullConfig.targetName, {\r\n            mesh: null as any, // 将在start中初始化\r\n            config: fullConfig,\r\n            offset: new THREE.Vector2(0, 0),\r\n            scale: new THREE.Vector2(1, 1),\r\n            rotation: 0\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 移除UV动画\r\n     * @param targetName 目标对象名称\r\n     */\r\n    public removeAnimation(targetName: string): void {\r\n        const animation = this.animations.get(targetName);\r\n        if (animation) {\r\n            // 重置材质的UV变换\r\n            if (animation.mesh && animation.mesh.material) {\r\n                this.resetMaterialUV(animation.mesh.material);\r\n            }\r\n            this.animations.delete(targetName);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新动画配置\r\n     * @param targetName 目标对象名称\r\n     * @param config 新的配置\r\n     */\r\n    public updateAnimation(targetName: string, config: Partial<UVAnimationConfig>): void {\r\n        const animation = this.animations.get(targetName);\r\n        if (animation) {\r\n            Object.assign(animation.config, config);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 启用动画\r\n     * @param targetName 目标对象名称\r\n     */\r\n    public enableAnimation(targetName: string): void {\r\n        const animation = this.animations.get(targetName);\r\n        if (animation) {\r\n            animation.config.enabled = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 禁用动画\r\n     * @param targetName 目标对象名称\r\n     */\r\n    public disableAnimation(targetName: string): void {\r\n        const animation = this.animations.get(targetName);\r\n        if (animation) {\r\n            animation.config.enabled = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取动画配置\r\n     * @param targetName 目标对象名称\r\n     */\r\n    public getAnimationConfig(targetName: string): UVAnimationConfig | undefined {\r\n        const animation = this.animations.get(targetName);\r\n        return animation ? animation.config : undefined;\r\n    }\r\n\r\n    /**\r\n     * 重置材质的UV变换\r\n     * @param material 材质\r\n     */\r\n    private resetMaterialUV(material: THREE.Material | THREE.Material[]): void {\r\n        if (Array.isArray(material)) {\r\n            material.forEach(mat => this.resetSingleMaterialUV(mat));\r\n        } else {\r\n            this.resetSingleMaterialUV(material);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 重置单个材质的UV变换\r\n     * @param material 材质\r\n     */\r\n    private resetSingleMaterialUV(material: THREE.Material): void {\r\n        if ((material as any).map) {\r\n            const texture = (material as any).map;\r\n            texture.offset.set(0, 0);\r\n            texture.repeat.set(1, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 初始化脚本\r\n     */\r\n    public override start(): void {\r\n        super.start?.();\r\n\r\n        // 创建场景对象\r\n        this.createSceneObjects().then(() => {\r\n            // 查找并初始化所有动画目标\r\n            this.animations.forEach((animation, targetName) => {\r\n                // 如果mesh还没有设置（可能是在createSceneObjects中设置的）\r\n                if (!animation.mesh) {\r\n                    const object = this.scene.getObjectByName(targetName);\r\n                    if (object && object instanceof THREE.Mesh) {\r\n                        animation.mesh = object as THREE.Mesh;\r\n                        // 应用材质配置\r\n                        this.applyMaterialConfig(animation);\r\n                        console.log(`[UVAnimationScript] Found target mesh: ${targetName}`);\r\n                    } else {\r\n                        console.warn(`[UVAnimationScript] Target mesh not found: ${targetName}`);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 应用材质配置\r\n     * @param animation 动画数据\r\n     */\r\n    private applyMaterialConfig(animation: {\r\n        mesh: THREE.Mesh;\r\n        config: Required<UVAnimationConfig>;\r\n    }): void {\r\n        const material = animation.mesh.material;\r\n\r\n        const applyToMaterial = (mat: THREE.Material) => {\r\n            // 设置透明度\r\n            if (animation.config.transparent !== undefined) {\r\n                mat.transparent = animation.config.transparent;\r\n            }\r\n\r\n            if (animation.config.opacity !== undefined) {\r\n                mat.opacity = animation.config.opacity;\r\n            }\r\n\r\n            // 设置双面材质\r\n            if (animation.config.doubleSided !== undefined) {\r\n                mat.side = animation.config.doubleSided ? THREE.DoubleSide : THREE.FrontSide;\r\n            }\r\n        };\r\n\r\n        // 处理单个材质或材质数组\r\n        if (Array.isArray(material)) {\r\n            material.forEach(applyToMaterial);\r\n        } else {\r\n            applyToMaterial(material);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新动画\r\n     * @param deltaTime 帧时间\r\n     */\r\n    public override update(deltaTime: number): void {\r\n        super.update?.(deltaTime);\r\n\r\n        this.animations.forEach(animation => {\r\n            // 检查动画是否启用且mesh存在\r\n            if (!animation.config.enabled || !animation.mesh) return;\r\n\r\n            // 更新偏移\r\n            animation.offset.x += animation.config.scrollSpeedX! * deltaTime;\r\n            animation.offset.y += animation.config.scrollSpeedY! * deltaTime;\r\n\r\n            // 更新缩放\r\n            animation.scale.x += animation.config.scaleSpeedX! * deltaTime;\r\n            animation.scale.y += animation.config.scaleSpeedY! * deltaTime;\r\n\r\n            // 更新旋转\r\n            animation.rotation += animation.config.rotationSpeed! * deltaTime;\r\n\r\n            // 应用UV变换到材质\r\n            this.applyUVTransform(animation);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 应用UV变换到材质\r\n     * @param animation 动画数据\r\n     */\r\n    private applyUVTransform(animation: {\r\n        mesh: THREE.Mesh;\r\n        offset: THREE.Vector2;\r\n        scale: THREE.Vector2;\r\n        rotation: number;\r\n    }): void {\r\n        const material = animation.mesh.material;\r\n        if (!material) return;\r\n\r\n        const applyToMaterial = (mat: THREE.Material) => {\r\n            // 检查材质是否有纹理\r\n            if ((mat as any).map) {\r\n                const texture = (mat as any).map;\r\n\r\n                // 确保设置了重复包装模式，这对于UV动画是必需的\r\n                texture.wrapS = THREE.RepeatWrapping;\r\n                texture.wrapT = THREE.RepeatWrapping;\r\n\r\n                // 应用偏移\r\n                texture.offset.x = animation.offset.x;\r\n                texture.offset.y = animation.offset.y;\r\n\r\n                // 应用缩放\r\n                texture.repeat.x = animation.scale.x;\r\n                texture.repeat.y = animation.scale.y;\r\n\r\n                // 标记纹理需要更新\r\n                texture.needsUpdate = true;\r\n            }\r\n        };\r\n\r\n        // 处理单个材质或材质数组\r\n        if (Array.isArray(material)) {\r\n            material.forEach(applyToMaterial);\r\n        } else {\r\n            applyToMaterial(material);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 销毁脚本\r\n     */\r\n    public override destroy(): void {\r\n        super.destroy?.();\r\n\r\n        // 移除标题元素\r\n        const titles = document.querySelectorAll('div h1, div p');\r\n        titles.forEach(element => {\r\n            if (element.textContent?.includes('UV动画测试')) {\r\n                element.parentElement?.remove();\r\n            }\r\n        });\r\n\r\n        // 重置所有材质的UV变换\r\n        this.animations.forEach(animation => {\r\n            if (animation.mesh && animation.mesh.material) {\r\n                this.resetMaterialUV(animation.mesh.material);\r\n            }\r\n        });\r\n\r\n        // 销毁纹理\r\n        if (this.sharedTexture) {\r\n            this.sharedTexture.dispose();\r\n        }\r\n        if (this.alphaMap) {\r\n            this.alphaMap.dispose();\r\n        }\r\n\r\n        this.animations.clear();\r\n    }\r\n}\r\n","import { THREE } from \"../core/global\";\r\nimport { CanvasTexture } from \"three\";\r\n\r\n/**\r\n * UV动画材质类\r\n * 专门用于处理UV动画的材质\r\n */\r\nexport class AnimationMaterial extends THREE.MeshStandardMaterial {\r\n    private _uvOffset: THREE.Vector2 = new THREE.Vector2(0, 0);\r\n    private _uvScale: THREE.Vector2 = new THREE.Vector2(1, 1);\r\n    private _uvRotation: number = 0;\r\n\r\n    constructor(config?: {\r\n        depthWrite?: boolean;\r\n        color?: number | string;\r\n        texture?: THREE.Texture;\r\n        alphaMap?: CanvasTexture;\r\n        doubleSided?: boolean;\r\n        opacity?: number;\r\n        uvScale?: THREE.Vector2;\r\n        uvOffset?: THREE.Vector2;\r\n        transparent?: boolean;\r\n    }) {\r\n        // 处理透明度相关配置\r\n        const isTransparent = config?.transparent ?? false;\r\n        const hasAlphaMap = !!config?.alphaMap;\r\n        const opacity = config?.opacity ?? 1.0;\r\n\r\n        // 对于透明材质，通常需要关闭深度写入以避免遮挡问题\r\n        const depthWrite = config?.depthWrite ?? !(isTransparent || hasAlphaMap || opacity < 1.0);\r\n\r\n        super({\r\n            color: config?.color,\r\n            transparent: isTransparent,\r\n            opacity: opacity,\r\n            map: config?.texture,\r\n            alphaTest: 0.05,\r\n            alphaMap: config?.alphaMap,\r\n            side: config?.doubleSided ? THREE.DoubleSide : THREE.FrontSide,\r\n            blending: THREE.AdditiveBlending,\r\n            depthWrite: depthWrite\r\n        });\r\n\r\n        // 对于透明材质，设置渲染顺序以确保在不透明对象之后渲染\r\n        if (isTransparent || hasAlphaMap || opacity < 1.0) {\r\n            this.depthWrite = false;\r\n            // 设置透明对象的渲染顺序，确保在不透明对象之后渲染\r\n            this.transparent = true;\r\n        }\r\n\r\n        // 正确处理uvOffset配置\r\n        if (config?.uvOffset) {\r\n            this._uvOffset.copy(config.uvOffset);\r\n        }\r\n\r\n        // 正确处理uvScale配置\r\n        if (config?.uvScale) {\r\n            this._uvScale.copy(config.uvScale);\r\n        }\r\n\r\n        // 确保纹理使用重复包装模式\r\n        if (this.map) {\r\n            this.map.wrapS = THREE.RepeatWrapping;\r\n            this.map.wrapT = THREE.RepeatWrapping;\r\n        }\r\n\r\n        if (this.alphaMap) {\r\n            this.alphaMap.wrapS = THREE.RepeatWrapping;\r\n            this.alphaMap.wrapT = THREE.RepeatWrapping;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取UV偏移\r\n     */\r\n    get uvOffset(): THREE.Vector2 {\r\n        return this._uvOffset.clone();\r\n    }\r\n\r\n    /**\r\n     * 设置UV偏移\r\n     */\r\n    set uvOffset(value: THREE.Vector2) {\r\n        this._uvOffset.copy(value);\r\n        this.updateUVTransform();\r\n    }\r\n\r\n    /**\r\n     * 获取UV缩放\r\n     */\r\n    get uvScale(): THREE.Vector2 {\r\n        return this._uvScale.clone();\r\n    }\r\n\r\n    /**\r\n     * 设置UV缩放\r\n     */\r\n    set uvScale(value: THREE.Vector2) {\r\n        this._uvScale.copy(value);\r\n        this.updateUVTransform();\r\n    }\r\n\r\n    /**\r\n     * 获取UV旋转角度\r\n     */\r\n    get uvRotation(): number {\r\n        return this._uvRotation;\r\n    }\r\n\r\n    /**\r\n     * 设置UV旋转角度\r\n     */\r\n    set uvRotation(value: number) {\r\n        this._uvRotation = value;\r\n        this.updateUVTransform();\r\n    }\r\n\r\n    /**\r\n     * 更新UV变换\r\n     */\r\n    private updateUVTransform(): void {\r\n        if (this.map) {\r\n            this.map.offset.copy(this._uvOffset);\r\n            this.map.repeat.copy(this._uvScale);\r\n            this.map.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 应用UV滚动\r\n     * @param deltaX X轴偏移增量\r\n     * @param deltaY Y轴偏移增量\r\n     */\r\n    public scrollUV(deltaX: number, deltaY: number): void {\r\n        this._uvOffset.x += deltaX;\r\n        this._uvOffset.y += deltaY;\r\n        this.updateUVTransform();\r\n    }\r\n\r\n    /**\r\n     * 应用UV缩放\r\n     * @param scaleX X轴缩放增量\r\n     * @param scaleY Y轴缩放增量\r\n     */\r\n    public scaleUV(scaleX: number, scaleY: number): void {\r\n        this._uvScale.x += scaleX;\r\n        this._uvScale.y += scaleY;\r\n        this.updateUVTransform();\r\n    }\r\n\r\n    /**\r\n     * 重置UV变换到初始状态\r\n     */\r\n    public resetUV(): void {\r\n        this._uvOffset.set(0, 0);\r\n        this._uvScale.set(1, 1);\r\n        this._uvRotation = 0;\r\n        this.updateUVTransform();\r\n    }\r\n\r\n    /**\r\n     * 设置UV变换参数\r\n     * @param offset UV偏移\r\n     * @param scale UV缩放\r\n     * @param rotation UV旋转角度\r\n     */\r\n    public setUVTransform(offset?: THREE.Vector2, scale?: THREE.Vector2, rotation?: number): void {\r\n        if (offset) {\r\n            this._uvOffset.copy(offset);\r\n        }\r\n        if (scale) {\r\n            this._uvScale.copy(scale);\r\n        }\r\n        if (rotation !== undefined) {\r\n            this._uvRotation = rotation;\r\n        }\r\n        this.updateUVTransform();\r\n    }\r\n\r\n    /**\r\n     * 获取当前UV变换状态\r\n     */\r\n    public getUVTransform(): { offset: THREE.Vector2; scale: THREE.Vector2; rotation: number } {\r\n        return {\r\n            offset: this._uvOffset.clone(),\r\n            scale: this._uvScale.clone(),\r\n            rotation: this._uvRotation\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * UV动画配置接口\r\n */\r\nexport interface UVAnimationConfig {\r\n    /** 动画目标对象名称 */\r\n    targetName: string;\r\n    /** UV滚动速度 X轴 */\r\n    scrollSpeedX?: number;\r\n    /** UV滚动速度 Y轴 */\r\n    scrollSpeedY?: number;\r\n    /** UV缩放速度 X轴 */\r\n    scaleSpeedX?: number;\r\n    /** UV缩放速度 Y轴 */\r\n    scaleSpeedY?: number;\r\n    /** UV旋转速度 */\r\n    rotationSpeed?: number;\r\n    /** 是否启用 */\r\n    enabled?: boolean;\r\n    /** 是否启用透明度 */\r\n    transparent?: boolean;\r\n    /** 透明度值 */\r\n    opacity?: number;\r\n    /** 是否使用双面材质 */\r\n    doubleSided?: boolean;\r\n}\r\n\r\nexport class UVAnimationScript {\r\n    private animations: Map<string, {\r\n        mesh: THREE.Mesh;\r\n        config: Required<UVAnimationConfig>;\r\n        offset: THREE.Vector2;\r\n        scale: THREE.Vector2;\r\n        rotation: number;\r\n    }> = new Map();\r\n\r\n    private defaultConfig: Required<UVAnimationConfig> = {\r\n        targetName: '',\r\n        scrollSpeedX: 0,\r\n        scrollSpeedY: 0,\r\n        scaleSpeedX: 0,\r\n        scaleSpeedY: 0,\r\n        rotationSpeed: 0,\r\n        enabled: true,\r\n        transparent: false,\r\n        opacity: 1.0,\r\n        doubleSided: false\r\n    };\r\n\r\n    constructor(configs?: UVAnimationConfig | UVAnimationConfig[]) {\r\n        if (configs) {\r\n            if (Array.isArray(configs)) {\r\n                configs.forEach(config => this.addAnimation(config));\r\n            } else {\r\n                this.addAnimation(configs);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 添加UV动画\r\n     * @param config 动画配置\r\n     */\r\n    public addAnimation(config: UVAnimationConfig): void {\r\n        const fullConfig = { ...this.defaultConfig, ...config };\r\n\r\n        // 检查是否已存在同名动画\r\n        if (this.animations.has(fullConfig.targetName)) {\r\n            console.warn(`[UVAnimationScript] Animation for target \"${fullConfig.targetName}\" already exists`);\r\n            return;\r\n        }\r\n\r\n        this.animations.set(fullConfig.targetName, {\r\n            mesh: null as any, // 将在start中初始化\r\n            config: fullConfig,\r\n            offset: new THREE.Vector2(0, 0),\r\n            scale: new THREE.Vector2(1, 1),\r\n            rotation: 0\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 移除UV动画\r\n     * @param targetName 目标对象名称\r\n     */\r\n    public removeAnimation(targetName: string): void {\r\n        const animation = this.animations.get(targetName);\r\n        if (animation) {\r\n            // 重置材质的UV变换\r\n            if (animation.mesh && animation.mesh.material) {\r\n                this.resetMaterialUV(animation.mesh.material);\r\n            }\r\n            this.animations.delete(targetName);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新动画配置\r\n     * @param targetName 目标对象名称\r\n     * @param config 新的配置\r\n     */\r\n    public updateAnimation(targetName: string, config: Partial<UVAnimationConfig>): void {\r\n        const animation = this.animations.get(targetName);\r\n        if (animation) {\r\n            Object.assign(animation.config, config);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 启用动画\r\n     * @param targetName 目标对象名称\r\n     */\r\n    public enableAnimation(targetName: string): void {\r\n        const animation = this.animations.get(targetName);\r\n        if (animation) {\r\n            animation.config.enabled = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 禁用动画\r\n     * @param targetName 目标对象名称\r\n     */\r\n    public disableAnimation(targetName: string): void {\r\n        const animation = this.animations.get(targetName);\r\n        if (animation) {\r\n            animation.config.enabled = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取动画配置\r\n     * @param targetName 目标对象名称\r\n     */\r\n    public getAnimationConfig(targetName: string): UVAnimationConfig | undefined {\r\n        const animation = this.animations.get(targetName);\r\n        return animation ? animation.config : undefined;\r\n    }\r\n\r\n    /**\r\n     * 重置材质的UV变换\r\n     * @param material 材质\r\n     */\r\n    private resetMaterialUV(material: THREE.Material | THREE.Material[]): void {\r\n        if (Array.isArray(material)) {\r\n            material.forEach(mat => this.resetSingleMaterialUV(mat));\r\n        } else {\r\n            this.resetSingleMaterialUV(material);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 重置单个材质的UV变换\r\n     * @param material 材质\r\n     */\r\n    private resetSingleMaterialUV(material: THREE.Material): void {\r\n        if ((material as any).map) {\r\n            const texture = (material as any).map;\r\n            texture.offset.set(0, 0);\r\n            texture.repeat.set(1, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 加载纹理的辅助函数\r\n     * @param url 纹理文件路径\r\n     * @returns Promise<THREE.Texture>\r\n     */\r\n    private loadTexture(url: string): Promise<THREE.Texture> {\r\n        return new Promise((resolve, reject) => {\r\n            const loader = new THREE.TextureLoader();\r\n            loader.load(\r\n                url,\r\n                (texture) => {\r\n                    texture.wrapS = THREE.RepeatWrapping;\r\n                    texture.wrapT = THREE.RepeatWrapping;\r\n                    // 启用透明贴图支持\r\n                    texture.format = THREE.RGBAFormat;\r\n                    resolve(texture);\r\n                },\r\n                undefined,\r\n                (error) => {\r\n                    console.error('[UVAnimationScript] 纹理加载失败:', error);\r\n                    reject(error);\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 创建渐变透明贴图\r\n     * @param direction 渐变方向\r\n     * @returns Canvas纹理\r\n     */\r\n    private createGradientAlphaMap(direction: 'bottomToTop' | 'topToBottom' | 'leftToRight' | 'rightToLeft' = 'bottomToTop'): THREE.CanvasTexture {\r\n        const gradientCanvas = document.createElement('canvas');\r\n        gradientCanvas.width = 256;\r\n        gradientCanvas.height = 256;\r\n        const ctx = gradientCanvas.getContext('2d')!;\r\n\r\n        let gradient;\r\n        switch (direction) {\r\n            case 'bottomToTop':\r\n                gradient = ctx.createLinearGradient(0, gradientCanvas.height, 0, 0);\r\n                break;\r\n            case 'topToBottom':\r\n                gradient = ctx.createLinearGradient(0, 0, 0, gradientCanvas.height);\r\n                break;\r\n            case 'leftToRight':\r\n                gradient = ctx.createLinearGradient(0, 0, gradientCanvas.width, 0);\r\n                break;\r\n            case 'rightToLeft':\r\n                gradient = ctx.createLinearGradient(gradientCanvas.width, 0, 0, 0);\r\n                break;\r\n            default:\r\n                gradient = ctx.createLinearGradient(0, gradientCanvas.height, 0, 0);\r\n        }\r\n\r\n        // 创建渐变（从透明到不透明）\r\n        gradient.addColorStop(0, 'rgba(0, 0, 0, 0)');   // 完全透明\r\n        gradient.addColorStop(1, 'rgba(255, 255, 255, 1)'); // 完全不透明\r\n\r\n        ctx.fillStyle = gradient;\r\n        ctx.fillRect(0, 0, gradientCanvas.width, gradientCanvas.height);\r\n\r\n        const alphaMap = new THREE.CanvasTexture(gradientCanvas);\r\n        alphaMap.wrapS = THREE.RepeatWrapping;\r\n        alphaMap.wrapT = THREE.RepeatWrapping;\r\n\r\n        return alphaMap;\r\n    }\r\n\r\n    /**\r\n     * 加载外部alpha贴图\r\n     * @param url 贴图URL\r\n     * @returns Promise<THREE.Texture>\r\n     */\r\n    private loadAlphaMap(url: string): Promise<THREE.Texture | null> {\r\n        return new Promise((resolve) => {\r\n            const loader = new THREE.TextureLoader();\r\n            loader.load(\r\n                url,\r\n                (texture) => {\r\n                    texture.wrapS = THREE.RepeatWrapping;\r\n                    texture.wrapT = THREE.RepeatWrapping;\r\n                    texture.format = THREE.RedFormat; // Alpha贴图通常只需要红色通道\r\n                    resolve(texture);\r\n                },\r\n                undefined,\r\n                (error) => {\r\n                    console.error('[UVAnimationScript] Alpha贴图加载失败:', error);\r\n                    // 如果外部贴图加载失败，返回null，后续会使用程序生成的渐变贴图\r\n                    resolve(null);\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    private MeshStandardUVMaterial(sharedTexture: THREE.Texture, alphaMap: THREE.Texture | null): THREE.MeshStandardMaterial {\r\n        // 对于透明材质，通常需要关闭深度写入以避免遮挡问题\r\n        const hasAlphaMap = !!alphaMap;\r\n        const isTransparent = true; // 明确设置为透明\r\n        const depthWrite = !(isTransparent || hasAlphaMap);\r\n\r\n        const material = new THREE.MeshStandardMaterial({\r\n            color: '#fff300',                   // 材质基础颜色\r\n            transparent: isTransparent,         // 开启透明混合\r\n            map: sharedTexture,                 // 绑定基础纹理\r\n            alphaMap: alphaMap || undefined,    // 绑定alpha贴图\r\n            opacity: 1,                         // 全局透明度\r\n            depthWrite: depthWrite,             // 透明物体关闭深度写入\r\n            blending: THREE.AdditiveBlending,   // 发光效果混合\r\n            side: THREE.DoubleSide              // 双面渲染\r\n        });\r\n\r\n        // 确保透明材质正确渲染\r\n        if (isTransparent || hasAlphaMap) {\r\n            material.depthWrite = false;\r\n        }\r\n\r\n        return material;\r\n    }\r\n\r\n    /**\r\n     * 应用材质配置\r\n     * @param animation 动画数据\r\n     */\r\n    private applyMaterialConfig(animation: { mesh: THREE.Mesh; config: Required<UVAnimationConfig>; }): void {\r\n        const material = animation.mesh.material;\r\n        const applyToMaterial = (mat: THREE.Material) => {\r\n            // 设置透明度\r\n            if (animation.config.transparent !== undefined) {\r\n                mat.transparent = animation.config.transparent;\r\n            }\r\n\r\n            if (animation.config.opacity !== undefined) {\r\n                mat.opacity = animation.config.opacity;\r\n            }\r\n\r\n            // 正确处理深度写入设置，避免透明材质遮挡问题\r\n            if (mat.constructor === THREE.Material) {\r\n                // 对于透明材质，通常需要关闭深度写入以避免遮挡问题\r\n                const isTransparent = mat.transparent || (mat.opacity !== undefined && mat.opacity < 1.0);\r\n                if (mat.depthWrite !== undefined) {\r\n                    mat.depthWrite = !isTransparent;\r\n                }\r\n\r\n                // 确保透明对象在不透明对象之后渲染\r\n                if (isTransparent && mat.transparent !== undefined) {\r\n                    mat.transparent = true;\r\n                }\r\n            }\r\n\r\n            // 设置双面材质\r\n            if (animation.config.doubleSided !== undefined) {\r\n                mat.side = animation.config.doubleSided ? THREE.DoubleSide : THREE.FrontSide;\r\n            }\r\n        };\r\n\r\n        // 处理单个材质或材质数组\r\n        if (Array.isArray(material)) {\r\n            material.forEach(applyToMaterial);\r\n        } else {\r\n            applyToMaterial(material);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新动画\r\n     * @param deltaTime 帧时间\r\n     */\r\n    public update(deltaTime: number): void {\r\n        this.animations.forEach(animation => {\r\n            // 检查动画是否启用且mesh存在\r\n            if (!animation.config.enabled || !animation.mesh) return;\r\n\r\n            // 更新偏移\r\n            animation.offset.x += animation.config.scrollSpeedX * deltaTime;\r\n            animation.offset.y += animation.config.scrollSpeedY * deltaTime;\r\n\r\n            // 更新缩放\r\n            animation.scale.x += animation.config.scaleSpeedX * deltaTime;\r\n            animation.scale.y += animation.config.scaleSpeedY * deltaTime;\r\n\r\n            // 更新旋转\r\n            animation.rotation += animation.config.rotationSpeed * deltaTime;\r\n\r\n            // 应用UV变换到材质\r\n            this.applyUVTransform(animation);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 应用UV变换到材质\r\n     * @param animation 动画数据\r\n     */\r\n    private applyUVTransform(animation: {\r\n        mesh: THREE.Mesh;\r\n        offset: THREE.Vector2;\r\n        scale: THREE.Vector2;\r\n        rotation: number;\r\n    }): void {\r\n        const material = animation.mesh.material;\r\n        if (!material) return;\r\n\r\n        const applyToMaterial = (mat: THREE.Material) => {\r\n            // 检查材质是否有纹理\r\n            if ((mat as any).map) {\r\n                const texture = (mat as any).map;\r\n\r\n                // 确保设置了重复包装模式，这对于UV动画是必需的\r\n                texture.wrapS = THREE.RepeatWrapping;\r\n                texture.wrapT = THREE.RepeatWrapping;\r\n\r\n                // 应用偏移\r\n                texture.offset.x = animation.offset.x;\r\n                texture.offset.y = animation.offset.y;\r\n\r\n                // 应用缩放\r\n                texture.repeat.x = animation.scale.x;\r\n                texture.repeat.y = animation.scale.y;\r\n\r\n                // 标记纹理需要更新\r\n                texture.needsUpdate = true;\r\n            }\r\n        };\r\n\r\n        // 处理单个材质或材质数组\r\n        if (Array.isArray(material)) {\r\n            material.forEach(applyToMaterial);\r\n        } else {\r\n            applyToMaterial(material);\r\n        }\r\n    }\r\n}\r\n","import { THREE } from \"../core/global\";\r\n\r\nexport interface GlowMaterialParameters {\r\n    map?: THREE.Texture | null;\r\n    aoMap?: THREE.Texture | null;  // AO贴图\r\n    glowColor?: THREE.Color | string | number;\r\n    glowIntensity?: number;\r\n    baseBrightness?: number;\r\n    side?: THREE.Side;  // 双面材质支持\r\n}\r\n\r\nexport class ShaderGlowMaterial extends THREE.ShaderMaterial {\r\n    constructor(parameters: GlowMaterialParameters = {}) {\r\n        const glowColor = parameters.glowColor !== undefined ?\r\n            (parameters.glowColor instanceof THREE.Color ? parameters.glowColor : new THREE.Color(parameters.glowColor)) : '#fffb2e';\r\n\r\n        const baseBrightness = parameters.baseBrightness !== undefined ? parameters.baseBrightness : 0.8;\r\n\r\n        // 设置双面材质，默认为正面渲染\r\n        const side = parameters.side !== undefined ? parameters.side : THREE.FrontSide;\r\n\r\n        super({\r\n            uniforms: {\r\n                map: { value: parameters.map || null },\r\n                aoMap: { value: parameters.aoMap || null },\r\n                glowColor: { value: glowColor },\r\n                glowIntensity: { value: parameters.glowIntensity !== undefined ? parameters.glowIntensity : 2.0 },\r\n                baseBrightness: { value: baseBrightness }\r\n            },\r\n            side: side,  // 设置渲染面\r\n            vertexShader: `\r\n                varying vec2 vUv;\r\n                varying vec3 vNormal;\r\n                varying vec2 vUv2; // 第二UV坐标用于AO贴图\r\n                void main() {\r\n                    vUv = uv;\r\n                    vNormal = normalize(normalMatrix * normal);\r\n                    // 如果存在第二UV坐标则使用，否则使用第一UV坐标\r\n                    #ifdef USE_UV2\r\n                        vUv2 = uv2;\r\n                    #else\r\n                        vUv2 = uv;\r\n                    #endif\r\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n                }\r\n            `,\r\n            fragmentShader: `\r\n                uniform sampler2D map;\r\n                uniform sampler2D glowMap;\r\n                uniform vec3 glowColor;\r\n                uniform float glowIntensity;\r\n                uniform float baseBrightness;\r\n                varying vec2 vUv;\r\n                varying vec3 vNormal;\r\n                varying vec2 vUv2;\r\n\r\n                void main() {\r\n                    vec4 texColor = texture2D(map, vUv);\r\n                    // 从AO贴图获取环境光遮蔽值\r\n                    vec4 aoValue = texture2D(glowMap, vUv2);\r\n                    \r\n                    // 直接使用AO贴图的灰度值控制自发光（反向效果）\r\n                    // AO贴图中较暗的区域（灰度值接近0）会产生更强的自发光\r\n                    // 1.0 - aoValue.r 实现反向效果：暗部发光，亮部不发光\r\n                    float glowFactor = (1.0 - aoValue.r) * glowIntensity;\r\n                    \r\n                    // 调整基础颜色亮度，避免过白\r\n                    vec3 adjustedBaseColor = texColor.rgb * baseBrightness;\r\n                    \r\n                    // 计算最终颜色：调整后的基础纹理颜色 + 自发光颜色\r\n                    vec3 finalColor = adjustedBaseColor + glowColor * glowFactor;\r\n                    \r\n                    // 限制最大亮度，避免过曝\r\n                    finalColor = min(finalColor, vec3(1.0));\r\n                    \r\n                    gl_FragColor = vec4(finalColor, texColor.a);\r\n                }\r\n            `\r\n        });\r\n    }\r\n\r\n    get map(): THREE.Texture | null {\r\n        return this.uniforms.map.value;\r\n    }\r\n\r\n    set map(value: THREE.Texture | null) {\r\n        this.uniforms.map.value = value;\r\n    }\r\n\r\n    get glowMap(): THREE.Texture | null {\r\n        return this.uniforms.glowMap.value;\r\n    }\r\n\r\n    set glowMap(value: THREE.Texture | null) {\r\n        this.uniforms.glowMap.value = value;\r\n    }\r\n\r\n    get glowColor(): THREE.Color {\r\n        return this.uniforms.glowColor.value;\r\n    }\r\n\r\n    set glowColor(value: THREE.Color) {\r\n        this.uniforms.glowColor.value = value;\r\n    }\r\n\r\n    get glowIntensity(): number {\r\n        return this.uniforms.glowIntensity.value;\r\n    }\r\n\r\n    set glowIntensity(value: number) {\r\n        this.uniforms.glowIntensity.value = value;\r\n    }\r\n\r\n    get baseBrightness(): number {\r\n        return this.uniforms.baseBrightness.value;\r\n    }\r\n\r\n    set baseBrightness(value: number) {\r\n        this.uniforms.baseBrightness.value = value;\r\n    }\r\n\r\n    // 添加双面材质设置方法\r\n    setSide(side: THREE.Side): void {\r\n        this.side = side;\r\n    }\r\n}\r\n","import { THREE } from \"../core/global\";\r\n\r\n/**\r\n * 风效材质类\r\n * 专门用于处理带有弯曲效果的风流材质\r\n */\r\nexport class WindMaterial extends THREE.ShaderMaterial {\r\n    private _curveIntensity: number = 1.0;\r\n    private _windStrength: number = 0.7;\r\n    private _time: number = 0;\r\n    private _glowIntensity: number = 0.5; // 发光强度\r\n    private _glowColor: THREE.Color = new THREE.Color(0x00ffff); // 发光颜色\r\n    private _speed: number = 1.0; // 车辆速度\r\n    private _direction: number = 1.0; // 风流方向 (1为向前，-1为向后)\r\n\r\n    constructor(params?: THREE.ShaderMaterialParameters) {\r\n        const defaultParams = {\r\n            side: THREE.DoubleSide,\r\n            transparent: true,\r\n            depthWrite: false,\r\n            uniforms: {\r\n                uTime: { value: 0 },\r\n                uCurveIntensity: { value: 1.0 },\r\n                uWindStrength: { value: 0.7 },\r\n                uGlowIntensity: { value: 0.5 },\r\n                uGlowColor: { value: new THREE.Color(0x00ffff) },\r\n                uColor: { value: new THREE.Color(0x00ffff) },\r\n                uSpeed: { value: 1.0 }, // 车辆速度uniform\r\n                uDirection: { value: 1.0 } // 风流方向uniform\r\n            },\r\n            vertexShader: `\r\n                varying vec2 vUv;\r\n                varying vec3 vNormal;\r\n                varying vec3 vPosition;\r\n                uniform float uTime;\r\n                uniform float uCurveIntensity;\r\n                uniform float uSpeed;\r\n                uniform float uDirection;\r\n                \r\n                void main() {\r\n                    vUv = uv;\r\n                    vNormal = normalize(normalMatrix * normal);\r\n                    vPosition = position;\r\n                    \r\n                    // 修改顶点位置以创建弯曲效果\r\n                    vec3 newPosition = position;\r\n                    \r\n                    // 创建更自然的风流弯曲效果\r\n                    float windOffset = sin(uTime * uSpeed * 0.3 + position.y * 0.15) * uCurveIntensity * 0.08;\r\n                    // 添加基于X轴位置的波动，使效果更复杂\r\n                    float windOffset2 = cos(uTime * uSpeed * 0.25 + position.x * 0.1) * uCurveIntensity * 0.04;\r\n                    // 根据Y轴位置调整弯曲程度，使中心区域效果更明显\r\n                    float yFactor = 1.0 - pow(abs(position.y) / 0.4, 1.005);\r\n                    newPosition.x += (windOffset + windOffset2) * uDirection * yFactor;\r\n                    \r\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0);\r\n                }\r\n            `,\r\n            fragmentShader: `\r\n                varying vec2 vUv;\r\n                varying vec3 vNormal;\r\n                varying vec3 vPosition;\r\n                \r\n                uniform float uTime;\r\n                uniform float uWindStrength;\r\n                uniform float uGlowIntensity;\r\n                uniform vec3 uGlowColor;\r\n                uniform vec3 uColor;\r\n                uniform float uSpeed;\r\n                uniform float uDirection;\r\n                \r\n                void main() {\r\n                    // 计算Y轴渐变（从上到下透明度递减，并在边缘预留位置）\r\n                    float yGradient = 1.0 - vUv.y;\r\n                    // 在顶部和底部预留位置，使边缘完全透明\r\n                    yGradient = smoothstep(0.4995, 0.5005, yGradient);\r\n                    \r\n                    // 添加时间相关的波动效果，结合速度参数\r\n                    float wave = sin(uTime * uSpeed * 0.6 + vPosition.x * 0.8 + vPosition.y * 0.2) * 0.03;\r\n                    // 添加第二个频率的波动\r\n                    float wave2 = cos(uTime * uSpeed * 0.4 + vPosition.x * 0.4 + vPosition.y * 0.12) * 0.015;\r\n                    \r\n                    // 计算X轴渐变（中心透明度高，边缘低，并且边缘完全透明）\r\n                    float xGradient = 1.0 - abs(vUv.x - 0.5) * 2.0;\r\n                    // 在边缘预留位置，使效果边缘完全透明\r\n                    xGradient = smoothstep(0.4998, 0.5002, xGradient);\r\n                    \r\n                    // 计算径向渐变（从中心到边缘透明度递减）\r\n                    vec2 center = vec2(0.5, 0.5);\r\n                    float distance = distance(vUv, center);\r\n                    float radialGradient = 1.0 - distance * 1.0000005;\r\n                    // 在边缘预留位置，使边缘完全透明\r\n                    radialGradient = smoothstep(0.4995, 0.5005, radialGradient);\r\n                    \r\n                    // 综合透明度，结合速度影响\r\n                    float alpha = yGradient * xGradient * radialGradient * uWindStrength + wave + wave2;\r\n                    \r\n                    // 确保透明度在合理范围内\r\n                    alpha = clamp(alpha, 0.0, 1.0);\r\n                    \r\n                    // 添加颜色变化\r\n                    vec3 color = uColor;\r\n                    color.r += sin(uTime * uSpeed * 0.4 + vPosition.x * 0.1) * 0.03;\r\n                    color.g += cos(uTime * uSpeed * 0.5 + vPosition.y * 0.04) * 0.03;\r\n                    color.b += sin(uTime * uSpeed * 0.25 + vPosition.x * 0.05 + vPosition.y * 0.08) * 0.03;\r\n                    \r\n                    // 计算发光效果，结合速度参数\r\n                    float glow = uGlowIntensity * (0.06 + abs(sin(uTime * uSpeed * 1.0 + vPosition.x * 0.5)) * 0.1);\r\n                    vec3 glowColor = uGlowColor * glow * radialGradient;\r\n                    \r\n                    // 合成最终颜色\r\n                    vec3 finalColor = color + glowColor;\r\n                    \r\n                    // 如果透明度太低则丢弃像素，使边缘完全透明\r\n                    if (alpha < 0.00000005) discard;\r\n                    \r\n                    gl_FragColor = vec4(finalColor, alpha);\r\n                }\r\n            `,\r\n            ...params\r\n        };\r\n\r\n        super(defaultParams);\r\n\r\n        // 定义响应式属性\r\n        Object.defineProperties(this, {\r\n            curveIntensity: {\r\n                get: () => this._curveIntensity,\r\n                set: (value: number) => {\r\n                    this._curveIntensity = value;\r\n                    if (this.uniforms.uCurveIntensity) {\r\n                        this.uniforms.uCurveIntensity.value = value;\r\n                    }\r\n                }\r\n            },\r\n            windStrength: {\r\n                get: () => this._windStrength,\r\n                set: (value: number) => {\r\n                    this._windStrength = value;\r\n                    if (this.uniforms.uWindStrength) {\r\n                        this.uniforms.uWindStrength.value = value;\r\n                    }\r\n                }\r\n            },\r\n            time: {\r\n                get: () => this._time,\r\n                set: (value: number) => {\r\n                    this._time = value;\r\n                    if (this.uniforms.uTime) {\r\n                        this.uniforms.uTime.value = value;\r\n                    }\r\n                }\r\n            },\r\n            glowIntensity: {\r\n                get: () => this._glowIntensity,\r\n                set: (value: number) => {\r\n                    this._glowIntensity = value;\r\n                    if (this.uniforms.uGlowIntensity) {\r\n                        this.uniforms.uGlowIntensity.value = value;\r\n                    }\r\n                }\r\n            },\r\n            glowColor: {\r\n                get: () => this._glowColor,\r\n                set: (value: THREE.Color) => {\r\n                    this._glowColor = value;\r\n                    if (this.uniforms.uGlowColor) {\r\n                        this.uniforms.uGlowColor.value = value;\r\n                    }\r\n                }\r\n            },\r\n            speed: {\r\n                get: () => this._speed,\r\n                set: (value: number) => {\r\n                    this._speed = value;\r\n                    if (this.uniforms.uSpeed) {\r\n                        this.uniforms.uSpeed.value = value;\r\n                    }\r\n                }\r\n            },\r\n            direction: {\r\n                get: () => this._direction,\r\n                set: (value: number) => {\r\n                    this._direction = value;\r\n                    if (this.uniforms.uDirection) {\r\n                        this.uniforms.uDirection.value = value;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 设置弯曲强度\r\n     * @param intensity 弯曲强度 (0-2)\r\n     */\r\n    set curveIntensity(intensity: number) {\r\n        this._curveIntensity = intensity;\r\n        if (this.uniforms.uCurveIntensity) {\r\n            this.uniforms.uCurveIntensity.value = intensity;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取弯曲强度\r\n     */\r\n    get curveIntensity(): number {\r\n        return this._curveIntensity;\r\n    }\r\n\r\n    /**\r\n     * 设置风力强度\r\n     * @param strength 风力强度 (0.1-1.0)\r\n     */\r\n    set windStrength(strength: number) {\r\n        this._windStrength = strength;\r\n        if (this.uniforms.uWindStrength) {\r\n            this.uniforms.uWindStrength.value = strength;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取风力强度\r\n     */\r\n    get windStrength(): number {\r\n        return this._windStrength;\r\n    }\r\n\r\n    /**\r\n     * 设置时间参数\r\n     * @param time 时间值\r\n     */\r\n    set time(time: number) {\r\n        this._time = time;\r\n        if (this.uniforms.uTime) {\r\n            this.uniforms.uTime.value = time;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取时间参数\r\n     */\r\n    get time(): number {\r\n        return this._time;\r\n    }\r\n\r\n    /**\r\n     * 设置风流颜色\r\n     * @param color 颜色值\r\n     */\r\n    set color(color: THREE.Color) {\r\n        if (this.uniforms.uColor) {\r\n            this.uniforms.uColor.value = color;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取风流颜色\r\n     */\r\n    get color(): THREE.Color {\r\n        return this.uniforms.uColor?.value || new THREE.Color(0x00ffff);\r\n    }\r\n\r\n    /**\r\n     * 设置发光强度\r\n     * @param intensity 发光强度 (0-1)\r\n     */\r\n    set glowIntensity(intensity: number) {\r\n        this._glowIntensity = intensity;\r\n        if (this.uniforms.uGlowIntensity) {\r\n            this.uniforms.uGlowIntensity.value = intensity;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取发光强度\r\n     */\r\n    get glowIntensity(): number {\r\n        return this._glowIntensity;\r\n    }\r\n\r\n    /**\r\n     * 设置发光颜色\r\n     * @param color 发光颜色\r\n     */\r\n    set glowColor(color: THREE.Color) {\r\n        this._glowColor = color;\r\n        if (this.uniforms.uGlowColor) {\r\n            this.uniforms.uGlowColor.value = color;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取发光颜色\r\n     */\r\n    get glowColor(): THREE.Color {\r\n        return this._glowColor;\r\n    }\r\n\r\n    /**\r\n     * 设置车辆速度\r\n     * @param speed 车辆速度 (0-5)\r\n     */\r\n    set speed(speed: number) {\r\n        this._speed = speed;\r\n        if (this.uniforms.uSpeed) {\r\n            this.uniforms.uSpeed.value = speed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取车辆速度\r\n     */\r\n    get speed(): number {\r\n        return this._speed;\r\n    }\r\n\r\n    /**\r\n     * 设置风流方向\r\n     * @param direction 风流方向 (1为向前，-1为向后)\r\n     */\r\n    set direction(direction: number) {\r\n        this._direction = direction;\r\n        if (this.uniforms.uDirection) {\r\n            this.uniforms.uDirection.value = direction;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取风流方向\r\n     */\r\n    get direction(): number {\r\n        return this._direction;\r\n    }\r\n}","import { THREE } from \"../core/global\";\r\n\r\n/**\r\n * 丝带材质类\r\n * 基于RetroArch菜单着色器管道的移植\r\n */\r\nexport class RibbonMaterial extends THREE.ShaderMaterial {\r\n    private _time: number = 1.0;\r\n\r\n    constructor(params?: THREE.ShaderMaterialParameters) {\r\n        const defaultParams = {\r\n            side: THREE.DoubleSide,\r\n            transparent: true,\r\n            depthTest: false,\r\n            uniforms: {\r\n                time: { value: 1.0 },\r\n            },\r\n            vertexShader: `\r\n                varying vec3 vEC;\r\n                uniform float time;\r\n        \r\n                float iqhash(float n) {\r\n                    return fract(sin(n) * 43758.5453);\r\n                }\r\n        \r\n                float noise(vec3 x) {\r\n                    vec3 p = floor(x);\r\n                    vec3 f = fract(x);\r\n                    f = f * f * (3.0 - 2.0 * f);\r\n                    float n = p.x + p.y * 57.0 + 113.0 * p.z;\r\n                    return mix(mix(mix(iqhash(n), iqhash(n + 1.0), f.x),\r\n                               mix(iqhash(n + 57.0), iqhash(n + 58.0), f.x), f.y),\r\n                               mix(mix(iqhash(n + 113.0), iqhash(n + 114.0), f.x),\r\n                               mix(iqhash(n + 170.0), iqhash(n + 171.0), f.x), f.y), f.z);\r\n                }\r\n        \r\n                float xmb_noise2(vec3 x) {\r\n                    return cos(x.z * 4.0) * cos(x.z + time / 10.0 + x.x);\r\n                }\r\n        \r\n                void main() {\r\n                    vec4 pos = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n                    vec3 v = vec3(pos.x, 0.0, pos.y);\r\n                    vec3 v2 = v;\r\n                    vec3 v3 = v;\r\n        \r\n                    v.y = xmb_noise2(v2) / 8.0;\r\n        \r\n                    v3.x -= time / 5.0;\r\n                    v3.x /= 4.0;\r\n        \r\n                    v3.z -= time / 10.0;\r\n                    v3.y -= time / 100.0;\r\n        \r\n                    v.z -= noise(v3 * 7.0) / 15.0;\r\n                    v.y -= noise(v3 * 7.0) / 15.0 + cos(v.x * 2.0 - time / 2.0) / 5.0 - 0.3;\r\n        \r\n                    vEC = v;\r\n                    gl_Position = vec4(v, 1.0);\r\n                }\r\n            `,\r\n            fragmentShader: `\r\n                uniform float time;\r\n                varying vec3 vEC;\r\n        \r\n                void main()\r\n                {\r\n                   const vec3 up = vec3(0.0, 0.0, 1.0);\r\n                   vec3 x = dFdx(vEC);\r\n                   vec3 y = dFdy(vEC);\r\n                   vec3 normal = normalize(cross(x, y));\r\n                   float c = 1.0 - dot(normal, up);\r\n                   c = (1.0 - cos(c * c)) / 3.0;\r\n                   gl_FragColor = vec4(1.0, 1.0, 1.0, c * 1.5);\r\n                }\r\n            `,\r\n            extensions: {\r\n                derivatives: true\r\n            } as any,\r\n            ...params\r\n        };\r\n\r\n        super(defaultParams);\r\n\r\n        // 定义响应式属性\r\n        Object.defineProperties(this, {\r\n            time: {\r\n                get: () => this._time,\r\n                set: (value: number) => {\r\n                    this._time = value;\r\n                    if (this.uniforms.time) {\r\n                        this.uniforms.time.value = value;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 设置时间参数\r\n     * @param time 时间值\r\n     */\r\n    set time(time: number) {\r\n        this._time = time;\r\n        if (this.uniforms.time) {\r\n            this.uniforms.time.value = time;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取时间参数\r\n     */\r\n    get time(): number {\r\n        return this._time;\r\n    }\r\n}","import { THREE } from \"../core/global\";\r\nimport type {Vector3} from '../core/Type.ts';\r\n\r\n/**\r\n * 线性插值\r\n * @param start 起始值\r\n * @param end 结束值\r\n * @param factor 插值因子\r\n * @returns 插值结果\r\n */\r\nexport function lerp(start: number, end: number, factor: number): number {\r\n    return start + (end - start) * factor;\r\n}\r\n\r\n/**\r\n * 向量线性插值\r\n * @param start 起始向量\r\n * @param end 结束向量\r\n * @param factor 插值因子\r\n * @returns 插值后的向量\r\n */\r\nexport function lerpVector(start: Vector3, end: Vector3, factor: number): Vector3 {\r\n    return {\r\n        x: lerp(start.x, end.x, factor),\r\n        y: lerp(start.y, end.y, factor),\r\n        z: lerp(start.z, end.z, factor)\r\n    };\r\n}\r\n\r\n/**\r\n * 限制数值范围\r\n * @param value 输入值\r\n * @param min 最小值\r\n * @param max 最大值\r\n * @returns 限制后的值\r\n */\r\nexport function clamp(value: number, min: number, max: number): number {\r\n    return Math.min(Math.max(value, min), max);\r\n}\r\n\r\n/**\r\n * 将角度转换为弧度\r\n * @param degrees 角度\r\n * @returns 弧度\r\n */\r\nexport function degToRad(degrees: number): number {\r\n    return degrees * (Math.PI / 180);\r\n}\r\n\r\n/**\r\n * 将弧度转换为角度\r\n * @param radians 弧度\r\n * @returns 角度\r\n */\r\nexport function radToDeg(radians: number): number {\r\n    return radians * (180 / Math.PI);\r\n}\r\n\r\n/**\r\n * 生成随机数范围\r\n * @param min 最小值\r\n * @param max 最大值\r\n * @returns 随机数\r\n */\r\nexport function randomRange(min: number, max: number): number {\r\n    return Math.random() * (max - min) + min;\r\n}\r\n\r\n/**\r\n * 生成随机整数范围\r\n * @param min 最小值\r\n * @param max 最大值\r\n * @returns 随机整数\r\n */\r\nexport function randomIntRange(min: number, max: number): number {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\n\r\n/**\r\n * 创建渐变alpha贴图\r\n * @param direction 渐变方向，默认为从下到上\r\n * @returns THREE.CanvasTexture\r\n */\r\nexport function createGradientAlphaMap(direction: 'bottomToTop' | 'topToBottom' | 'leftToRight' | 'rightToLeft' = 'bottomToTop'): THREE.CanvasTexture {\r\n    const canvas = document.createElement('canvas');\r\n    canvas.width = 256;\r\n    canvas.height = 256;\r\n    const ctx = canvas.getContext('2d')!;\r\n    \r\n    // 设置高质量绘制参数，避免点状瑕疵\r\n    ctx.imageSmoothingEnabled = true;\r\n    ctx.imageSmoothingQuality = 'high';\r\n\r\n    let gradient;\r\n    switch (direction) {\r\n        case 'bottomToTop':\r\n            gradient = ctx.createLinearGradient(0, canvas.height, 0, 0);\r\n            break;\r\n        case 'topToBottom':\r\n            gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);\r\n            break;\r\n        case 'leftToRight':\r\n            gradient = ctx.createLinearGradient(0, 0, canvas.width, 0);\r\n            break;\r\n        case 'rightToLeft':\r\n            gradient = ctx.createLinearGradient(canvas.width, 0, 0, 0);\r\n            break;\r\n        default:\r\n            gradient = ctx.createLinearGradient(0, canvas.height, 0, 0);\r\n    }\r\n\r\n    // 创建从透明到不透明的渐变，使用更精确的颜色值\r\n    gradient.addColorStop(0, 'rgba(0, 0, 0, 0)');      // 完全透明\r\n    gradient.addColorStop(0.05, 'rgba(0, 0, 0, 0.05)'); // 很轻微的透明\r\n    gradient.addColorStop(0.5, 'rgba(255, 255, 255, 0.5)'); // 半透明\r\n    gradient.addColorStop(0.95, 'rgba(255, 255, 255, 0.95)'); // 几乎不透明\r\n    gradient.addColorStop(1, 'rgba(255, 255, 255, 1)'); // 完全不透明\r\n\r\n    ctx.fillStyle = gradient;\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n    const alphaMap = new THREE.CanvasTexture(canvas);\r\n    alphaMap.wrapS = THREE.RepeatWrapping;\r\n    alphaMap.wrapT = THREE.RepeatWrapping;\r\n    alphaMap.magFilter = THREE.LinearFilter;  // 使用线性过滤提高质量\r\n    alphaMap.minFilter = THREE.LinearFilter;  // 使用线性过滤提高质量\r\n\r\n    return alphaMap;\r\n}\r\n\r\n\r\n/**\r\n * 加载纹理的辅助函数\r\n * @param url 纹理文件路径\r\n * @returns Promise<THREE.Texture>\r\n */\r\nexport function loadTexture(url: string): Promise<THREE.Texture> {\r\n    return new Promise((resolve, reject) => {\r\n        const loader = new THREE.TextureLoader();\r\n        loader.load(\r\n            url,\r\n            (texture) => {\r\n                texture.wrapS = THREE.RepeatWrapping;\r\n                texture.wrapT = THREE.RepeatWrapping;\r\n                texture.anisotropy = 16;\r\n                resolve(texture);\r\n            },\r\n            undefined,\r\n            reject\r\n        );\r\n    });\r\n}\r\n","import { ScriptBase } from \"../../core/ScriptBase.ts\";\r\nimport { THREE } from \"../../core/global.ts\";\r\n\r\n/**\r\n * 平行光配置接口\r\n * 定义创建和控制平行光所需的所有参数\r\n */\r\nexport interface DirectionalLightConfig {\r\n    /** 平行光唯一标识符 */\r\n    id: string;\r\n    /** 平行光名称 */\r\n    name: string;\r\n    /** 平行光位置坐标 */\r\n    position: {\r\n        x: number;\r\n        y: number;\r\n        z: number;\r\n    };\r\n    /** 平行光朝向目标 */\r\n    target: {\r\n        x: number;\r\n        y: number;\r\n        z: number;\r\n    };\r\n    /** 平行光颜色（十六进制字符串格式，如 \"#ffffff\"） */\r\n    color: string;\r\n    /** 平行光强度 */\r\n    intensity: number;\r\n}\r\n\r\n/**\r\n * 平行光脚本类\r\n * 用于在场景中添加和控制平行光（类似太阳光）\r\n */\r\nexport class DirectionalLightScript extends ScriptBase {\r\n    /** 平行光对象映射 */\r\n    private directionalLights: Map<string, THREE.DirectionalLight> = new Map();\r\n\r\n    /** 平行光配置映射 */\r\n    private configs: Map<string, DirectionalLightConfig> = new Map();\r\n\r\n    /** 平行光是否启用映射 */\r\n    private enabledMap: Map<string, boolean> = new Map();\r\n\r\n    /** 当前选中的光源ID */\r\n    private selectedLightId: string | null = null;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param configs 初始平行光配置数组\r\n     */\r\n    constructor(configs?: DirectionalLightConfig | DirectionalLightConfig[]) {\r\n        super();\r\n        this.name = \"DirectionalLightScript\";\r\n\r\n        if (configs) {\r\n            if (Array.isArray(configs)) {\r\n                configs.forEach(config => {\r\n                    this.configs.set(config.id, config);\r\n                    this.enabledMap.set(config.id, true);\r\n                });\r\n            } else {\r\n                this.configs.set(configs.id, configs);\r\n                this.enabledMap.set(configs.id, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 初始化平行光\r\n     * 在脚本添加到场景时调用\r\n     */\r\n    public start(): void {\r\n        // 为所有配置创建平行光\r\n        for (const [id, config] of this.configs) {\r\n            this.createLight(id, config);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建单个平行光\r\n     * @param id 光源ID\r\n     * @param config 光源配置\r\n     */\r\n    private createLight(id: string, config: DirectionalLightConfig): void {\r\n        // 创建平行光\r\n        const color = parseInt(config.color.replace('#', '0x'));\r\n        const directionalLight = new THREE.DirectionalLight(\r\n            color,\r\n            config.intensity\r\n        );\r\n\r\n        // 设置位置\r\n        directionalLight.position.set(\r\n            config.position.x,\r\n            config.position.y,\r\n            config.position.z\r\n        );\r\n\r\n        // 创建并设置目标\r\n        const target = new THREE.Object3D();\r\n        target.position.set(\r\n            config.target.x,\r\n            config.target.y,\r\n            config.target.z\r\n        );\r\n        \r\n        if (this.scene) {\r\n            this.scene.add(target);\r\n        }\r\n        \r\n        directionalLight.target = target;\r\n\r\n        // 启用阴影\r\n        directionalLight.castShadow = true;\r\n        \r\n        // 设置阴影参数\r\n        directionalLight.shadow.mapSize.width = 2048;\r\n        directionalLight.shadow.mapSize.height = 2048;\r\n        directionalLight.shadow.camera.near = 0.5;\r\n        directionalLight.shadow.camera.far = 500;\r\n        directionalLight.shadow.camera.left = -50;\r\n        directionalLight.shadow.camera.right = 50;\r\n        directionalLight.shadow.camera.top = 50;\r\n        directionalLight.shadow.camera.bottom = -50;\r\n\r\n        // 设置用户数据\r\n        directionalLight.userData = {\r\n            id: config.id,\r\n            name: config.name\r\n        };\r\n\r\n        // 添加到场景\r\n        if (this.scene && this.isEnabled(id)) {\r\n            this.scene.add(directionalLight);\r\n        }\r\n\r\n        // 存储引用\r\n        this.directionalLights.set(id, directionalLight);\r\n    }\r\n\r\n    /**\r\n     * 添加新的平行光\r\n     * @param config 平行光配置\r\n     */\r\n    public addLight(config: DirectionalLightConfig): void {\r\n        // 检查ID是否已存在\r\n        if (this.configs.has(config.id)) {\r\n            console.warn(`Light with ID ${config.id} already exists`);\r\n            return;\r\n        }\r\n\r\n        // 存储配置\r\n        this.configs.set(config.id, config);\r\n        this.enabledMap.set(config.id, true);\r\n\r\n        // 创建光源\r\n        this.createLight(config.id, config);\r\n    }\r\n\r\n    /**\r\n     * 移除平行光\r\n     * @param id 平行光ID\r\n     */\r\n    public removeLight(id: string): void {\r\n        // 检查光源是否存在\r\n        if (!this.configs.has(id)) {\r\n            console.warn(`Light with ID ${id} does not exist`);\r\n            return;\r\n        }\r\n\r\n        // 获取光源\r\n        const light = this.directionalLights.get(id);\r\n\r\n        // 从场景中移除\r\n        if (light && light.parent) {\r\n            // 同时移除目标对象\r\n            if (light.target && light.target.parent) {\r\n                light.target.parent.remove(light.target);\r\n            }\r\n            light.parent.remove(light);\r\n        }\r\n\r\n        // 从映射中删除\r\n        this.directionalLights.delete(id);\r\n        this.configs.delete(id);\r\n        this.enabledMap.delete(id);\r\n\r\n        // 如果删除的是选中的光源，则取消选择\r\n        if (this.selectedLightId === id) {\r\n            this.selectedLightId = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新平行光配置\r\n     * @param id 平行光ID\r\n     * @param config 新的平行光配置\r\n     */\r\n    public updateConfig(id: string, config: Partial<DirectionalLightConfig>): void {\r\n        // 检查光源是否存在\r\n        if (!this.configs.has(id)) {\r\n            console.warn(`Light with ID ${id} does not exist`);\r\n            return;\r\n        }\r\n\r\n        // 更新配置\r\n        const oldConfig = this.configs.get(id)!;\r\n        const newConfig = { ...oldConfig, ...config };\r\n        this.configs.set(id, newConfig);\r\n\r\n        // 获取光源\r\n        const light = this.directionalLights.get(id);\r\n        if (light) {\r\n            // 更新颜色\r\n            if (config.color !== undefined) {\r\n                const color = parseInt(config.color.replace('#', '0x'));\r\n                light.color.set(color as any);\r\n            }\r\n\r\n            // 更新强度\r\n            if (config.intensity !== undefined) {\r\n                light.intensity = config.intensity;\r\n            }\r\n\r\n            // 更新位置\r\n            if (config.position !== undefined) {\r\n                light.position.set(\r\n                    config.position.x ?? light.position.x,\r\n                    config.position.y ?? light.position.y,\r\n                    config.position.z ?? light.position.z\r\n                );\r\n            }\r\n\r\n            // 更新目标位置\r\n            if (config.target !== undefined && light.target) {\r\n                light.target.position.set(\r\n                    config.target.x ?? light.target.position.x,\r\n                    config.target.y ?? light.target.position.y,\r\n                    config.target.z ?? light.target.position.z\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 启用平行光\r\n     * @param id 平行光ID\r\n     */\r\n    public enable(id: string): void {\r\n        // 检查光源是否存在\r\n        if (!this.configs.has(id)) {\r\n            console.warn(`Light with ID ${id} does not exist`);\r\n            return;\r\n        }\r\n\r\n        this.enabledMap.set(id, true);\r\n\r\n        const light = this.directionalLights.get(id);\r\n        if (light && this.scene && !light.parent) {\r\n            this.scene.add(light);\r\n            // 同时添加目标对象\r\n            if (light.target && !light.target.parent && this.scene) {\r\n                this.scene.add(light.target);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 禁用平行光\r\n     * @param id 平行光ID\r\n     */\r\n    public disable(id: string): void {\r\n        // 检查光源是否存在\r\n        if (!this.configs.has(id)) {\r\n            console.warn(`Light with ID ${id} does not exist`);\r\n            return;\r\n        }\r\n\r\n        this.enabledMap.set(id, false);\r\n\r\n        const light = this.directionalLights.get(id);\r\n        if (light && light.parent) {\r\n            light.parent.remove(light);\r\n            // 同时移除目标对象\r\n            if (light.target && light.target.parent) {\r\n                light.target.parent.remove(light.target);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取平行光是否启用\r\n     * @param id 平行光ID\r\n     * @returns 平行光启用状态\r\n     */\r\n    public isEnabled(id: string): boolean {\r\n        return this.enabledMap.get(id) ?? false;\r\n    }\r\n\r\n    /**\r\n     * 获取所有平行光配置\r\n     * @returns 所有平行光配置映射\r\n     */\r\n    public getAllConfigs(): Map<string, DirectionalLightConfig> {\r\n        return new Map(this.configs);\r\n    }\r\n\r\n    /**\r\n     * 获取指定平行光配置\r\n     * @param id 平行光ID\r\n     * @returns 平行光配置或undefined\r\n     */\r\n    public getConfig(id: string): DirectionalLightConfig | undefined {\r\n        return this.configs.get(id);\r\n    }\r\n\r\n    /**\r\n     * 获取所有平行光对象\r\n     * @returns 所有平行光对象映射\r\n     */\r\n    public getAllLights(): Map<string, THREE.DirectionalLight> {\r\n        return new Map(this.directionalLights);\r\n    }\r\n\r\n    /**\r\n     * 获取指定平行光对象\r\n     * @param id 平行光ID\r\n     * @returns THREE.DirectionalLight对象或undefined\r\n     */\r\n    public getLight(id: string): THREE.DirectionalLight | undefined {\r\n        return this.directionalLights.get(id);\r\n    }\r\n\r\n    /**\r\n     * 选择平行光\r\n     * @param id 平行光ID\r\n     */\r\n    public selectLight(id: string): void {\r\n        // 检查光源是否存在\r\n        if (!this.configs.has(id)) {\r\n            console.warn(`Light with ID ${id} does not exist`);\r\n            return;\r\n        }\r\n\r\n        this.selectedLightId = id;\r\n    }\r\n\r\n    /**\r\n     * 取消选择平行光\r\n     */\r\n    public deselectLight(): void {\r\n        this.selectedLightId = null;\r\n    }\r\n\r\n    /**\r\n     * 获取当前选中的平行光ID\r\n     * @returns 当前选中的平行光ID或null\r\n     */\r\n    public getSelectedLightId(): string | null {\r\n        return this.selectedLightId;\r\n    }\r\n\r\n    /**\r\n     * 获取当前选中的平行光配置\r\n     * @returns 当前选中的平行光配置或undefined\r\n     */\r\n    public getSelectedLightConfig(): DirectionalLightConfig | undefined {\r\n        if (this.selectedLightId) {\r\n            return this.configs.get(this.selectedLightId);\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * 获取当前选中的平行光对象\r\n     * @returns 当前选中的平行光对象或undefined\r\n     */\r\n    public getSelectedLight(): THREE.DirectionalLight | undefined {\r\n        if (this.selectedLightId) {\r\n            return this.directionalLights.get(this.selectedLightId);\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * 切换平行光的启用状态\r\n     * @param id 平行光ID\r\n     */\r\n    public toggleLight(id: string): void {\r\n        if (this.isEnabled(id)) {\r\n            this.disable(id);\r\n        } else {\r\n            this.enable(id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 在对象被销毁时调用\r\n     */\r\n    public destroy(): void {\r\n        // 从场景中移除所有光源\r\n        Array.from(this.directionalLights.values()).forEach(light => {\r\n            if (light.parent) {\r\n                // 同时移除目标对象\r\n                if (light.target && light.target.parent) {\r\n                    light.target.parent.remove(light.target);\r\n                }\r\n                light.parent.remove(light);\r\n            }\r\n        });\r\n\r\n        // 清空所有映射\r\n        this.directionalLights.clear();\r\n        this.configs.clear();\r\n        this.enabledMap.clear();\r\n        this.selectedLightId = null;\r\n    }\r\n}","import { ScriptBase } from \"../../core/ScriptBase.ts\";\r\nimport { THREE } from \"../../core/global.ts\";\r\n\r\n/**\r\n * 点光源配置接口\r\n * 定义创建和控制点光源所需的所有参数\r\n */\r\nexport interface PointLightConfig {\r\n    /** 点光源唯一标识符 */\r\n    id: string;\r\n    /** 点光源名称 */\r\n    name: string;\r\n    /** 点光源位置坐标 */\r\n    position: {\r\n        x: number;\r\n        y: number;\r\n        z: number;\r\n    };\r\n    /** 点光源颜色（十六进制字符串格式，如 \"#ff0000\"） */\r\n    color: string;\r\n    /** 点光源强度 */\r\n    intensity: number;\r\n    /** 光源影响距离 */\r\n    distance: number;\r\n    /** 光源衰减系数 */\r\n    decay: number;\r\n}\r\n\r\n/**\r\n * 点光源脚本类\r\n * 用于在场景中添加和控制点光源\r\n */\r\nexport class PointLightScript extends ScriptBase {\r\n    /** 点光源对象映射 */\r\n    private pointLights: Map<string, THREE.PointLight> = new Map();\r\n\r\n    /** 点光源配置映射 */\r\n    private configs: Map<string, PointLightConfig> = new Map();\r\n\r\n    /** 点光源是否启用映射 */\r\n    private enabledMap: Map<string, boolean> = new Map();\r\n\r\n    /** 当前选中的光源ID */\r\n    private selectedLightId: string | null = null;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param configs 初始点光源配置数组\r\n     */\r\n    constructor(configs?: PointLightConfig | PointLightConfig[]) {\r\n        super();\r\n\r\n        if (configs) {\r\n            if (Array.isArray(configs)) {\r\n                configs.forEach(config => {\r\n                    this.configs.set(config.id, config);\r\n                    this.enabledMap.set(config.id, true);\r\n                });\r\n            } else {\r\n                this.configs.set(configs.id, configs);\r\n                this.enabledMap.set(configs.id, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 初始化点光源\r\n     * 在脚本添加到场景时调用\r\n     */\r\n    public start(): void {\r\n        // 为所有配置创建点光源\r\n        for (const [id, config] of this.configs) {\r\n            this.createLight(id, config);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建单个点光源\r\n     * @param id 光源ID\r\n     * @param config 光源配置\r\n     */\r\n    private createLight(id: string, config: PointLightConfig): void {\r\n        // 创建点光源\r\n        const color = parseInt(config.color.replace('#', '0x'));\r\n        const pointLight = new THREE.PointLight(\r\n            color,\r\n            config.intensity,\r\n            config.distance,\r\n            config.decay\r\n        );\r\n\r\n        // 设置位置\r\n        pointLight.position.set(\r\n            config.position.x,\r\n            config.position.y,\r\n            config.position.z\r\n        );\r\n\r\n        // 设置用户数据\r\n        pointLight.userData = {\r\n            id: config.id,\r\n            name: config.name\r\n        };\r\n\r\n        // 添加到场景\r\n        if (this.scene && this.isEnabled(id)) {\r\n            this.scene.add(pointLight);\r\n        }\r\n\r\n        // 存储引用\r\n        this.pointLights.set(id, pointLight);\r\n    }\r\n\r\n    /**\r\n     * 添加新的点光源\r\n     * @param config 点光源配置\r\n     */\r\n    public addLight(config: PointLightConfig): void {\r\n        // 检查ID是否已存在\r\n        if (this.configs.has(config.id)) {\r\n            console.warn(`Light with ID ${config.id} already exists`);\r\n            return;\r\n        }\r\n\r\n        // 存储配置\r\n        this.configs.set(config.id, config);\r\n        this.enabledMap.set(config.id, true);\r\n\r\n        // 创建光源\r\n        this.createLight(config.id, config);\r\n    }\r\n\r\n    /**\r\n     * 移除点光源\r\n     * @param id 点光源ID\r\n     */\r\n    public removeLight(id: string): void {\r\n        // 检查光源是否存在\r\n        if (!this.configs.has(id)) {\r\n            console.warn(`Light with ID ${id} does not exist`);\r\n            return;\r\n        }\r\n\r\n        // 获取光源\r\n        const light = this.pointLights.get(id);\r\n\r\n        // 从场景中移除\r\n        if (light && light.parent) {\r\n            light.parent.remove(light);\r\n        }\r\n\r\n        // 从映射中删除\r\n        this.pointLights.delete(id);\r\n        this.configs.delete(id);\r\n        this.enabledMap.delete(id);\r\n\r\n        // 如果删除的是选中的光源，则取消选择\r\n        if (this.selectedLightId === id) {\r\n            this.selectedLightId = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新点光源配置\r\n     * @param id 点光源ID\r\n     * @param config 新的点光源配置\r\n     */\r\n    public updateConfig(id: string, config: Partial<PointLightConfig>): void {\r\n        // 检查光源是否存在\r\n        if (!this.configs.has(id)) {\r\n            console.warn(`Light with ID ${id} does not exist`);\r\n            return;\r\n        }\r\n\r\n        // 更新配置\r\n        const oldConfig = this.configs.get(id)!;\r\n        const newConfig = { ...oldConfig, ...config };\r\n        this.configs.set(id, newConfig);\r\n\r\n        // 获取光源\r\n        const light = this.pointLights.get(id);\r\n        if (light) {\r\n            // 更新颜色\r\n            if (config.color !== undefined) {\r\n                const color = parseInt(config.color.replace('#', '0x'));\r\n                light.color.set(color as any);\r\n            }\r\n\r\n            // 更新强度\r\n            if (config.intensity !== undefined) {\r\n                light.intensity = config.intensity;\r\n            }\r\n\r\n            // 更新距离\r\n            if (config.distance !== undefined) {\r\n                light.distance = config.distance;\r\n            }\r\n\r\n            // 更新衰减\r\n            if (config.decay !== undefined) {\r\n                light.decay = config.decay;\r\n            }\r\n\r\n            // 更新位置\r\n            if (config.position !== undefined) {\r\n                light.position.set(\r\n                    config.position.x ?? light.position.x,\r\n                    config.position.y ?? light.position.y,\r\n                    config.position.z ?? light.position.z\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 启用点光源\r\n     * @param id 点光源ID\r\n     */\r\n    public enable(id: string): void {\r\n        // 检查光源是否存在\r\n        if (!this.configs.has(id)) {\r\n            console.warn(`Light with ID ${id} does not exist`);\r\n            return;\r\n        }\r\n\r\n        this.enabledMap.set(id, true);\r\n\r\n        const light = this.pointLights.get(id);\r\n        if (light && this.scene && !light.parent) {\r\n            this.scene.add(light);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 禁用点光源\r\n     * @param id 点光源ID\r\n     */\r\n    public disable(id: string): void {\r\n        // 检查光源是否存在\r\n        if (!this.configs.has(id)) {\r\n            console.warn(`Light with ID ${id} does not exist`);\r\n            return;\r\n        }\r\n\r\n        this.enabledMap.set(id, false);\r\n\r\n        const light = this.pointLights.get(id);\r\n        if (light && light.parent) {\r\n            light.parent.remove(light);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取点光源是否启用\r\n     * @param id 点光源ID\r\n     * @returns 点光源启用状态\r\n     */\r\n    public isEnabled(id: string): boolean {\r\n        return this.enabledMap.get(id) ?? false;\r\n    }\r\n\r\n    /**\r\n     * 获取所有点光源配置\r\n     * @returns 所有点光源配置映射\r\n     */\r\n    public getAllConfigs(): Map<string, PointLightConfig> {\r\n        return new Map(this.configs);\r\n    }\r\n\r\n    /**\r\n     * 获取指定点光源配置\r\n     * @param id 点光源ID\r\n     * @returns 点光源配置或undefined\r\n     */\r\n    public getConfig(id: string): PointLightConfig | undefined {\r\n        return this.configs.get(id);\r\n    }\r\n\r\n    /**\r\n     * 获取所有点光源对象\r\n     * @returns 所有点光源对象映射\r\n     */\r\n    public getAllLights(): Map<string, THREE.PointLight> {\r\n        return new Map(this.pointLights);\r\n    }\r\n\r\n    /**\r\n     * 获取指定点光源对象\r\n     * @param id 点光源ID\r\n     * @returns THREE.PointLight对象或undefined\r\n     */\r\n    public getLight(id: string): THREE.PointLight | undefined {\r\n        return this.pointLights.get(id);\r\n    }\r\n\r\n    /**\r\n     * 选择点光源\r\n     * @param id 点光源ID\r\n     */\r\n    public selectLight(id: string): void {\r\n        // 检查光源是否存在\r\n        if (!this.configs.has(id)) {\r\n            console.warn(`Light with ID ${id} does not exist`);\r\n            return;\r\n        }\r\n\r\n        this.selectedLightId = id;\r\n    }\r\n\r\n    /**\r\n     * 取消选择点光源\r\n     */\r\n    public deselectLight(): void {\r\n        this.selectedLightId = null;\r\n    }\r\n\r\n    /**\r\n     * 获取当前选中的点光源ID\r\n     * @returns 当前选中的点光源ID或null\r\n     */\r\n    public getSelectedLightId(): string | null {\r\n        return this.selectedLightId;\r\n    }\r\n\r\n    /**\r\n     * 获取当前选中的点光源配置\r\n     * @returns 当前选中的点光源配置或undefined\r\n     */\r\n    public getSelectedLightConfig(): PointLightConfig | undefined {\r\n        if (this.selectedLightId) {\r\n            return this.configs.get(this.selectedLightId);\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * 获取当前选中的点光源对象\r\n     * @returns 当前选中的点光源对象或undefined\r\n     */\r\n    public getSelectedLight(): THREE.PointLight | undefined {\r\n        if (this.selectedLightId) {\r\n            return this.pointLights.get(this.selectedLightId);\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * 切换点光源的启用状态\r\n     * @param id 点光源ID\r\n     */\r\n    public toggleLight(id: string): void {\r\n        if (this.isEnabled(id)) {\r\n            this.disable(id);\r\n        } else {\r\n            this.enable(id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 在对象被销毁时调用\r\n     */\r\n    public destroy(): void {\r\n        // 从场景中移除所有光源\r\n        Array.from(this.pointLights.values()).forEach(light => {\r\n            if (light.parent) {\r\n                light.parent.remove(light);\r\n            }\r\n        });\r\n\r\n        // 清空所有映射\r\n        this.pointLights.clear();\r\n        this.configs.clear();\r\n        this.enabledMap.clear();\r\n        this.selectedLightId = null;\r\n    }\r\n}\r\n"],"names":["ScriptBase","__publicField","object","renderer","script","name","x","y","z","pass","beforeOutput","PostProcessingEffectComposer","EffectComposer","samples","RenderPass","OutputPass","error","devicePixelRatio","_a","passes","outputPassIndex","index","width","height","EventEmitter","event","callback","eventKey","callbacks","data","onceCallback","ObjectPool","factory","reset","maxSize","obj","throttle","func","delay","lastCall","args","now","debounce","timeoutId","FrameRateLimiter","fps","MemoryMonitor","usage","recent","firstHalf","secondHalf","firstAvg","a","b","diff","trend","currentUsage","PerformanceProfiler","label","startTime","duration","measurements","count","total","average","min","max","results","result","BatchDOMUpdater","id","updateFn","CacheManager","cleanupIntervalMs","key","value","ttl","oldestKey","item","DevicePerformanceDetector","recommendations","_RenderPerformanceOptimizer","RenderPerformanceOptimizer","FrameRateMonitor","onFpsUpdate","timestamp","elapsed","sum","DetailedPerformanceProfiler","GeometryOptimizer","geometries","geometry","ratio","TextureOptimizer","texture","newWidth","newHeight","RenderBatcher","batchSize","batch","objects","PerformanceAnalyzerScript","options","deltaTime","currentTime","countObject","type","child","scriptName","executionTime","stats","report","info","FPSDiagnosticTool","perfData","glInfo","scene","totalObjects","meshCount","lightCount","cameraCount","countObjects","s","memory","suggestions","os","userAgent","isIphone","isSafari","MouseInteractionScript","THREE","vec","arr","mask","objectName","types","objectType","mat","intersects","intersect","canvas","rect","mouse","touch","mouseEvent","interactableIntersects","selectedObject","hoveredObject","deselectedObject","deselectedObjects","mode","enabled","newConfig","oldRaycastInterval","Aether3d","config","fpsEvent","dropEvent","dpr","time","frameEvent","fixedTimeStep","scriptsToUpdate","startMethod","updateMethod","method","arg","scriptMethod","i","modelName","_b","_d","_c","_f","_e","createCamera","aspect","camera","SceneManager","sceneData","globalRenderer","isGlobalRendererReady","createScene","render","aspectRatio","createPostprocessing","setupContextEvents","addScript","sceneName","scriptOrObject","removeScript","scripts","scriptIndex","MirrorReflectionScript","Reflector","material","HorizontalBlurShader","VerticalBlurShader","blurPlaneGeometry","reflectorTexture","needsRecreate","strength","radius","opacity","color","OrbitControlsScript","OrbitControls","controls","targetPosition","targetCenter","startPosition","startTarget","TWEEN","easing","box","mesh","boundingBox","presetName","preset","positionToUse","focusOptions","targetPositionVec","finalOptions","center","size","cameraOffset","maxDim","fov","autoDistance","targetDistance","position","target","SceneLightingScript","loader","filenames","filename","targetObject","CSS2DObject","content","show","clickable","BloomEffectScript","threshold","UnrealBloomPass","_RectAreaLightScript","RectAreaLightUniformsLib","RectAreaLightHelper","iconElement","textElement","beforeElement","afterElement","RectAreaLightScript","toTrianglesDrawMode","drawMode","TrianglesDrawMode","TriangleFanDrawMode","TriangleStripDrawMode","indices","numberOfTriangles","newIndices","newGeometry","GLTFLoader","Loader","manager","parser","GLTFMaterialsClearcoatExtension","GLTFMaterialsDispersionExtension","GLTFTextureBasisUExtension","GLTFTextureWebPExtension","GLTFTextureAVIFExtension","GLTFMaterialsSheenExtension","GLTFMaterialsTransmissionExtension","GLTFMaterialsVolumeExtension","GLTFMaterialsIorExtension","GLTFMaterialsEmissiveStrengthExtension","GLTFMaterialsSpecularExtension","GLTFMaterialsIridescenceExtension","GLTFMaterialsAnisotropyExtension","GLTFMaterialsBumpExtension","GLTFLightsExtension","GLTFMeshoptCompression","GLTFMeshGpuInstancing","url","onLoad","onProgress","onError","scope","resourcePath","relativeUrl","LoaderUtils","_onError","e","FileLoader","gltf","dracoLoader","ktx2Loader","meshoptDecoder","path","json","extensions","plugins","textDecoder","BINARY_EXTENSION_HEADER_MAGIC","EXTENSIONS","GLTFBinaryExtension","GLTFParser","plugin","extensionName","extensionsRequired","GLTFMaterialsUnlitExtension","GLTFDracoMeshCompressionExtension","GLTFTextureTransformExtension","GLTFMeshQuantizationExtension","resolve","reject","GLTFRegistry","nodeDefs","nodeIndex","nodeLength","nodeDef","lightIndex","cacheKey","dependency","lightDef","lightNode","Color","LinearSRGBColorSpace","range","DirectionalLight","PointLight","SpotLight","assignExtrasToUserData","self","light","MeshBasicMaterial","materialParams","materialDef","pending","metallicRoughness","array","SRGBColorSpace","materialIndex","emissiveStrength","MeshPhysicalMaterial","extension","scale","Vector2","colorFactor","colorArray","textureIndex","textureDef","source","handler","bufferView","extensionDef","buffer","decoder","res","byteOffset","byteLength","stride","meshDef","primitive","WEBGL_CONSTANTS","attributesDef","attributes","accessor","nodeObject","meshes","instancedMeshes","m","Matrix4","p","Vector3","q","Quaternion","instancedMesh","InstancedMesh","attributeName","attr","InstancedBufferAttribute","Object3D","BINARY_EXTENSION_HEADER_LENGTH","BINARY_EXTENSION_CHUNK_TYPES","headerView","chunkContentsLength","chunkView","chunkIndex","chunkLength","chunkType","contentArray","bufferViewIndex","gltfAttributeMap","threeAttributeMap","attributeNormalizedMap","attributeTypeMap","threeAttributeName","ATTRIBUTES","accessorDef","componentType","WEBGL_COMPONENT_TYPES","attribute","normalized","transform","GLTFCubicSplineInterpolant","Interpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","values","valueSize","offset","i1","t0","t1","stride2","stride3","td","pp","ppp","offset1","offset0","s2","s3","s0","s1","p0","m0","p1","m1","_quaternion","GLTFCubicSplineQuaternionInterpolant","WEBGL_FILTERS","NearestFilter","LinearFilter","NearestMipmapNearestFilter","LinearMipmapNearestFilter","NearestMipmapLinearFilter","LinearMipmapLinearFilter","WEBGL_WRAPPINGS","ClampToEdgeWrapping","MirroredRepeatWrapping","RepeatWrapping","WEBGL_TYPE_SIZES","PATH_PROPERTIES","INTERPOLATION","InterpolateLinear","InterpolateDiscrete","ALPHA_MODES","createDefaultMaterial","cache","MeshStandardMaterial","FrontSide","addUnknownExtensionsToUserData","knownExtensions","objectDef","gltfDef","addMorphTargets","targets","hasMorphPosition","hasMorphNormal","hasMorphColor","il","pendingPositionAccessors","pendingNormalAccessors","pendingColorAccessors","pendingAccessor","accessors","morphPositions","morphNormals","morphColors","updateMorphTargets","targetNames","createPrimitiveKey","primitiveDef","geometryKey","dracoExtension","createAttributesKey","attributesKey","keys","getNormalizedComponentScale","constructor","getImageURIMimeType","uri","_identityMatrix","safariVersion","isFirefox","firefoxVersion","safariMatch","TextureLoader","ImageBitmapLoader","ext","dependencies","skinDefs","meshDefs","skinIndex","skinLength","joints","ref","updateMappings","original","clone","mappings","defs","def","bufferIndex","bufferDef","bufferViewDef","accessorIndex","itemSize","TypedArray","BufferAttribute","pendingBufferViews","bufferViews","elementBytes","itemBytes","byteStride","bufferAttribute","ibSlice","ibCacheKey","ib","InterleavedBuffer","InterleavedBufferAttribute","itemSizeIndices","TypedArrayIndices","byteOffsetIndices","byteOffsetValues","sparseIndices","sparseValues","sourceIndex","sourceDef","promise","sampler","URL","sourceURI","isObjectURL","blob","imageBitmap","Texture","mapName","mapDef","colorSpace","gltfReference","useDerivativeTangents","useVertexColors","useFlatShading","pointsMaterial","PointsMaterial","Material","lineMaterial","LineBasicMaterial","cachedMaterial","materialType","materialExtensions","kmuExtension","DoubleSide","alphaMode","emissiveFactor","originalName","sanitizedName","PropertyBinding","primitives","createDracoPrimitive","addPrimitiveAttributes","cached","geometryPromise","BufferGeometry","meshIndex","materials","SkinnedMesh","Mesh","LineSegments","Line","LineLoop","Points","group","Group","cameraIndex","cameraDef","params","PerspectiveCamera","MathUtils","OrthographicCamera","skinDef","inverseBindMatrices","jointNodes","bones","boneInverses","jointNode","Skeleton","animationIndex","animationDef","animationName","pendingNodes","pendingInputAccessors","pendingOutputAccessors","pendingSamplers","pendingTargets","channel","input","output","nodes","inputAccessors","outputAccessors","samplers","tracks","node","inputAccessor","outputAccessor","createdTracks","k","AnimationClip","nodePending","childPending","childrenDef","skeletonPending","children","skeleton","nodeName","meshPromise","Bone","matrix","mapping","sceneIndex","sceneDef","nodeIds","reduceAssociations","reducedAssociations","targetName","TypedKeyframeTrack","NumberKeyframeTrack","QuaternionKeyframeTrack","VectorKeyframeTrack","interpolation","outputArray","j","jl","track","scaled","interpolantType","computeBounds","Box3","boxScale","maxDisplacement","vector","sphere","Sphere","assignAttributeAccessor","gltfAttributeName","ColorManagement","_taskCache","DRACOLoader","workerLimit","attributeIDs","attributeTypes","vertexColorSpace","taskConfig","taskKey","cachedTask","worker","taskID","taskCost","geometryPending","_worker","message","geometryData","inputColorSpace","_color","responseType","useJS","librariesPending","libraries","jsContent","fn","DRACOWorker","body","decoderConfig","decoderPending","draco","module","decodeGeometry","buffers","dracoGeometry","decodingStatus","geometryType","attributeType","attributeID","attributeResult","decodeAttribute","decodeIndex","numIndices","ptr","numComponents","numValues","dataType","getDracoDataType","GLBLoaderScript","euler","mixer","defaultMat","model","rotation","animations","actions","clip","action","loop","fromAnimation","toAnimation","fromAction","toAction","clonedResult","pos","rot","loading","loadPromise","animationController","progress","progressInfo","removeFromScene","clearCache","UVAnimationScript","configs","direction","gradientCanvas","ctx","gradient","alphaMap","objConfig","_g","_h","_i","_j","animation","lightConfig","title","fullConfig","applyToMaterial","element","AnimationMaterial","isTransparent","hasAlphaMap","depthWrite","deltaX","deltaY","scaleX","scaleY","ShaderGlowMaterial","parameters","glowColor","baseBrightness","side","WindMaterial","defaultParams","intensity","speed","RibbonMaterial","lerp","start","end","factor","lerpVector","clamp","degToRad","degrees","radToDeg","radians","randomRange","randomIntRange","createGradientAlphaMap","loadTexture","DirectionalLightScript","directionalLight","PointLightScript","pointLight"],"mappings":"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","x_google_ignoreList":[17,18,19]}